import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-760425e8.js";
const _imports_0 = "/bowenBlog/assets/image-20240107120851983-a2ec29b4.png";
const _imports_1 = "/bowenBlog/assets/image-20240107121320574-145db9b0.png";
const _imports_2 = "/bowenBlog/assets/image-20240107121444686-d2549839.png";
const _imports_3 = "/bowenBlog/assets/image-20240107133749292-7f396b49.png";
const _imports_4 = "/bowenBlog/assets/image-20240107135627460-62e7318b.png";
const _imports_5 = "/bowenBlog/assets/image-20240107135648727-953d824e.png";
const _imports_6 = "/bowenBlog/assets/image-20240107135910105-136c6302.png";
const _imports_7 = "/bowenBlog/assets/image-20240107140151655-9f285480.png";
const _imports_8 = "/bowenBlog/assets/image-20240107140158286-dbdfbc15.png";
const _imports_9 = "/bowenBlog/assets/image-20240107143510349-b9ba557d.png";
const _imports_10 = "/bowenBlog/assets/image-20240107143728320-60ec4400.png";
const _imports_11 = "/bowenBlog/assets/image-20240107145956630-eb4f84cd.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="一-tomcat" tabindex="-1"><a class="header-anchor" href="#一-tomcat" aria-hidden="true">#</a> 一，Tomcat</h2><h3 id="_1-什么是web服务器" tabindex="-1"><a class="header-anchor" href="#_1-什么是web服务器" aria-hidden="true">#</a> 1，什么是web服务器</h3><p>Web服务器是一个应用程序（软件），对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是&quot;提供网上信息浏览服务&quot;。</p><p><img src="' + _imports_0 + '" alt="image-20240107120851983"></p><p><strong>Web服务器是安装在服务器端的一款软件</strong>，将来我们把自己写的Web项目部署到Web Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器</p><p><strong>Tomcat的相关概念:</strong></p><ul><li>Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。</li><li>概念中提到了JavaEE规范，那什么又是JavaEE规范呢? 概念中提到了JavaEE规范，那什么又是JavaEE规范呢? <ul><li>JavaEE: Java Enterprise Edition, Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范: JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF。</li></ul></li><li>因为 Tomcat 支持 Servlet/JSP 规范，所以Tomcat也被称为Web容器、Servlet 容器。Servlet 需要依赖 Tomcat 才能运行。</li><li>Tomcat 的官网: https://tomcat.apache.org/ 从官网上可以下载对应的版本进行使用。</li></ul><h3 id="_2-tomcat的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-tomcat的基本使用" aria-hidden="true">#</a> 2，Tomcat的基本使用</h3><h4 id="_2-1-tomcat的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-tomcat的基本使用" aria-hidden="true">#</a> 2.1 Tomcat的基本使用</h4><p>直接从官网下载</p><p><img src="' + _imports_1 + '" alt="image-20240107121320574"></p><p>Tomcat是绿色版, <strong>直接解压即可</strong>。在D盘的software目录下，将 <code>apache-tomcat-8.5.68-windows-x64.zip</code> 进行解压缩，会得到一个 <code>apache-tomcat-8.5.68</code> 的目录，Tomcat就已经安装成功。Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。打开 <code>apache-tomcat-8.5.68</code> 目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p><p><img src="' + _imports_2 + '" alt="image-20240107121444686"></p><ul><li>bin: 目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</li><li>webapps: 就是以后<strong>项目部署的目录</strong></li></ul><p>到此，Tomcat的安装就已经完成。要想启动Tomcat，只需要双击: bin\\startup.bat。启动后，通过浏览器访问 <code>http://localhost:8080</code> 能看到Apache Tomcat的内容就说明Tomcat已经启动成功。</p><blockquote><p><strong>执行文件 startup.bat 文件启动tomcat 服务器</strong></p></blockquote><p><img src="' + _imports_3 + '" alt="image-20240107133749292"></p><p><strong>其他情况:</strong></p><p>修改服务器端口:</p><p>如果已经下载过 tomcat 服务器的, 可以在文件中查看</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>文件路径\nD:\\tomcat\\apache-tomcat-8.5.51\\conf\n\n修改文件 server.xml\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_4 + '" alt="image-20240107135627460"></p><p><img src="' + _imports_5 + '" alt="image-20240107135648727"></p><p>Tomcat<strong>默认的端口</strong>是8080，要想修改Tomcat启动的端口号，需要修改 conf/server.xml 文件</p><p>Tomcat启动的时候，<strong>启动窗口一闪而过</strong>: 需要检查JAVA_HOME环境变量是否正确配置</p><p><img src="' + _imports_6 + '" alt="image-20240107135910105"></p><p><strong>关闭 tomcat 服务器:</strong></p><p>如果要想关闭tomcat，有三种方式：</p><ul><li>直接x掉运行窗口: 强制关闭[不建议]</li><li>bin\\shutdown.bat：正常关闭</li><li>ctrl+c： 正常关闭</li></ul><h4 id="_2-2项目部署" tabindex="-1"><a class="header-anchor" href="#_2-2项目部署" aria-hidden="true">#</a> 2.2 项目部署</h4><blockquote><p>Tomcat部署项目： 将项目放置到webapps目录下，即部署完成。</p></blockquote><p>通过浏览器访问 <code>http://localhost:8080/hello/a.html</code> ，能看到下面的内容就说明项目已经部署成功。</p><p><strong>打包为 war 包</strong></p><p>但是呢随着项目的增大，项目中的资源也会越来越多，项目在拷贝的过程中也会<strong>越来越费时间</strong>，该如何解决呢? <strong>一般JavaWeb项目会被打包称war包</strong>，然后将 war 包放到 Webapps 目录下，<strong>Tomcat会自动解压缩war文件</strong>。</p><p>Tomcat检测到war包后会自动完成解压缩，在webapps目录下就会多一个haha目录：</p><p>通过浏览器访问 <code>http://localhost:8080/haha/a.html</code> ，能看到下面的内容就说明项目已经部署成功。</p><h3 id="_3-maven-创建-web-项目" tabindex="-1"><a class="header-anchor" href="#_3-maven-创建-web-项目" aria-hidden="true">#</a> 3，Maven 创建 web 项目</h3><blockquote><p>介绍完Tomcat的基本使用后，我们来学习在IDEA中如何创建Maven Web项目，学习这种方式的原因是以后<strong>Tomcat中运行的绝大多数都是Web项目</strong>，而使用Maven工具能更加简单快捷的把Web项目给创建出来，所以Maven的Web项目具体如何来构建呢?</p></blockquote><p>在真正创建Maven Web项目之前，我们先要知道Web项目长什么样子，具体的结构是什么?</p><h4 id="_3-1-web项目结构" tabindex="-1"><a class="header-anchor" href="#_3-1-web项目结构" aria-hidden="true">#</a> 3.1 web项目结构</h4><p>Web项目的结构分为: 开发中的项目和开发完可以部署的Web项目, 这两种项目的结构是不一样的，我们一个个来介绍下:</p><ul><li><strong>Maven Web项目结构</strong>: 开发中的项目</li></ul><p><img src="' + _imports_7 + '" alt="image-20240107140151655"></p><ul><li><strong>开发完成部署的Web项目</strong></li></ul><p><img src="' + _imports_8 + '" alt="image-20240107140158286"></p><ul><li>开发项目通过执行Maven打包命令==package==, 可以获取到部署的Web项目目录</li><li>编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下</li><li>pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下</li></ul><h4 id="_3-2-创建maven-web项目" tabindex="-1"><a class="header-anchor" href="#_3-2-创建maven-web项目" aria-hidden="true">#</a> 3.2 创建Maven Web项目</h4><p>介绍完Maven Web的项目结构后，接下来<strong>使用Maven来创建Web项目</strong>，创建方式有两种</p><ul><li><strong>使用骨架</strong></li><li><strong>不使用骨架</strong></li></ul><p>使用骨架创建Maven Web项目步骤：</p><ol><li><p>创建Maven项目</p></li><li><p>选择使用Web项目骨架</p></li><li><p>输入Maven项目坐标创建项目</p></li><li><p>确认Maven相关的配置信息后，完成项目创建</p></li><li><p>删除pom.xml中多余内容，只留下面的这些内容，注意打包方式 jar和war的区别</p></li><li><p>补齐Maven Web项目缺失的目录结构，默认没有java和resources目录，需要手动完成创建补齐，最终的目录结果如下</p></li></ol><p><img src="' + _imports_9 + '" alt="image-20240107143510349"></p><p><strong>不使用骨架创建Maven Web项目步骤：</strong></p><ol><li>创建Maven项目</li></ol><h3 id="_4-idea使用tomcat" tabindex="-1"><a class="header-anchor" href="#_4-idea使用tomcat" aria-hidden="true">#</a> 4，IDEA使用Tomcat</h3><p>Maven Web项目创建成功后，通过Maven的package命令可以将项目打包成war包，将war文件拷贝到Tomcat的webapps目录下，启动Tomcat就可以将项目部署成功，然后通过浏览器进行访问即可。然而我们在开发的过程中，项目中的内容会经常发生变化，如果按照上面这种方式来部署测试，是非常不方便的。如何在IDEA中能快速使用Tomcat呢? 在IDEA中集成使用Tomcat有两种方式，分别是</p><ul><li>集成本地Tomcat</li><li>Tomcat Maven插件</li></ul><h4 id="_4-1-集成本地tomcat" tabindex="-1"><a class="header-anchor" href="#_4-1-集成本地tomcat" aria-hidden="true">#</a> 4.1 集成本地Tomcat</h4><p>将刚才本地安装好的Tomcat8集成到IDEA中，完成项目部署，具体的实现步骤</p><h4 id="_4-2-tomcat-maven插件" tabindex="-1"><a class="header-anchor" href="#_4-2-tomcat-maven插件" aria-hidden="true">#</a> 4.2 Tomcat Maven插件</h4><p>在IDEA中使用本地Tomcat进行项目部署，相对来说步骤比较繁琐，所以我们需要一种更简便的方式来替换它，那就是直接使用Maven中的Tomcat插件来部署项目，具体的实现步骤，只需要两步，分别是:</p><ol><li>在pom.xml中添加Tomcat插件</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>\n       	<span class="token comment">&lt;!--Tomcat插件 --&gt;</span>\n           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>\n               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-servlet" tabindex="-1"><a class="header-anchor" href="#二-servlet" aria-hidden="true">#</a> 二, Servlet</h2><h3 id="_1-servlet-介绍" tabindex="-1"><a class="header-anchor" href="#_1-servlet-介绍" aria-hidden="true">#</a> 1, Servlet 介绍</h3><blockquote><p><strong>Servlet是JavaWeb最为核心的内容</strong>，它是Java提供的一门<strong>动态web资源开发技术</strong>。使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现 Servlet 接口，并由web服务器运行Servlet。</p></blockquote><h3 id="_2-servlet-快速入门" tabindex="-1"><a class="header-anchor" href="#_2-servlet-快速入门" aria-hidden="true">#</a> 2, Servlet 快速入门</h3><p>编写一个Servlet类，并使用IDEA中Tomcat插件进行部署，最终通过浏览器访问所编写的Servlet程序。具体的实现步骤为:</p><ol><li>创建Web项目<code>web-demo</code>，导入Servlet依赖坐标</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n       <span class="token comment">&lt;!--\n         此处为什么需要添加该标签?\n         provided指的是在编译和测试过程中有效,最后生成的war包时不会加入\n          因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错\n       --&gt;</span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2, 创建:定义一个类，实现Servlet接口，并重写接口中所有方法，并在service<strong>方法中输入一句话</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servlet hello world~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>配置:在类上使用@WebServlet注解，配置该Servlet的访问路径</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>访问:启动Tomcat,浏览器中输入URL地址访问该Servlet</li></ol><div class="language-url line-numbers-mode" data-ext="url"><pre class="language-url"><code>   http://localhost:8080/web-demo/demo1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>访问后，在控制台会打印<code>servlet hello world~</code> 说明servlet程序已经成功运行。</li></ol><h3 id="_3-servlet-的执行流程" tabindex="-1"><a class="header-anchor" href="#_3-servlet-的执行流程" aria-hidden="true">#</a> 3, Servlet 的执行流程</h3><p>Servlet程序已经能正常运行，但是我们需要思考个问题: 我们并没有创建ServletDemo1类的对象，也没有调用对象中的service方法，为什么在控制台就打印了 <code>servlet hello world~</code> 这句话呢?</p><p>要想回答上述问题，我们就需要对 Servlet 的执行流程进行一个学习。</p><p><img src="' + _imports_10 + '" alt="image-20240107143728320"></p><ul><li><p>浏览器发出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8080/web-demo/demo1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请求，从请求中可以解析出三部分内容，分别是</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>localhost:8080\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>web-demo\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>demo1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li><li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li><li>根据<code>demo1</code>可以找到要访问的是项目中的哪个 Servlet 类，根据@WebServlet后面的值进行匹配</li></ul></li><li><p>找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法</p><ul><li>ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用</li><li>service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互</li></ul></li></ul><p>总结：</p><ul><li>Servlet由谁创建? Servlet方法由谁调用? <ul><li>Servlet由web服务器创建，Servlet方法由web服务器调用</li></ul></li><li>服务器怎么知道Servlet中一定有service方法? <ul><li>因为我们自定义的Servlet, 必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</li></ul></li></ul><h3 id="_4-servlet-生命周期" tabindex="-1"><a class="header-anchor" href="#_4-servlet-生命周期" aria-hidden="true">#</a> 4, Servlet 生命周期</h3><p>Tomcat 什么时候创建的 Servlet 对象? 接下来，我们研究一下 Servlet 的生命周期。对象的生命周期指一个对象从被创建到被销毁的整个过程。Servlet运行在<strong>Servlet容器(web服务器)中</strong>，其生命周期由容器来管理，分为4个阶段：</p><ol><li><p>加载和实例化：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</p><blockquote><p>默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们能不能<strong>把Servlet的创建放到服务器启动的时候来创建</strong>，具体如何来配置?</p><p>@WebServlet(urlPatterns = &quot;/demo1&quot;, loadOnStartup = 1) loadOnstartup的取值有两类情况</p><ul><li><strong>（1）负整数: 第一次访问时创建Servlet对象</strong></li><li><strong>（2）0或正整数: 服务器启动时创建Servlet对象，数字越小优先级越高</strong></li></ul></blockquote></li><li><p>初始化：在Servlet实例化之后，容器将调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次</p></li><li><p>请求处理：每次请求 Servlet 时，Servlet 容器都会调用 Servlet 的service()方法对请求进行处理</p></li><li><p>服务终止：当需要释放内存或者容器关闭时，容器就会调用 Servlet 实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个 Servlet实例，该实例随后会被Java的垃圾收集器所回收</p></li></ol><p>代码演示Servlet的生命周期：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n* Servlet生命周期方法\n*/</span>\n<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     *  初始化方法\n     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用\n     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用\n     *  2.调用次数: 1次\n     * <span class="token keyword">@param</span> <span class="token parameter">config</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 提供服务\n     * 1.调用时机:每一次Servlet被访问时，调用\n     * 2.调用次数: 多次\n     * <span class="token keyword">@param</span> <span class="token parameter">req</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">res</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servlet hello world~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 销毁方法\n     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用\n     * 2.调用次数: 1次\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n \n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如何才能让Servlet 中的destroy方法被执行？</strong></p><ul><li>在Terminal命令行中，先使用<code>mvn tomcat7:run</code>启动，然后再使用<code>ctrl+c</code>关闭tomcat</li></ul><p><strong>总结：</strong></p><ul><li><strong>Servlet对象在什么时候被创建的?</strong><ul><li>默认是第一次访问的时候被创建，可以使用@WebServlet(urlPatterns = &quot;/demo2&quot;, loadOnStartup = 1)的loadOnStartup 修改成在服务器启动的时候创建。</li></ul></li><li><strong>Servlet生命周期</strong>中涉及到的三个方法，这三个方法是什么? 什么时候被调用? 调用几次? <ul><li>涉及到三个方法，分别是 init()、service()、destroy()</li><li>init方法在Servlet对象被创建的时候执行，只执行1次</li><li>service方法在Servlet被访问的时候调用，每访问1次就调用1次</li><li>destroy方法在Servlet对象被销毁的时候调用，只执行1次</li></ul></li></ul><h3 id="_5-其它两个方法介绍" tabindex="-1"><a class="header-anchor" href="#_5-其它两个方法介绍" aria-hidden="true">#</a> 5, 其它两个方法介绍</h3><p><strong>Servlet中总共有5个方法</strong>，我们已经介绍过其中的三个，剩下的两个方法作用分别是什么？</p><ul><li><strong>获取Servlet信息</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n  <span class="token comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span>\n  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>获取ServletConfig对象</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>ServletConfig对象</strong>，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会<strong>调用init方法</strong>，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。具体如何操作?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Servlet方法介绍\n */</span>\n<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/demo3&quot;</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo3</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/**\n     *  初始化方法\n     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用\n     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用\n     *  2.调用次数: 1次\n     * <span class="token keyword">@param</span> <span class="token parameter">config</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>servletConfig <span class="token operator">=</span> config<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  \n  	<span class="token comment">// 返回这个servlerConfig对象</span>\n    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> servletConfig<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token doc-comment comment">/**\n     * 提供服务\n     * 1.调用时机:每一次Servlet被访问时，调用\n     * 2.调用次数: 多次\n     * <span class="token keyword">@param</span> <span class="token parameter">req</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">res</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servlet hello world~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 销毁方法\n     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用\n     * 2.调用次数: 1次\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>getServletInfo()和getServletConfig()这两个方法使用的不是很多，暂时只需要了解下。</p></blockquote><h3 id="_6-体系结构" tabindex="-1"><a class="header-anchor" href="#_6-体系结构" aria-hidden="true">#</a> 6, 体系结构</h3><p>通过上面的学习，我们知道要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们<strong>更关注的其实只有 service 方法</strong>，那有没有更简单方式来创建Servlet呢?要想解决上面的问题，我们需要先对Servlet的体系结构进行下了解:</p><p><img src="' + _imports_11 + '" alt="image-20240107145956630"></p><p>因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义 Servlet,会通过继承 HttpServlet。代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo4&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//TODO GET 请求方式处理逻辑</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;get...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//TODO Post 请求方式处理逻辑</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;post...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想发送一个GET请求，请求该 Servlet，只需要通过浏览器发送<code>http://localhost:8080/web-demo/demo4</code>,就能看到 doGet 方法被执行了。要想发送一个POST请求，请求该Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个form表单来发送请求，在webapp下创建一个<code>a.html</code>页面，内容如下:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/web-demo/demo4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动测试，即可看到doPost方法被执行了。</p><p>Servlet的简化编写就介绍完了，接着需要思考两个问题:</p><ol><li>HttpServlet中为什么要根据请求方式的不同，调用不同的方法?</li><li>如何调用?</li></ol><p>针对问题一，我们需要回顾之前的知识点==前端发送GET和POST请求的时候，参数的位置不一致，GET请求参数在请求行中，POST请求参数在请求体中==，为了能处理不同的请求方式，我们得在service方法中进行判断，然后写不同的业务处理，这样能实现，但是每个Servlet类中都将有相似的代码，针对这个问题，有什么可以优化的策略么? 代码演示：</p>', 114);
const _hoisted_115 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_115);
}
const JavaTomcatyuservlet_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Java-tomcatyuservlet.html.vue"]]);
export {
  JavaTomcatyuservlet_html as default
};
