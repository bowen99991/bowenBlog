import { _ as _export_sfc, o as openBlock, c as createElementBlock, b as createStaticVNode } from "./app-e7dbe87e.js";
const _imports_0 = "/bowenBlog/assets/image-20230925204710865-9f802388.png";
const _imports_1 = "/bowenBlog/assets/image-20230925204729589-05299fc8.png";
const _imports_2 = "/bowenBlog/assets/image-20230925094925784-048ce3f8.png";
const _imports_3 = "/bowenBlog/assets/image-20230925153544889-bff36230.png";
const _imports_4 = "/bowenBlog/assets/image-20230926192409588-c90083e3.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="一-面向对象" tabindex="-1"><a class="header-anchor" href="#一-面向对象" aria-hidden="true">#</a> 一. 面向对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数式的</span>\n\n\n\n<span class="token comment">// 面向对象</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  \n  <span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 实例化一个对象</span>\n<span class="token comment">// new 出来一个对象  new是一个运算符</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-面向过程和面向对象" tabindex="-1"><a class="header-anchor" href="#_1-面向过程和面向对象" aria-hidden="true">#</a> 1, 面向过程和面向对象</h3><p>JS支持两种编程方式，分别是函数式编程和面向对象编程。分别：</p><p>new一个对象时会自动产生一个constructor 方法</p><ul><li>函数式，推荐初学者使用。理由：上手快且逻辑简单清晰。</li><li>面向对象，推荐有一些代码经验后使用。理由：面向对象的思想需要有一定的项目积累之后（写多了&amp;看的多）才能真正理解其精髓，基于面向对象可以编写出扩展性更强的代码（在一定程序上也可以简化代码）。</li></ul><p>玩面向对象，分两步：</p><ul><li>定义类，在类中定义方法，在方法中实现具体的功能</li><li>实例化一个对象（new一个对象），通过对象调用并执行方法</li></ul><h3 id="_2-对象和-this" tabindex="-1"><a class="header-anchor" href="#_2-对象和-this" aria-hidden="true">#</a> 2, 对象和 this</h3><p>在每一个类中，都有一个特殊的方法，叫constructor，当你去new这个类时，这个方法会自动执行，在这个方法中，可以做一些初始化工作，如下：</p><p><img src="' + _imports_0 + '" alt="image-20230925204710865"></p><p><img src="' + _imports_1 + '" alt="image-20230925204729589"></p><h3 id="_3-常见成员" tabindex="-1"><a class="header-anchor" href="#_3-常见成员" aria-hidden="true">#</a> 3, 常见成员</h3><p>在编写类时，最常见的成员：</p><ul><li><strong>实例变量</strong>，类中通过this来访问，在类外通过对象来访问，不能通过类名来访问</li><li><strong>实例方法</strong>，类中通过this来访问，在类外通过对象来访问，不能通过类名来访问</li></ul><p><img src="' + _imports_2 + '" alt="image-20230925094925784"></p><p>content 是实例变量, (成员变量)</p><h3 id="_4-案例" tabindex="-1"><a class="header-anchor" href="#_4-案例" aria-hidden="true">#</a> 4, 案例</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>案例3： 有两个类，一个是警察类，一个是恐怖分子类。\n\n警察类，有名字，有角色，角色有两个，一个是队长，一个是队员。队长生命值有500，队员的生命值有200。也就是说实例变量有3个。还有两个方法，一个是查看警察的状态，也就是查某个警察的生命值。还有一个方法，是用的投炸弹，去炸掉恐怖分子。炸一个恐怖分子血量减200。\n恐怖分子类，有名字，有血量。也就说有两个实例变量。还有三个方法，一个是射击某个警察，射击一次，警察的生命值减5，自身血量减2。另一个方法是扫射某些警察，扫射时，警察的生命值减8。最后一个方法是查看恐怖分子的状态，说白了就是查看某个恐怖分子的血量。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 警察类</span>\n    <span class="token keyword">class</span> <span class="token class-name">Police</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 名字 角色</span>\n      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> role</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        <span class="token keyword">this</span><span class="token punctuation">.</span>role <span class="token operator">=</span> role\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">==</span> <span class="token string">&#39;队员&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>police_hp <span class="token operator">=</span> <span class="token number">200</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>police_hp <span class="token operator">=</span> <span class="token number">500</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 查看警察的状态</span>\n      <span class="token function">show_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 状态信息</span>\n        <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">警察</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,身份是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>role<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,当前的生命值是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>police_hp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 扔炸弹方法</span>\n      <span class="token function">bomb</span><span class="token punctuation">(</span><span class="token parameter">terrorist_list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        terrorist_list<span class="token punctuation">.</span>terrorist_hp <span class="token operator">-=</span> <span class="token number">200</span>  <span class="token comment">// hp -200</span>\n        terrorist_list<span class="token punctuation">.</span><span class="token function">show_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">// 恐怖分子类</span>\n    <span class="token keyword">class</span> <span class="token class-name">Terrorist</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 名字和生命值</span>\n      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> terrorist_hp <span class="token operator">=</span> <span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 生命值默认300</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        <span class="token keyword">this</span><span class="token punctuation">.</span>terrorist_hp <span class="token operator">=</span> terrorist_hp\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 开枪射击</span>\n      <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token parameter">police_project</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        police_project<span class="token punctuation">.</span>police_hp <span class="token operator">-=</span> <span class="token number">5</span>  <span class="token comment">// 生命值-5</span>\n        police_project<span class="token punctuation">.</span><span class="token function">show_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用状态信息方法</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>terrorist_hp <span class="token operator">-=</span> <span class="token number">2</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 扫射方法</span>\n      <span class="token function">strafe</span><span class="token punctuation">(</span><span class="token parameter">police_project_list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//  集体属性 hp  -8</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> police_project <span class="token keyword">of</span> police_project_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          police_project<span class="token punctuation">.</span>police_hp <span class="token operator">-=</span> <span class="token number">8</span>\n          police_project<span class="token punctuation">.</span><span class="token function">show_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n      <span class="token punctuation">}</span>\n      <span class="token function">show_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">恐怖分子 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 当前的血量为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>terrorist_hp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> wc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Police</span><span class="token punctuation">(</span><span class="token string">&#39;wc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;队员&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 生命值是：200</span>\n    <span class="token keyword">let</span> xq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Police</span><span class="token punctuation">(</span><span class="token string">&#39;xq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;队员&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 生命值是：200</span>\n    <span class="token keyword">let</span> ml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Police</span><span class="token punctuation">(</span><span class="token string">&#39;ml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;队长&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 生命值是：500</span>\n\n    <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Terrorist</span><span class="token punctuation">(</span><span class="token string">&#39;a1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 血量是：300</span>\n    <span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Terrorist</span><span class="token punctuation">(</span><span class="token string">&#39;a2&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 血量是：200</span>\n\n    a1<span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span>wc<span class="token punctuation">)</span>  <span class="token comment">// 恐怖分子 a1 射击wc</span>\n    a1<span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span>wc<span class="token punctuation">)</span>  <span class="token comment">// 恐怖分子 a1 射击wc</span>\n    a1<span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span>wc<span class="token punctuation">)</span>  <span class="token comment">// 恐怖分子 a1 射击wc</span>\n\n    wc<span class="token punctuation">.</span><span class="token function">bomb</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>\n    wc<span class="token punctuation">.</span><span class="token function">bomb</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-面相对象三大特性" tabindex="-1"><a class="header-anchor" href="#二-面相对象三大特性" aria-hidden="true">#</a> 二. 面相对象三大特性</h2><h3 id="_1-封装" tabindex="-1"><a class="header-anchor" href="#_1-封装" aria-hidden="true">#</a> 1, 封装</h3><p>将一个数据或操作数据的方法封装到同一个类中;</p><p>大部分的编程语言都支持OOP，如C++，JAVA，PHP，Python，JS...。面向对象有三大特性：封装，继承，多态。</p><p>再说一下封装，封装体现在两个方面：</p><ul><li>将数据封闭到类中（对象），在实例化一个对象时，可以在constuctor方法中对数据进行初始化，方便后面使用。</li><li>将同一个类方法封装到一个类中，如在警察类中，封装了警察相关的方法，在暴徒类中，封装了暴徒相关的方法。</li></ul><h3 id="_2-继承" tabindex="-1"><a class="header-anchor" href="#_2-继承" aria-hidden="true">#</a> 2, 继承</h3><p>在OOP编程中，子类可以继承父类中的实例方法和实例变量，这里的继承并不是copy，父类的实例变量和实例方法还是父类的，子仅仅是继承了而已。有这样几个名词：</p><p>extends 继承类</p><ul><li>父类(基类)</li><li>子类(派生类)</li></ul><p>一个父类（基类），可以被多个子类继承</p><p>对上面的案例小结一下：</p><ul><li>当一个对象打点一个方法时，优先去当前对象所关联的那个类中找，没有的话，才去她的父类中找。</li><li>this是谁，只能你去new一个对象时，才能确定this是谁。</li><li>js不支持多继承，在C++和Python中是支持多继承。</li></ul><h3 id="_3-多态" tabindex="-1"><a class="header-anchor" href="#_3-多态" aria-hidden="true">#</a> 3, 多态</h3><p><em>多态，从字面翻译就是多种形态，在JS和Python中的多态和JAVA中的多态不太一样，或者说，JS和Python天生支持多态。</em></p><p>Java中的多态:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu</span><span class="token punctuation">;</span>\n\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n    <span class="token keyword">abstract</span> <span class="token keyword">void</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃鱼&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃骨头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">show</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Dog</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">show</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中或其他: 接口或抽象类和抽象方法来实现的,让数据可以以多种形式存在。</p><ul><li>Java 是强类型语言</li><li>JS和Python是弱类型语言</li></ul><p><em>鸭子类型,关注点在于对象的行为,能做什么,而不是关注对象的所属类型</em></p><p><img src="' + _imports_3 + '" alt="image-20230925153544889"></p><ul><li>封装：将数据和操作数据的方法封装到一个类（对象）中，方便后面使用。</li><li>继承：将类中的公共方法提取到基类中，子类去继承这个基类。</li><li>多态：JS和Python天生支持多态（这种方式叫鸭子类型）</li></ul><h3 id="_4-作业" tabindex="-1"><a class="header-anchor" href="#_4-作业" aria-hidden="true">#</a> 4, 作业</h3><ul><li>简述面向对象的三大特性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span>keys   <span class="token comment">// 遍历对象的键名</span>\nObject<span class="token punctuation">.</span>values  <span class="token comment">// 遍历对象的值</span>\nObject<span class="token punctuation">.</span>entries <span class="token comment">// 遍历对象的键和值</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-成员" tabindex="-1"><a class="header-anchor" href="#三-成员" aria-hidden="true">#</a> 三. 成员</h2><hr><h3 id="_1-实例变量" tabindex="-1"><a class="header-anchor" href="#_1-实例变量" aria-hidden="true">#</a> 1, 实例变量</h3><p>数据和方法都是类的成员</p><p>公有的(内外都可以访问)</p><h3 id="_2-静态变量" tabindex="-1"><a class="header-anchor" href="#_2-静态变量" aria-hidden="true">#</a> 2, 静态变量</h3><p>static</p><p>静态变量属于类的,每个对象中都存在相同的实例变量时,可以选择把它放在静态变量中,</p><p>静态变量只能通过类名访问.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token keyword">static</span> country <span class="token operator">=</span> <span class="token string">&#39;chinese&#39;</span> <span class="token comment">// 静态变量</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 通过 Person.country 访问</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    	<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 表示调用父类的constructor</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-实例方法" tabindex="-1"><a class="header-anchor" href="#_3-实例方法" aria-hidden="true">#</a> 3, 实例方法</h3><h3 id="_4-静态方法" tabindex="-1"><a class="header-anchor" href="#_4-静态方法" aria-hidden="true">#</a> 4, 静态方法</h3><p>通过类进行调用,不能通过对象调用,</p><h2 id="四-公有和私有" tabindex="-1"><a class="header-anchor" href="#四-公有和私有" aria-hidden="true">#</a> 四. 公有和私有</h2><h3 id="_1-设置成私有" tabindex="-1"><a class="header-anchor" href="#_1-设置成私有" aria-hidden="true">#</a> 1, 设置成私有</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n	#name<span class="token punctuation">;</span>     <span class="token comment">// 私有属性必须先声明</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n		<span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name \n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JS中的成员修饰符就是指：<strong>公有和私有</strong>。</p><ul><li>公有，在任何地方都可以调用这个成员。</li><li>私有，只有在类的内部才可以调用改成员（成员是以#开头，则表示该成员为私有）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  #name<span class="token punctuation">;</span>  <span class="token comment">// 声明了一个私有成员</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span> \n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 私有的成员在类内可以访问</span>\n    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span> <span class="token punctuation">(</span><span class="token string">&#39;wc&#39;</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n	p1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 私有成员在类 外部无法访问到</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装：把数据和处理数据的方法封装到一个类中（对象）。在封装数据时，有些数据是可以暴露给外部，让外部调用并使用，此时这个数据就是公有的。如果有的数据不想暴露给外面，需要设置成私有的。但是这个私有的在本类内部是可以使用的。</p><h2 id="五-对象嵌套" tabindex="-1"><a class="header-anchor" href="#五-对象嵌套" aria-hidden="true">#</a> 五. 对象嵌套</h2><h3 id="_1-案例" tabindex="-1"><a class="header-anchor" href="#_1-案例" aria-hidden="true">#</a> 1, 案例</h3><p>在基于面向对象进行编程时，对象之间可以存在各种各样的关系，例如：组合、关联、依赖等（Java中的称呼），用大白话来说就是各种嵌套。先考虑第一个情景：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name \n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n  <span class="token punctuation">}</span>\n  <span class="token function">message</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是一名学生 , 我叫 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , 我今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁</span><span class="token template-punctuation string">`</span></span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;wc&#39;</span> <span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Classes</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n		<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title\n    <span class="token keyword">this</span><span class="token punctuation">.</span>student_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">add_student</span><span class="token punctuation">(</span><span class="token parameter">stu_object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>student_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stu_object<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加多个学生</span>\n  <span class="token function">add_students</span><span class="token punctuation">(</span><span class="token parameter">stu_object_list</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> stu <span class="token keyword">of</span> stu_object_list<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>student_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 显示学生列表</span>\n  <span class="token function">show_stu</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 遍历</span>\n		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> stu <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student_list<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>	\n<span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Classes</span><span class="token punctuation">(</span><span class="token string">&#39;1101班&#39;</span><span class="token punctuation">)</span>\nc1<span class="token punctuation">.</span><span class="token function">add_student</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>\nc1<span class="token punctuation">.</span><span class="token function">add_students</span><span class="token punctuation">(</span><span class="token punctuation">[</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-迭代器和可迭代对象" tabindex="-1"><a class="header-anchor" href="#六-迭代器和可迭代对象" aria-hidden="true">#</a> 六. 迭代器和可迭代对象</h2><h3 id="_1-迭代器" tabindex="-1"><a class="header-anchor" href="#_1-迭代器" aria-hidden="true">#</a> 1, 迭代器</h3><p>创建一个迭代器类（类型），new这个类，就可以得到一个对象，这个对象叫迭代器对象。要求这个对象必须有一个next方法。</p><p><strong>迭代器 Iterator</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 迭代器类</span>\n    <span class="token keyword">class</span> <span class="token class-name">It</span> <span class="token punctuation">{</span>\n      names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ww&#39;</span><span class="token punctuation">]</span>\n      index <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// it作为迭代器对象</span>\n    <span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">It</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value: undefined, done: true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-可迭代对象" tabindex="-1"><a class="header-anchor" href="#_2-可迭代对象" aria-hidden="true">#</a> 2, 可迭代对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n  <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 1.实现一个特定函数, </span>\n      <span class="token comment">// 2.这个函数需要返回一个迭代器 (这个迭代器用于迭代当前的对象)</span>\n      <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>\n        <span class="token keyword">let</span> dataIterator <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> that<span class="token punctuation">.</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">value</span><span class="token operator">:</span> that<span class="token punctuation">.</span>name<span class="token punctuation">[</span>that<span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> dataIterator <span class="token comment">// 返回迭代器</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ww&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xw&#39;</span><span class="token punctuation">]</span>\n\n    <span class="token comment">// 可迭代对象</span>\n    <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>friends<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> it <span class="token operator">=</span> t1<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// it 是迭代器</span>\n    <span class="token comment">// console.log(it.next())</span>\n    <span class="token comment">// console.log(it.next())</span>\n    <span class="token comment">// console.log(it.next())</span>\n    <span class="token comment">// console.log(it.next()) // undefined</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> t1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历可迭代对象</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JS的哪些容器天生就是可迭代对象:</p><ul><li>数组</li><li>Set</li><li>arguments</li><li>字符串</li><li>JS中的对象不是可迭代对象</li></ul><h3 id="_3-可迭代对象的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-可迭代对象的应用场景" aria-hidden="true">#</a> 3, 可迭代对象的应用场景</h3><p>可迭代对象的应用场景: 把一个非可迭代对象 转化成 可迭代对象</p><p><img src="' + _imports_4 + '" alt="image-20230926192409588"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span>height<span class="token punctuation">,</span>friends</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n		\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-生成器" tabindex="-1"><a class="header-anchor" href="#七-生成器" aria-hidden="true">#</a> 七. 生成器</h2><h3 id="_1-生成器函数" tabindex="-1"><a class="header-anchor" href="#_1-生成器函数" aria-hidden="true">#</a> 1，生成器函数</h3><p>生成器函数的特点：</p><ul><li>function后面会跟上星号</li><li>代码的执行可以被yield控制</li><li>生成器函数默认在执行时, 返回一个生成器对象</li><li>要想执行函数内部的代码, 需要生成器对象, 调用它的next操作</li><li>当遇到yield时, 就会中断执行</li><li>如果按照迭代器的规定来看，其实生成器类也是一种特殊的迭代器类（生成器也是一个中特殊的迭代器）</li></ul><h3 id="_2-生成器是特殊的迭代器" tabindex="-1"><a class="header-anchor" href="#_2-生成器是特殊的迭代器" aria-hidden="true">#</a> 2, 生成器是特殊的迭代器</h3><p>列举面向对象的成员,和他们的特点:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 实例变量\n 静态变量\n 实例方法\n 静态方法\n \n实例变量（instance variable）是类的成员变量，它属于类的每个实例，而不是类的类对象。实例变量在创建类实例时自动创建，实例变量在实例化后可以通过实例来访问。实例变量在不同的实例之间是独立的，不会共享。\n\n静态变量（static variable）是类的成员变量，它属于类对象，而不是类的实例。静态变量在类加载时就被创建，而不是在实例化时。静态变量在类的所有实例之间共享，且具有全局作用域。静态变量可以通过类名直接访问，而不需要实例化。\n\n实例方法（instance method）是类的方法，它属于类的每个实例。实例方法可以在类的实例上调用，通过实例来访问和操作数据。实例方法可以在不同的实例之间共享，不会受到实例的个数影响。实例方法可以通过实例调用，也可以通过类名调用。\n\n静态方法（static method）是类的成员函数，它属于类对象，而不是类的实例。静态方法在类加载时就被创建，而不是在实例化时。静态方法可以在类的外部访问，而不需要实例化。静态方法可以用来定义不需要实例化即可访问的函数。\n\n\n\n 面向对象中如何让成员变为私有。\n\n只有在类的内部才可以调用改成员（成员是以#开头，则表示该成员为私有）。\n\n  \n\n    简述你理解的：迭代器、生成器、可迭代对象。\n \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八-异常" tabindex="-1"><a class="header-anchor" href="#八-异常" aria-hidden="true">#</a> 八. 异常</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token comment">// 错误类型 也是一个class 类, 也可以new出一个新的对象</span>\n\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-浏览器自动抛出异常" tabindex="-1"><a class="header-anchor" href="#_1-浏览器自动抛出异常" aria-hidden="true">#</a> 1, 浏览器自动抛出异常</h3><h3 id="_2-异常处理" tabindex="-1"><a class="header-anchor" href="#_2-异常处理" aria-hidden="true">#</a> 2, 异常处理</h3>', 93);
const _hoisted_94 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_94);
}
const mianxiangduixiang_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "mianxiangduixiang.html.vue"]]);
export {
  mianxiangduixiang_html as default
};
