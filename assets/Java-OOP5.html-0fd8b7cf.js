import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-f146d886.js";
const _imports_0 = "/bowenBlog/assets/image-20231226161303413-a0a02718.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="特殊文件与日志技术" tabindex="-1"><a class="header-anchor" href="#特殊文件与日志技术" aria-hidden="true">#</a> 特殊文件与日志技术</h2><h2 id="一-属性文件" tabindex="-1"><a class="header-anchor" href="#一-属性文件" aria-hidden="true">#</a> 一, 属性文件</h2><h3 id="_1-特殊文件" tabindex="-1"><a class="header-anchor" href="#_1-特殊文件" aria-hidden="true">#</a> 1, 特殊文件</h3><blockquote><p>两种特殊的文本文件，一种是properties文件，还有一种是 xml 文件。</p></blockquote><p>properties文件和xml文件介绍：</p><ul><li>后缀为 .properties 的文件，称之为属性文件，它可以很方便的存储一些类似于键值对的数据。经常当做软件的配置文件使用。</li><li>xml 文件能够表示更加复杂的数据关系，比如要表示多个用户的用户名、密码、家乡、性别等。在后面，也经常当做软件的配置文件使用。(早期的前后端通信也是用到了 xml 文件格式, 现在使用的是 json文件格式)</li></ul><p><strong>只需要把握三点：</strong></p><ul><li>特殊文件的特点和作用</li><li>如何读取它里面的数据</li><li>如何使用程序把数据写到特殊文件中</li></ul><h3 id="_2-properties属性文件" tabindex="-1"><a class="header-anchor" href="#_2-properties属性文件" aria-hidden="true">#</a> 2, Properties属性文件</h3><blockquote><p>属性文件（Properties file）是一种普遍用于存储配置数据的文本文件格式。它通常采用<code>.properties</code>作为文件扩展名，并使用键值对的形式来表示数据。</p></blockquote><p><strong>示例</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 注释</span>\n\n<span class="token comment"># 不能添加空格, 分号, 否则会被认为是值的一部分</span>\n<span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">ZhangSan</span>\n<span class="token key attr-name">age</span><span class="token punctuation">=</span><span class="token value attr-value">18</span>\n<span class="token key attr-name">admin</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>\n<span class="token key attr-name">pwd</span><span class="token punctuation">=</span><span class="token value attr-value">123</span>\n\n<span class="token comment"># 每一行包含一个键值对，使用等号（=）将键和值分隔开。键和值都可以是字符串，没有特定的数据类型限制。属性文件中可以包含任意数量的键值对，可以根据需要进行扩展和修改。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>属性文件的格式：</strong></p><ul><li>属性文件后缀以<code>.properties</code>结尾</li><li>属性文件里面的每一行都是一个键值对，键和值中间用=隔开。比如: <code>admin=123456</code></li><li><code>#</code>表示这样是注释信息，是用来解释这一行配置是什么意思。</li><li>每一行末尾不要习惯性加分号，以及空格等字符；不然会把分号，空格会当做值的一部分。</li><li>键不能重复，值可以重复</li></ul><p>示例属性文件的内容：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 示例属性文件</span>\n\n<span class="token comment"># 数据库配置</span>\n<span class="token key attr-name">db.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>\n<span class="token key attr-name">db.port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span>\n<span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>\n<span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">secretpassword</span>\n\n<span class="token comment"># 日志配置</span>\n<span class="token key attr-name">log.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span>\n<span class="token key attr-name">log.filepath</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/application.log</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在Java中，可以使用<code>java.util.Properties</code>类来读取和写入属性文件。该类提供了方法来加载属性文件、获取属性值，并支持将属性文件的内容存储回文件。</p></blockquote><p>读取属性文件中的数据，需要使用Properties，Properties是Map接口下面的一个实现类，所以Properties也是一种双列集合，用来存储键值对。但是一般不会把它当做集合来使用。Properties类的对象，用来表示属性文件，可以用来读取属性文件中的键值对。</p><p>使用Properties读取属性文件中的键值对，需要用到的方法如下：</p><p><img src="' + _imports_0 + '" alt="image-20231226161303413"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       	<span class="token comment">// 创建 Properties 对象，用于存储属性</span>\n        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;config.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          	<span class="token comment">// 加载属性文件到 Properties 对象</span>\n            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 获取属性值</span>\n            <span class="token class-name">String</span> dbHost <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> dbPort <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          	<span class="token comment">// 输出获取的属性值</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Database Host: &quot;</span> <span class="token operator">+</span> dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Database Port: &quot;</span> <span class="token operator">+</span> dbPort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Username: &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Password: &quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 假设属性文件名为config.properties，通过FileInputStream将属性文件加载到Properties对象中。然后，使用getProperty()方法获取特定键的值。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-xml-文件" tabindex="-1"><a class="header-anchor" href="#二-xml-文件" aria-hidden="true">#</a> 二, XML 文件</h2><hr><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1, 介绍</h3><blockquote><p>XML（eXtensible Markup Language）是一种用于存储和传输数据的标记语言。它使用标签来描述数据的结构和含义，具有自我描述性和可扩展性，被广泛应用于数据交换和配置文件等领域。</p></blockquote><p>基本示例</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>\n<span class="token comment">&lt;!--文档声明, 版本, 解码类型--&gt;</span>\n\n<span class="token comment">&lt;!--唯一根标签, 根标签中的其他标签是双标签--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>zs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-xml-文件的基本特点" tabindex="-1"><a class="header-anchor" href="#_2-xml-文件的基本特点" aria-hidden="true">#</a> 2, XML 文件的基本特点</h3><ol><li><strong>标签结构</strong>：XML使用标签来标识数据的元素，标签由开始标记和结束标记组成，例如<code>&lt;book&gt;...&lt;/book&gt;</code>。标签可以嵌套形成层次结构，表示数据之间的关系。</li><li><strong>元素</strong>：XML的数据由元素组成，每个元素可以包含其他元素、文本内容或属性。元素是XML文档的基本单元，用于表示数据的逻辑单元。</li><li><strong>属性</strong>：XML的元素可以包含属性，属性用于提供关于元素的附加信息。属性由属性名和属性值组成，位于元素的开始标记中，例如<code>&lt;book id=&quot;123&quot;&gt;</code>。</li><li><strong>文本内容</strong>：XML的元素可以包含文本内容，用于存储实际的数据值。文本内容位于元素的开始标记和结束标记之间，例如<code>&lt;title&gt;XML Basics&lt;/title&gt;</code>。</li><li><strong>自定义结构</strong>：XML允许用户定义自己的标签和结构，以适应特定的数据和应用需求。这使得XML具有很高的灵活性和可扩展性。</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>XML Basics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Web Development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>Jane Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>library</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么放弃了 xml 文件作为前后端通信 ?</strong></p><p>在过去，XML是一种常见的前后端通信格式，特别是在Web服务中。然而，随着时间的推移，XML逐渐被其他格式所取代，例如JSON（JavaScript Object Notation）。</p><ol><li><strong>冗余和复杂性</strong>：XML的标签结构和自我描述性使得它的数据量相对较大，而且解析和处理XML需要更多的资源和时间。相比之下，JSON使用简洁的键值对结构，数据量更小，解析和处理效率更高。</li><li><strong>可读性</strong>：虽然XML对人类可读，但其冗长的标签结构和嵌套层次使得阅读和编写XML文档相对繁琐。相比之下，JSON使用简洁的语法，更易于理解和编辑。</li><li><strong>编码和解码的复杂性</strong>：XML的解析和处理需要使用XML解析器，并且需要编写复杂的代码来提取和操作数据。相比之下，JSON在大多数编程语言中都有内置的支持，解析和处理JSON数据更加简单和直观。</li><li><strong>前端开发趋势</strong>：随着前端开发的发展，JavaScript成为了广泛使用的语言，并且JSON与JavaScript的对象表示法非常相似，可以直接在前端进行解析和处理。这使得JSON成为前后端数据交互的首选格式。</li><li><strong>性能和网络开销</strong>：由于XML的冗长和复杂性，它需要更多的带宽和处理能力来传输和处理。相比之下，JSON的数据量更小，可以减少网络开销，并提高性能</li></ol><p>xml 文件现已通常用于 Java 项目的配置文件</p><blockquote><p>JSON已经成为了更流行和广泛接受的前后端通信格式。它简单、轻量、易于解析和处理，并且与现代的前端开发技术紧密集成</p></blockquote><h3 id="_3-xml-文件解析" tabindex="-1"><a class="header-anchor" href="#_3-xml-文件解析" aria-hidden="true">#</a> 3, XML 文件解析</h3><h3 id="_4-xml-文件写入" tabindex="-1"><a class="header-anchor" href="#_4-xml-文件写入" aria-hidden="true">#</a> 4, XML 文件写入</h3>', 38);
const _hoisted_39 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_39);
}
const JavaOOP5_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Java-OOP5.html.vue"]]);
export {
  JavaOOP5_html as default
};
