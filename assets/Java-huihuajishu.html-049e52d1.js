import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-e244f97e.js";
const _imports_0 = "/bowenBlog/assets/image-20240111142523979-60a3d0c9.png";
const _imports_1 = "/bowenBlog/assets/image-20240111142741096-d4ba3a01.png";
const _imports_2 = "/bowenBlog/assets/image-20240111143650271-79c64a26.png";
const _imports_3 = "/bowenBlog/assets/image-20240111145312570-5ca3c5b8.png";
const _imports_4 = "/bowenBlog/assets/image-20240111153016011-54a042a7.png";
const _imports_5 = "/bowenBlog/assets/image-20240111155911129-d2eeff87.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="一-会话技术定义" tabindex="-1"><a class="header-anchor" href="#一-会话技术定义" aria-hidden="true">#</a> 一, 会话技术定义</h2><h3 id="_1-会话技术概述" tabindex="-1"><a class="header-anchor" href="#_1-会话技术概述" aria-hidden="true">#</a> 1, 会话技术概述</h3><p>对于<code>会话跟踪</code>这四个词，我们需要拆开来进行解释，首先要理解什么是<code>会话</code>，然后再去理解什么是<code>会话跟踪</code>。</p><p><strong>会话</strong>: 用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。</p><ul><li>从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了</li><li>会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着</li><li>浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。</li></ul><p>用实际场景来理解下会话，比如在我们访问京东的时候，当打开浏览器进入京东首页后，浏览器和京东的服务器之间就建立了一次会话，后面的搜索商品,查看商品的详情,加入购物车等都是在这一次会话中完成。</p><p><img src="' + _imports_0 + '" alt="image-20240111142523979"></p><blockquote><p>图中总共建立了3个会话，每个浏览器都会与服务端建立了一个会话。</p></blockquote><p><strong>会话跟踪</strong> 是一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据</p><ul><li>服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器</li><li>服务器需要用来识别请求是否来自同一个浏览器</li><li>服务器用来识别浏览器的过程，这个过程就是会话跟踪</li><li>服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据</li></ul><h2 id="二-cookie-的基本使用" tabindex="-1"><a class="header-anchor" href="#二-cookie-的基本使用" aria-hidden="true">#</a> 二, Cookie 的基本使用</h2><h3 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1, 基本使用</h3><p>Cookie：客户端会话技术，<strong>将数据保存到客户端</strong>，以后每次请求都携带Cookie数据进行访问。</p><p>Cookie的工作流程：</p><p><img src="' + _imports_1 + '" alt="image-20240111142741096"></p><ul><li>服务端提供了两个Servlet，分别是ServletA和ServletB</li><li>浏览器发送HTTP请求1给服务端，服务端ServletA接收请求并进行业务处理</li><li>服务端ServletA在处理的过程中可以创建一个Cookie对象并将<code>name=zs</code>的数据存入Cookie</li><li>服务端ServletA在响应数据的时候，会把Cookie对象响应给浏览器</li><li>浏览器接收到响应数据，会把Cookie对象中的数据存储在浏览器内存中，此时浏览器和服务端就建立了一次会话</li><li>在同一次会话中浏览器再次发送HTTP请求2给服务端ServletB，浏览器会携带Cookie对象中的所有数据</li><li>ServletB接收到请求和数据后，就可以获取到存储在Cookie对象中的数据，这样同一个会话中的多次请求之间就实现了数据共享</li></ul><p>对于Cookie的使用，我们更关注的应该是<strong>后台代码如何操作Cookie</strong>，对于Cookie的操作主要分两大类，本别是发送Cookie和获取Cookie,对于上面这两块内容，分别该如何实现呢?</p><p><strong>发送 cookie</strong></p><ul><li><p>创建Cookie对象，并设置数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>发送Cookie到客户端：使用response对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>在服务器内创建一个cookie, cookie 保存一个数据,</p></blockquote><blockquote><p>会话结束, 自动清除 cookie</p></blockquote><h3 id="_2-原理分析" tabindex="-1"><a class="header-anchor" href="#_2-原理分析" aria-hidden="true">#</a> 2, 原理分析</h3><p>对于Cookie的实现原理是基于HTTP协议的,其中设计到HTTP协议中的两个请求头信息:</p><ul><li>响应头: set-cookie</li><li>请求头: cookie</li></ul><p><img src="' + _imports_2 + '" alt="image-20240111143650271"></p><h3 id="_3-cookie-的使用细节" tabindex="-1"><a class="header-anchor" href="#_3-cookie-的使用细节" aria-hidden="true">#</a> 3, Cookie 的使用细节</h3><p>Cookie的细节中，主要讲解两个知识：</p><ul><li>Cookie的存活时间</li><li>Cookie如何存储中文</li></ul><p>流程：</p><p><img src="' + _imports_3 + '" alt="image-20240111145312570"></p><p><strong>流程详解解释:</strong></p><ol><li>浏览器发送请求给AServlet,AServlet会响应一个存有<code>usernanme=zs</code>的Cookie对象给浏览器</li><li>浏览器接收到响应数据将cookie存入到浏览器内存中</li><li>当浏览器再次发送请求给BServlet,BServlet就可以使用Request对象获取到Cookie数据</li><li>在发送请求到BServlet之前，如果把浏览器关闭再打开进行访问，BServlet能否获取到Cookie数据?</li></ol><p>经过测试，会发现，BServlet中无法再获取到Cookie数据。<strong>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</strong>。</p><p><strong>那么如何将Cookie持久化存储?</strong></p><p>Cookie其实已经为我们提供好了对应的API来完成这件事，这个API就是setMaxAge。用于设置Cookie存活时间</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数值：</strong></p><ul><li>正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除</li><li>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</li><li>零：删除对应Cookie</li></ul><p><strong>如果存储中文字符, 浏览器就会报错 500 , 如何解决存储中文的问题?</strong></p><h2 id="三-session" tabindex="-1"><a class="header-anchor" href="#三-session" aria-hidden="true">#</a> 三, Session</h2><h3 id="_1-基本使用-1" tabindex="-1"><a class="header-anchor" href="#_1-基本使用-1" aria-hidden="true">#</a> 1, 基本使用</h3><p>Session：服务端会话跟踪技术：将数据保存到服务端。</p><ul><li>Session是存储在服务端而Cookie是存储在客户端</li><li>存储在客户端的数据容易被窃取和截获，存在很多不安全的因素</li><li>存储在服务端的数据相比于客户端来说就更安全</li></ul><p><img src="' + _imports_4 + '" alt="image-20240111153016011"></p><ul><li>在服务端的AServlet获取一个Session对象，把数据存入其中</li><li>在服务端的BServlet获取到相同的Session对象，从中取出数据</li><li>就可以实现一次会话中多次请求之间的数据共享了</li></ul><h3 id="_3-使用细节" tabindex="-1"><a class="header-anchor" href="#_3-使用细节" aria-hidden="true">#</a> 3, 使用细节</h3><h4 id="_2-session-的销毁" tabindex="-1"><a class="header-anchor" href="#_2-session-的销毁" aria-hidden="true">#</a> 2, Session 的销毁</h4><p>session的销毁会有两种方式:</p><ul><li>默认情况下，无操作，30分钟自动销毁。对于这个失效时间，是可以通过配置进行修改的。在web.xml中配置。如果没有配置，默认是30分钟，默认值是在Tomcat的web.xml配置文件中写死的</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>\n         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">&quot;</span></span>\n         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用Session对象的invalidate()进行销毁，在SessionDemo2类中添加session销毁的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取数据，从session中</span>\n\n        <span class="token comment">//1. 获取Session对象</span>\n        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 销毁</span>\n        session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//2. 获取数据</span>\n        <span class="token class-name">Object</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动访问测试，先访问demo1将数据存入到session，再次访问demo2从session中获取数据</p><p>500 错误, session 已经失效</p><h3 id="cookie和session小结" tabindex="-1"><a class="header-anchor" href="#cookie和session小结" aria-hidden="true">#</a> <strong>Cookie和Session小结</strong></h3><ul><li>Cookie 和 Session 都是来完成一次会话内多次请求间数据共享的。</li><li>区别: <ul><li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端</li><li>安全性：Cookie不安全，Session安全</li><li>数据大小：Cookie最大3KB，Session无大小限制</li><li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ul></li><li>应用场景: <ul><li>购物车:使用Cookie来存储</li><li>以登录用户的名称展示:使用Session来存储</li><li>记住我功能:使用Cookie来存储</li><li>验证码:使用session来存储</li></ul></li><li>结论 <ul><li>Cookie是用来保证用户在未登录情况下的身份识别</li><li>Session是用来保存用户登录后的数据</li></ul></li></ul><blockquote><p>在前后端分离开发, 我们会使用token作为请求标识, 所以cookie和session并不会常用, 但还是需要了解这方面的知识</p></blockquote><h2 id="四-登录注册" tabindex="-1"><a class="header-anchor" href="#四-登录注册" aria-hidden="true">#</a> 四, 登录注册</h2><h3 id="_1-需求分析" tabindex="-1"><a class="header-anchor" href="#_1-需求分析" aria-hidden="true">#</a> 1，需求分析</h3><p>需求：</p><ul><li>完成用户<strong>登录</strong>功能，如果用户勾选“<strong>记住用户</strong>” ，则下次访问登录页面<strong>自动填充</strong>用户名密码</li><li>完成<strong>注册</strong>功能，并实现<strong>验证码</strong>功能</li></ul><h3 id="_2-登录实现" tabindex="-1"><a class="header-anchor" href="#_2-登录实现" aria-hidden="true">#</a> 2，登录实现</h3><p>登录：</p><ul><li>用户登录成功后，跳转到后台首页面，并在页面上展示当前登录的用户名</li><li>用户登录失败后，跳转回登录页面，并在页面上展示对应的错误信息</li></ul><p>流程分析：</p><p><img src="' + _imports_5 + '" alt="image-20240111155911129"></p><blockquote><ol><li>前端通过表单发送请求和数据给Web层的LoginServlet</li><li>在LoginServlet中接收请求和数据[用户名和密码]</li><li>LoginServlet接收到请求和数据后，调用Service层完成根据用户名和密码查询用户对象</li><li>在Service层需要编写UserService类，在类中实现login方法，方法中调用Dao层的UserMapper</li><li>在UserMapper接口中，声明一个根据用户名和密码查询用户信息的方法</li><li>Dao层把数据查询出来以后，将返回数据封装到User对象，将对象交给Service层</li><li>Service层将数据返回给Web层</li><li>Web层获取到User对象后，判断User对象，如果为Null,则将错误信息响应给登录页面，如果不为Null，则跳转到列表页面，并把当前登录用户的信息存入Session携带到列表页面。</li></ol></blockquote>', 68);
const _hoisted_69 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_69);
}
const JavaHuihuajishu_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Java-huihuajishu.html.vue"]]);
export {
  JavaHuihuajishu_html as default
};
