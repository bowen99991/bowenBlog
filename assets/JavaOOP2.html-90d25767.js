import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-01d350d9.js";
const _imports_0 = "/bowenBlog/assets/image-20231221141728088-a44f4661.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><p><strong>复习一下之前的 Java OOP 知识点</strong></p><blockquote><p>在Java中，面向对象编程（Object-Oriented Programming，OOP）是一种编程范式，它将程序设计看作是对象的集合，对象通过相互交互来完成任务。面向对象编程的核心概念包括类、对象、继承、封装和多态。</p></blockquote><ol><li><strong>类（Class）</strong>：类是用于创建对象的模板或蓝图。它定义了对象的属性和行为。类是面向对象编程的基本单元，从类可以创建多个对象。</li><li><strong>对象（Object）</strong>：对象是类的实例。它具有类定义的属性和行为。对象是具体的、实际存在的实体。</li><li><strong>继承（Inheritance）</strong>：继承是一种机制，允许一个类从另一个类派生，继承父类的属性和方法。子类继承了父类的特性，并可以扩展或修改它们。</li><li><strong>封装（Encapsulation）</strong>：封装是将数据和操作封装在一个单元中，对外部隐藏内部实现细节的机制。通过封装，可以实现数据的安全性和代码的模块化。</li><li><strong>多态（Polymorphism）</strong>：多态是指同一个方法名可以有多个不同的实现方式。它允许使用一个父类类型的引用来引用子类对象，从而实现在运行时确定具体调用哪个子类的方法。</li></ol><p><strong>面向对象编程</strong></p><ol><li><strong>方法（Method）</strong>：方法是类中定义的操作或行为。它们用于执行特定的任务，可以接受参数并返回结果。</li><li><strong>构造方法（Constructor）</strong>：构造方法是一种特殊的方法，用于创建和初始化对象。它与类同名，没有返回类型，并在对象创建时自动调用。</li><li><strong>成员变量（Instance Variables）</strong>：成员变量是定义在类中的变量，每个对象都有自己的一份。它们表示对象的状态和特性。</li><li><strong>静态成员变量和方法（Static Variables and Methods）</strong>：静态成员变量和方法属于类本身，而不是对象。它们在类加载时初始化，并且对所有对象共享。</li><li><strong>抽象类（Abstract Class）</strong>：抽象类是不能被实例化的类，它只能作为其他类的基类。抽象类可以包含抽象方法和具体方法的定义，用于实现代码的复用和约束。</li><li><strong>接口（Interface）</strong>：接口是一种纯粹抽象的类，它只包含方法的签名而没有实现。类可以实现一个或多个接口，从而实现多继承的效果。</li><li><strong>重写（Override）</strong>：重写是指在子类中重新定义父类中已有的方法。子类可以根据需要修改或扩展继承的方法的实现。</li><li><strong>重载（Overload）</strong>：重载是指在同一个类中定义多个方法，它们具有相同的名称但参数列表不同。编译器根据调用时提供的参数类型和数量来确定要调用的方法。</li><li><strong>访问修饰符（Access Modifiers）</strong>：访问修饰符用于控制类、方法和变量的访问权限。常用的访问修饰符包括public、private、protected和默认（package-private）。</li><li><strong>封装（Encapsulation）</strong>：封装是将相关的数据和方法组合成一个单元，并限制对数据的直接访问。通过封装，可以隐藏内部实现细节，提供对外部的安全访问接口。</li></ol><h2 id="一-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#一-lambda-表达式" aria-hidden="true">#</a> 一, Lambda 表达式</h2><hr><blockquote><p>Lambda表达式是Java 8引入的一种函数式编程的特性。它可以用来简化代码并支持函数式编程风格。Lambda表达式可以被视为一种匿名函数，它没有名称，但具有参数列表、函数体和可能的返回值。</p></blockquote><h3 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1, 基本使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> expression\n  \n<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> statements<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// parameters 是参数列表，可以为空或包含一个或多个参数。箭头 -&gt; 分隔参数列表和表达式或语句块。如果表达式只有一行，可以直接写表达式；如果有多行，需要使用花括号 {} 将多个语句包围起来。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>要求:</strong> 必须是接口创建出来的匿名内部类, 不能是抽象类, 且接口中是有一个成员方法</p></blockquote><p>（注意：不能是抽象类，只能是接口）。如下的接口，我们叫<strong>函数式接口</strong>，只有基于函数式接口的匿名内部类才能被Lambda表达式简化。</p><p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Swimming</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1.创建一个Swimming接口的匿名内部类对象</span>\n        <span class="token class-name">Swimming</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学生快乐的游泳~~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        s<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n        <span class="token comment">// 2,使用Lambda表达式</span>\n        <span class="token class-name">Swimming</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;张三在游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s1<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>idea 中的可替换提示</p><p><img src="' + _imports_0 + '" alt="image-20231221141728088"></p><h3 id="_2-省略规则" tabindex="-1"><a class="header-anchor" href="#_2-省略规则" aria-hidden="true">#</a> 2, 省略规则</h3><p>Lamdba表达式有几种简化写法。具体的简化规则如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.L</span>ambda的标准格式\n	<span class="token punctuation">(</span>参数类型<span class="token number">1</span> 参数名<span class="token number">1</span><span class="token punctuation">,</span> 参数类型<span class="token number">2</span> 参数名<span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>\n		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>方法体的代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n		<span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>\n	<span class="token punctuation">}</span>\n\n<span class="token number">2.</span>在标准格式的基础上<span class="token punctuation">(</span><span class="token punctuation">)</span>中的参数类型可以直接省略\n	<span class="token punctuation">(</span>参数名<span class="token number">1</span><span class="token punctuation">,</span> 参数名<span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>\n		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>方法体的代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n		<span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>\n	<span class="token punctuation">}</span>\n	\n<span class="token number">3.</span>如果<span class="token punctuation">{</span><span class="token punctuation">}</span>总的语句只有一条语句，则<span class="token punctuation">{</span><span class="token punctuation">}</span>可以省略、<span class="token keyword">return</span>关键字、以及最后的“<span class="token punctuation">;</span>”都可以省略\n	<span class="token punctuation">(</span>参数名<span class="token number">1</span><span class="token punctuation">,</span> 参数名<span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> 结果\n	\n<span class="token number">4.</span>如果<span class="token punctuation">(</span><span class="token punctuation">)</span>里面只有一个参数，则<span class="token punctuation">(</span><span class="token punctuation">)</span>可以省略\n	<span class="token punctuation">(</span>参数名<span class="token punctuation">)</span><span class="token operator">-&gt;</span>结果\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来从匿名内部类开始、到Lambda标准格式、再到Lambda简化格式，一步一步来简化一下。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 目标：使用Lambda简化函数式接口。</span>\n        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">99.8</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n		<span class="token comment">//1.对数组中的每一个元素*0.8: 匿名内部类写法</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntToDoubleFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">applyAsDouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// value = 0  1  2</span>\n                <span class="token keyword">return</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		<span class="token comment">//2.需求：对数组中的每一个元素*0.8,使用Lambda表达式标准写法</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		<span class="token comment">//3.使用Lambda表达式简化格式1——省略参数类型</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		<span class="token comment">//4.使用Lambda表达式简化格式2——省略()</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> value <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//5.使用Lambda表达式简化格式3——省略{}</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> value <span class="token operator">-&gt;</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>&quot;<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n\n        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;蜘蛛精&quot;</span><span class="token punctuation">,</span> <span class="token number">169.5</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;紫霞&quot;</span><span class="token punctuation">,</span> <span class="token number">163.8</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;紫霞&quot;</span><span class="token punctuation">,</span> <span class="token number">163.8</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;至尊宝&quot;</span><span class="token punctuation">,</span> <span class="token number">167.5</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		\n        <span class="token comment">//1.使用匿名内部类</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		<span class="token comment">//2.使用Lambda表达式表达式——标准格式</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		<span class="token comment">//3.使用Lambda表达式表达式——省略参数类型</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token punctuation">(</span> o1<span class="token punctuation">,</span>  o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		<span class="token comment">//4.使用Lambda表达式表达式——省略{}</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token punctuation">(</span> o1<span class="token punctuation">,</span>  o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-方法引用" tabindex="-1"><a class="header-anchor" href="#二-方法引用" aria-hidden="true">#</a> 二, 方法引用</h2><hr><h3 id="_0-介绍" tabindex="-1"><a class="header-anchor" href="#_0-介绍" aria-hidden="true">#</a> 0, 介绍</h3><blockquote><p>方法引用是Java中一种特殊的语法，它允许直接引用已经存在的方法作为值，用于函数式编程中的Lambda表达式。方法引用提供了一种简洁的方式来表示已经存在的方法的调用。</p></blockquote><p>方法引用可以使用以下三种形式：</p><ol><li><p><strong>静态方法引用</strong>：引用静态方法，语法为<code>ClassName::staticMethodName</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 静态方法引用示例</span>\n<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">doubleValue</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实例方法引用</strong>：引用特定对象的实例方法，语法为<code>instance::instanceMethodName</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实例方法引用示例</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>构造方法引用</strong>：引用构造方法来创建新对象，语法为<code>ClassName::new</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 构造方法引用示例</span>\n<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listSupplier <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> listSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>方法引用要求目标方法的签名与函数式接口的抽象方法的参数列表和返回类型相匹配。</p></blockquote><h3 id="_1-静态方法引用" tabindex="-1"><a class="header-anchor" href="#_1-静态方法引用" aria-hidden="true">#</a> 1, 静态方法引用</h3><p>用之前Arrays代码来做演示。现在准备好下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;蜘蛛精&quot;</span><span class="token punctuation">,</span> <span class="token number">169.5</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;紫霞&quot;</span><span class="token punctuation">,</span> <span class="token number">163.8</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;紫霞&quot;</span><span class="token punctuation">,</span> <span class="token number">163.8</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        students<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;至尊宝&quot;</span><span class="token punctuation">,</span> <span class="token number">167.5</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 原始写法：对数组中的学生对象，按照年龄升序排序</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按照年龄升序排序</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用Lambda简化后的形式</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我想要把Lambda表达式的方法体，用一个静态方法代替。准备另外一个类CompareByData类，用于封装Lambda表达式的方法体代码；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareByData</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareByAge</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序排序的规则</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们就可以把Lambda表达式的方法体代码，改为下面的样子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">CompareByData</span><span class="token punctuation">.</span><span class="token function">compareByAge</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Java为了简化上面Lambda表达式的写法，利用方法引用可以改进为下面的样子。**实际上就是用类名调用方法，但是把参数给省略了。**这就是静态方法引用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//静态方法引用：类名::方法名</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token class-name">CompareByData</span><span class="token operator">::</span><span class="token function">compareByAge</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-实例方法引用" tabindex="-1"><a class="header-anchor" href="#_2-实例方法引用" aria-hidden="true">#</a> 2, 实例方法引用</h3><p>还是上面的案例，想要把Lambda表达式的方法体，用一个实例方法代替。在CompareByData类中，再添加一个实例方法，用于封装Lambda表达式的方法体。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareByData</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareByAge</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序排序的规则</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareByAgeDesc</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 降序排序的规则</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把Lambda表达式的方法体，改用对象调用方法，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompareByData</span> compare <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompareByData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> compare<span class="token punctuation">.</span><span class="token function">compareByAgeDesc</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 降序</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，再将Lambda表达式的方法体，直接改成方法引用写法。<strong>实际上就是用类名调用方法，但是省略的参数</strong>。这就是实例方法引用，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompareByData</span> compare <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompareByData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> compare<span class="token operator">::</span><span class="token function">compareByAgeDesc</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 降序</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-特定类型的方法引用" tabindex="-1"><a class="header-anchor" href="#_3-特定类型的方法引用" aria-hidden="true">#</a> 3, 特定类型的方法引用</h3><p>特定类型的方法引用是没有什么道理的，只是语法的一种约定，遇到这种场景，就可以这样用。如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数作为方法的主调，后面的所有参数都是作为该实例方法的入参时，则就可以使用特定类型的方法引用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;boby&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;angela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Andy&quot;</span> <span class="token punctuation">,</span><span class="token string">&quot;dlei&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;caocao&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Babo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cici&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">// 要求忽略首字符大小写进行排序。</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 制定比较规则。o1 = &quot;Andy&quot;  o2 = &quot;angela&quot;</span>\n                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n		\n        <span class="token comment">//lambda表达式写法</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span> o1<span class="token punctuation">,</span>  o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//特定类型的方法引用！  格式：类型::方法名</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-构造器引用" tabindex="-1"><a class="header-anchor" href="#_4-构造器引用" aria-hidden="true">#</a> 4, 构造器引用</h3><p>构造器引用在实际开发中应用的并不多，目前还没有找到构造器的应用场景。所以大家在学习的时候，也只是关注语法就可以了。准备一个JavaBean类（Car类），如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> price<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Car{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, price=&quot;</span> <span class="token operator">+</span> price <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为方法引用是基于 Lamdba 表达式简化的，所以也要按照 Lamdba 表达式的使用前提来用，需要一个函数式接口，接口中代码的返回值类型是Car类型，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">CreateCar</span><span class="token punctuation">{</span>\n    <span class="token class-name">Car</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试类中创建 CreateCar 接口的实现类对象，先用匿名内部类创建、再用Lambda表达式创建，最后改用方法引用创建。同学们只关注格式就可以，不要去想为什么（语法就是这么设计的）。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、创建这个接口的匿名内部类对象。</span>\n        <span class="token class-name">CreateCar</span> cc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n		<span class="token comment">//2、使用匿名内部类改进</span>\n        <span class="token class-name">CreateCar</span> cc2 <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>  price<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//3、使用方法引用改进：构造器引用</span>\n        <span class="token class-name">CreateCar</span> cc3 <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">//注意：以上是创建CreateCar接口实现类对象的几种形式而已，语法一步一步简化。</span>\n        \n        <span class="token comment">//4、对象调用方法</span>\n        <span class="token class-name">Car</span> car <span class="token operator">=</span> cc3<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;奔驰&quot;</span><span class="token punctuation">,</span> <span class="token number">49.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-正则表达式" tabindex="-1"><a class="header-anchor" href="#三-正则表达式" aria-hidden="true">#</a> 三, 正则表达式</h2><hr><h3 id="_1-正则的使用" tabindex="-1"><a class="header-anchor" href="#_1-正则的使用" aria-hidden="true">#</a> 1, 正则的使用</h3><blockquote><p>正则表达式（Regular Expressions）是一种强大的工具，用于在文本中查找、匹配和操作符合特定模式的字符串。在Java中，可以使用<code>java.util.regex</code>包来支持正则表达式的使用。</p></blockquote><p>正则表达式其实是由一些特殊的符号组成的，它代表的是某种规则。作用有二：</p><ul><li>作用1：用来校验字符串数据是否合法</li><li>作用2：可以从一段文本中查找满足要求的内容</li></ul><p><strong>常见语法和用法上</strong></p><ol><li><strong>基本匹配</strong>： <ul><li><code>.</code>：匹配任意单个字符。</li><li><code>\\d</code>：匹配任意数字字符。</li><li><code>\\w</code>：匹配任意字母、数字或下划线字符。</li><li><code>\\s</code>：匹配任意空白字符（空格、制表符等）。</li></ul></li><li><strong>字符集合</strong>： <ul><li><code>[abc]</code>：匹配字符集中的任意一个字符。</li><li><code>[^abc]</code>：匹配除字符集中的字符以外的任意一个字符。</li><li><code>[a-z]</code>：匹配范围内的任意一个小写字母。</li><li><code>[A-Z]</code>：匹配范围内的任意一个大写字母。</li></ul></li><li><strong>量词</strong>： <ul><li><code>*</code>：匹配前面的元素零次或多次。</li><li><code>+</code>：匹配前面的元素一次或多次。</li><li><code>?</code>：匹配前面的元素零次或一次。</li><li><code>{n}</code>：匹配前面的元素恰好n次。</li><li><code>{n,}</code>：匹配前面的元素至少n次。</li><li><code>{n,m}</code>：匹配前面的元素至少n次但不超过m次。</li></ul></li><li><strong>边界匹配</strong>： <ul><li><code>^</code>：匹配字符串的开头。</li><li><code>$</code>：匹配字符串的结尾。</li><li><code>\\b</code>：匹配单词边界。</li></ul></li><li><strong>分组和引用</strong>： <ul><li><code>()</code>：将多个元素组合成一个单元。</li><li><code>|</code>：匹配多个模式中的一个。</li><li><code>\\1</code>、<code>\\2</code>、...：引用分组中匹配的内容。</li></ul></li><li><strong>预定义字符类</strong>： <ul><li><code>\\d</code>：数字字符。</li><li><code>\\D</code>：非数字字符。</li><li><code>\\w</code>：单词字符。</li><li><code>\\W</code>：非单词字符。</li><li><code>\\s</code>：空白字符。</li><li><code>\\S</code>：非空白字符。</li></ul></li></ol><p><em>以上只是正则表达式的一些基本语法和元字符，正则表达式的语法非常丰富，可以实现复杂的模式匹配。在使用正则表达式时，可以根据具体的需求构建合适的正则表达式模式，然后使用Java中的正则表达式相关类和方法进行匹配、查找、替换等操作</em></p><h3 id="_2-正则的操作" tabindex="-1"><a class="header-anchor" href="#_2-正则的操作" aria-hidden="true">#</a> 2, 正则的操作</h3><ul><li><code>Pattern</code>：表示正则表达式的编译模式。</li><li><code>Matcher</code>：用于对输入字符串进行匹配操作。</li><li><code>PatternSyntaxException</code>：表示正则表达式模式语法错误的异常类。</li></ul><h3 id="_3-正则的案例" tabindex="-1"><a class="header-anchor" href="#_3-正则的案例" aria-hidden="true">#</a> 3, 正则的案例</h3><h2 id="四-异常" tabindex="-1"><a class="header-anchor" href="#四-异常" aria-hidden="true">#</a> 四, 异常</h2><hr><h3 id="_1-java-中的异常" tabindex="-1"><a class="header-anchor" href="#_1-java-中的异常" aria-hidden="true">#</a> 1, Java 中的异常</h3><blockquote><p>在 Java 中，异常用于处理在程序执行过程中可能发生的错误或异常情况。当出现异常时，程序的正常流程会被打断，并根据异常处理机制执行相应的操作。</p></blockquote><p>Java 中的异常分为两类：可检查异常（Checked Exception）和不可检查异常（Unchecked Exception）。</p><ol><li><strong>可检查异常</strong>（Checked Exception）：这类异常是在编译时强制要求程序进行处理或声明的异常。它们是 Exception 类及其子类的实例，但不包括 RuntimeException 及其子类。常见的可检查异常包括 IOException、SQLException 等。必须显式地使用 try-catch 块或在方法签名中使用 throws 子句声明这些异常，否则编译器会报错。</li><li><strong>不可检查异常</strong>（Unchecked Exception）：这类异常是在运行时由 Java 虚拟机自动抛出的异常。它们是 RuntimeException 类及其子类的实例。不可检查异常通常表示编程错误或运行环境中不可控的异常情况。常见的不可检查异常包括 NullPointerException、ArrayIndexOutOfBoundsException 等。在编程中，可以选择捕获这些异常，但不强制要求处理或声明。</li></ol><p><strong>编译时异常和运行时异常</strong></p><blockquote><p>异常分为两类：编译时异常（Checked Exception）和运行时异常（Runtime Exception</p></blockquote><p><strong>编译时异常</strong>（Checked Exception）是在编译时期检查的异常，编译器会强制要求程序进行处理或在方法签名中声明这些异常。编译时异常通常表示程序可能遇到的外部条件或资源问题，需要在代码中显式处理这些异常或将它们传播给调用方。常见的编译时异常包括 IOException、SQLException 等。</p><p>例如，当使用文件读写操作时，会抛出 IOException 异常。因此，编译器要求使用者处理这种异常或在方法签名中使用 throws 子句声明该异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可能抛出 IOException 的代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行时异常</strong>（Runtime Exception）是在运行时期检查的异常，不需要在代码中显式处理或声明。运行时异常通常表示程序逻辑错误或运行环境中不可控的异常情况。常见的运行时异常包括 NullPointerException、ArrayIndexOutOfBoundsException 等。</p><p>例如，当使用一个空引用进行方法调用时，会抛出 NullPointerException 异常。由于这是程序逻辑错误，编译器不强制要求处理或声明这种异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 调用 process() 方法时，传递空引用</span>\n<span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出 NullPointerException</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时异常可以被捕获和处理，但这并不是强制要求，因为它们通常表示程序逻辑错误或其他无法预测的情况。通常，运行时异常应该由程序员在代码中进行预防和修复，以保证程序的正确性。</p><h3 id="_2-自定义异常" tabindex="-1"><a class="header-anchor" href="#_2-自定义异常" aria-hidden="true">#</a> 2, 自定义异常</h3><blockquote><p>在 Java 中，您可以通过创建自定义异常类来扩展现有的异常类或直接继承自 Exception 或其子类，以满足特定的应用程序需求。自定义异常允许您在程序中抛出和处理特定类型的异常。</p></blockquote><p>下面是创建自定义异常的步骤：</p><ul><li>创建一个继承自 Exception 或其子类的类。通常，选择继承 Exception 类，因为它表示一般性的异常情况。您可以根据需要选择合适的父类。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 自定义异常的代码...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在自定义异常类中编写构造函数，以便在创建异常对象时提供必要的信息。您可以根据需要添加其他方法和属性。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 其他方法和属性...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在程序中使用自定义异常。您可以在适当的地方抛出自定义异常，并在需要时使用 try-catch 块进行捕获和处理。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CustomException</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 某些代码...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">&quot;Custom exception message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 其他代码...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">anotherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 某些代码...</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">&quot;Custom exception message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 其他代码...</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 处理自定义异常</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过自定义异常，您可以在程序中引入特定的错误情况，并根据需要进行处理。这样可以提高代码的可读性和可维护性，并使异常处理更加精确和有针对性。确保在创建自定义异常时选择有意义的名称和描述，以便于理解和调试。</p><h3 id="_3-异常处理" tabindex="-1"><a class="header-anchor" href="#_3-异常处理" aria-hidden="true">#</a> 3, 异常处理</h3><p>处理异常的几种方式：</p><ul><li>try-catch 块：使用 try-catch 块来捕获并处理异常。在 try 块中编写可能会抛出异常的代码，然后在 catch 块中指定要处理的异常类型以及相应的处理逻辑。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可能抛出异常的代码</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType1</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理 ExceptionType1 类型的异常</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType2</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理 ExceptionType2 类型的异常</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可选的 finally 块，用于执行无论是否发生异常都需要执行的代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>throws 声明：在方法签名中使用 throws 子句声明方法可能抛出的异常。这将告知调用方需要处理或进一步抛出这些异常。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExceptionType1</span><span class="token punctuation">,</span> <span class="token class-name">ExceptionType2</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可能抛出异常的代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>try-with-resources 块：用于自动关闭实现了 <code>AutoCloseable</code> 接口的资源，如文件、数据库连接等。在 try-with-resources 块中声明和初始化资源，Java 会自动确保资源在使用完毕后被关闭。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResourceType</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用资源的代码</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理异常</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常处理的方式取决于具体的需求和代码结构。合理地处理异常可以提高程序的健壮性和可靠性。</p><p>请注意，异常处理应该是根据具体情况进行的，不要简单地使用 catch-all 的方式捕获所有异常，而是根据需要选择捕获特定类型的异常，并在适当的位置处理或传播异常。</p>', 102);
const _hoisted_103 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_103);
}
const JavaOOP2_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JavaOOP2.html.vue"]]);
export {
  JavaOOP2_html as default
};
