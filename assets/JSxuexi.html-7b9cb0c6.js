import{_ as n,o as a,c as s,a as e}from"./app-e70f158e.js";const i="/bowenBlog/assets/image-20230831091901893-f1b16ed7.png",t="/bowenBlog/assets/image-20230831155711089-82991b61.png",l="/bowenBlog/assets/image-20230831160720805-40fdab6a.png",p="/bowenBlog/assets/image-20230831162948474-5e3579f8.png",o="/bowenBlog/assets/image-20230901091827981-f6e3067f.png",c="/bowenBlog/assets/image-20230901160806324-fc159162.png",r="/bowenBlog/assets/image-20230901160830195-b0be495a.png",u="/bowenBlog/assets/image-20230901160905814-e2580102.png",d="/bowenBlog/assets/image-20230901160918855-93796e46.png",m="/bowenBlog/assets/image-20230901161350088-a48d4775.png",h="/bowenBlog/assets/image-20230901161707056-876596fc.png",k="/bowenBlog/assets/image-20230901161718026-b6ea6d68.png",v="/bowenBlog/assets/image-20230901102922575-8cd78cdf.png",b={},g=e('<hr><h1 id="一-计算机组件" tabindex="-1"><a class="header-anchor" href="#一-计算机组件" aria-hidden="true">#</a> 一，计算机组件</h1><hr><h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1，基本概念</h2><p><strong>计算机组成</strong></p><p><img src="'+i+'" alt="image-20230831091901893"></p><p><strong>操作系统</strong></p><p>mac windows linux</p><p><strong>应用软件</strong></p><p><strong>编程语言</strong></p><p>Java JavaScript Go php C C# Python C++</p><p><strong>编译器和解释器</strong></p><p>js----解释器</p><p>go---编译器</p><p>低级语言和高级语言：</p><ul><li>低级编程语言 -- 计算机可以直接识别的语言</li><li>汇编语言</li></ul><h1 id="二-javascript介绍" tabindex="-1"><a class="header-anchor" href="#二-javascript介绍" aria-hidden="true">#</a> 二，JavaScript介绍</h1><hr><h2 id="_1-js介绍" tabindex="-1"><a class="header-anchor" href="#_1-js介绍" aria-hidden="true">#</a> 1，JS介绍</h2><p>脚本语言</p><p><strong>JS作用：</strong></p><ul><li>web开发</li><li>服务端开发 nodeJS</li><li>桌面程序</li><li>App</li><li>控制硬件</li><li>游戏</li></ul><p>JS组成：</p><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><p>ECMAScript版本：</p><p>2015-es6</p><h2 id="_2-书写js的三种方式" tabindex="-1"><a class="header-anchor" href="#_2-书写js的三种方式" aria-hidden="true">#</a> 2，书写JS的三种方式</h2><ol><li>行内写法，目前不推荐</li><li>内部写法</li><li>外联写法</li></ol><p>总结<strong>行内写法</strong>的特点：</p><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>特殊情况下使用</li></ul><p>总结<strong>内部写法</strong>的特点：</p><ul><li>可以把多行JS代码写在script标签中</li><li>学习时，为了方便，直接把JS代码写在scirpt标签</li><li>推荐将JavaScript代码和编写位置放在body子元素的最后一行；</li></ul><p>最后一种写法，是外部写法，需要单独创建一个JS文件，通过script标签引入这个文件，如下：</p><p>总结<strong>外部写法</strong>的特点：</p><ul><li>需要通过script元素的src属性来引入JavaScript文件</li><li>在写项目时，通常都会使用外部写法，把JS代码放在一个单独的文件中，在页面中引入。</li><li>使用外部写法，script标签中就不能写其它代码了，写了也白了</li><li>script标签不能写成单标签</li><li>推荐将JavaScript代码和编写位置放在body子元素的最后一行</li></ul><h2 id="_3-js的输出与输入" tabindex="-1"><a class="header-anchor" href="#_3-js的输出与输入" aria-hidden="true">#</a> 3，JS的输出与输入</h2><p><img src="'+t+`" alt="image-20230831155711089"></p><h1 id="三-数据类型" tabindex="-1"><a class="header-anchor" href="#三-数据类型" aria-hidden="true">#</a> 三，数据类型</h1><hr><p>软件运行流程：</p><ol><li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li><li>CPU执行内存中的代码</li></ol><p>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</p><h2 id="_1-number-数字" tabindex="-1"><a class="header-anchor" href="#_1-number-数字" aria-hidden="true">#</a> 1，number 数字</h2><p>是Number，包含整数和小数，例如：年龄、存款、尺寸、手机号等。数据类型是支持 加/减/乘/除/取余/指数 等操作。直接上代码：</p><h2 id="_2-string-字符串" tabindex="-1"><a class="header-anchor" href="#_2-string-字符串" aria-hidden="true">#</a> 2，string 字符串</h2><p>字符串，其实就是我们生活中的文本信息。例如：姓名、地址、自我介绍等。 字符串有一个特点，他必须由引号引</p><p>可以使用单引号，也可以使用双引号</p><h2 id="_3-bool-布尔" tabindex="-1"><a class="header-anchor" href="#_3-bool-布尔" aria-hidden="true">#</a> 3，bool 布尔</h2><p>布尔类型就两个值：true和false。 布尔类型对应的值只有两个，一个是ture，一个是false，</p><p><strong>配置代码片段，可以快捷生成代码</strong></p><h2 id="_4-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_4-数据类型转换" aria-hidden="true">#</a> 4，数据类型转换</h2><p>把一种数据类型转化成另一个数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 转换为数字类型</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 转换为字符串</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type of</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四-变量" tabindex="-1"><a class="header-anchor" href="#四-变量" aria-hidden="true">#</a> 四，变量</h1><hr><h2 id="_1-什么是变量" tabindex="-1"><a class="header-anchor" href="#_1-什么是变量" aria-hidden="true">#</a> 1，什么是变量</h2><p>学习一门编程语言，编程语言主要是用于开发软件的，在一个软件中有很多数据都是动态变化的，如：</p><ol><li>比如购物车商品的数量、价格的计算等等；</li><li>比如一首歌曲播放的时间、进度条、歌词的展示等等；</li><li>比如微信聊天中消息条数、时间、语音的长度、头像、名称等等；</li><li>比如游戏中技能的冷却时间、血量、蓝量、buff时间、金币的数量等等；</li></ol><p>可以使用变量来表示一个可以变化的数据，变量，其实就是我们生活中起别名和外号，让变量名指向某个值。变量的声明和变量的赋值，如下：</p><h2 id="_2-变量的命名规范" tabindex="-1"><a class="header-anchor" href="#_2-变量的命名规范" aria-hidden="true">#</a> 2，变量的命名规范</h2><ol><li>字母 、下划线、$、数字不能在首位</li></ol><p><img src="`+l+`" alt="image-20230831160720805"></p><p>变量建议：</p><ol><li>多个单词使用驼峰命名</li><li>赋值= 两边加上一个空格</li><li>一条语句结束后加上分号；也可以不加</li><li>变量应该做到见名知意</li></ol><ul><li>https://developer.mozilla.org/zh-CN/docs/web/javascript/reference/lexical_grammar</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> father_Name <span class="token operator">=</span> <span class="token string">&#39;admin&#39;</span> <span class="token comment">// 小驼峰命名</span>

<span class="token keyword">let</span> fatherName <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span> 

<span class="token comment">// 大驼峰命名</span>
<span class="token keyword">let</span> FatherName <span class="token operator">=</span> <span class="token string">&#39;li si&#39;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-变量与内存指向关系" tabindex="-1"><a class="header-anchor" href="#_3-变量与内存指向关系" aria-hidden="true">#</a> 3，变量与内存指向关系</h2><p><img src="`+p+'" alt="image-20230831162948474"></p><p>在计算机的内存中创建一块区域保存字符串”malu&quot;，name变量名则指向这块区域。然后又再内存中创建了一块域保存字符串”wangcai&quot;，name变量名则指向”wangcai“所对应的空间，不再指向&quot;malu&quot;所对应的空间。&quot;malu&quot;所对应的内存空间，无人指向的数据会被标记为垃圾，由解释器自动化回收。</p><ul><li>无人指向的数据会被自动标记为垃圾，会被解释器标记为垃圾自动清除。</li></ul><p>在计算机的内存中创建一块区域保存字符串”malu&quot;，name变量名则指向这块区域。new_name变量名指向name变量，因为被指向的是变量名，所以自动会转指向到name变量代表的内存区域。</p><h1 id="五-深入数据类型" tabindex="-1"><a class="header-anchor" href="#五-深入数据类型" aria-hidden="true">#</a> 五，深入数据类型</h1><hr><h2 id="_1-数据类型介绍" tabindex="-1"><a class="header-anchor" href="#_1-数据类型介绍" aria-hidden="true">#</a> 1，数据类型介绍</h2><p>js中有八种数据类型：</p><ol><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li><li>object</li><li>bigInt</li><li>symbol</li></ol><p><strong>简单数据类型</strong>：</p><ol><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li></ol><h3 id="隐式转换与强制类型转换" tabindex="-1"><a class="header-anchor" href="#隐式转换与强制类型转换" aria-hidden="true">#</a> 隐式转换与强制类型转换</h3><p><img src="'+o+'" alt="image-20230901091827981"></p><p>infinity 代表数学中的 无穷大 -infinity 代表负的无穷大</p><p><strong>进制转换</strong></p><h2 id="_2-number数据类型" tabindex="-1"><a class="header-anchor" href="#_2-number数据类型" aria-hidden="true">#</a> 2，Number数据类型</h2><p>number可以表示整数，也可以表示小数，如下：<img src="'+c+'" alt="image-20230901160806324"></p><p>数字number可以有很多操作，比如，乘法 、除法 /、加法 +、减法 - 等，如下：</p><p><img src="'+r+`" alt="image-20230901160830195"></p><p><strong>转义字符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
\\n  表示换行

\\t  表示制表

\\r  表示换行回车

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>number也有不同进制的表示法：</p><p><img src="`+u+'" alt="image-20230901160905814"></p><p>数据的表示范围</p><p><img src="'+d+'" alt="image-20230901160918855"></p><p>isNaN，用于判断是否是一个NaN，是NaN结果是true，否则结果是false，如下：</p><p><img src="'+m+'" alt="image-20230901161350088"></p><h2 id="_3-string数据类型" tabindex="-1"><a class="header-anchor" href="#_3-string数据类型" aria-hidden="true">#</a> 3，String数据类型</h2><p>一个项目中，字符串类型用的是最多的，如 人的姓名：“wangcai”。地址：“北京市”。简介：“一名前端程序员”；</p><p><strong>JavaScript 中的字符串必须被括在引号里，有三种包含字符串的方式:</strong></p><ul><li>双引号 “malu”</li><li>单引号 ’malu‘</li><li>反引号 ``</li></ul><h2 id="_4-boolean-布尔类型" tabindex="-1"><a class="header-anchor" href="#_4-boolean-布尔类型" aria-hidden="true">#</a> 4，boolean 布尔类型</h2><p>Boolean类型就是表示真假，如是否毕业. 是否有身份证. 是否购买车票. 是否成年人；取值就两个：一个是true，一个是false。如下：</p><p>== 等于号，也是运算符</p><p>运算符两侧的操作类型不一样，会发生隐式转换</p><blockquote><p>关系运算符，得到的结果都是布尔类型</p></blockquote><h2 id="_5-undefined-类型" tabindex="-1"><a class="header-anchor" href="#_5-undefined-类型" aria-hidden="true">#</a> 5，undefined 类型</h2><p>undefined 类型只有一个值，就是特殊值 undefined:</p><ul><li>如果我们声明一个变量，但是没有对其进行初始化时，它默认就是undefined；</li></ul><h2 id="_6-object-数据类型" tabindex="-1"><a class="header-anchor" href="#_6-object-数据类型" aria-hidden="true">#</a> 6，Object 数据类型</h2><p>object数据类型是复杂类型，前面讲的都是基本数据类型，往往可以表示一组数据，是其他数据的一个集合。代码演示：</p><p><img src="'+h+'" alt="image-20230901161707056"></p><h2 id="_7-null-数据类型" tabindex="-1"><a class="header-anchor" href="#_7-null-数据类型" aria-hidden="true">#</a> 7，null 数据类型</h2><p>它的值只有一个，就是null，它通常表示一个对象为空。</p><p><img src="'+k+'" alt="image-20230901161718026"></p><h2 id="_8-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_8-数据类型转换" aria-hidden="true">#</a> 8，数据类型转换</h2><p>把一种数据类型转化成另一种数据类型，分两类：</p><ul><li>强制数据类型转化，需要写代码进行转化</li><li>隐式数据类型转化</li></ul><h2 id="_9-其它类型转string" tabindex="-1"><a class="header-anchor" href="#_9-其它类型转string" aria-hidden="true">#</a> 9，其它类型转String</h2><p>其它类型转string</p><ul><li>把number转成string</li><li>把boolean转成string</li><li>把und转成string</li></ul><p><img src="'+v+`" alt="image-20230901102922575"></p><p>toString 方法</p><p>方式二：</p><p>String() 构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：+把其它类型转成字符串，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// typeof 也是运算符</span>
<span class="token comment">// 只要是多个运算符，都要考虑运算符的优先级</span>
<span class="token comment">// typeof 的优先级是高于+</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span> <span class="token operator">+</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>强制类型转化：toString 或 String构造器</li><li>隐式类型转化：+</li></ul><p><strong>parseInt 会过滤掉小数</strong></p><p>parseInt会尽可能地去转化，从前往后面，只要能转就转，如果遇到了一个非数字，就停止转换。</p><h2 id="_10-其它类型转number" tabindex="-1"><a class="header-anchor" href="#_10-其它类型转number" aria-hidden="true">#</a> 10，其它类型转Number</h2><p>A）把字符串转化成number</p><p>把字符串转成number</p><ul><li>如果字符串中都是数值，就可以正常转化，如：&quot;123&quot; =&gt; 123</li><li>如果是一个空串，空串是&quot;&quot;，转化后， &quot;&quot; =&gt; 0</li><li>如果字符串中不只有数字，转化后是NaN 如：&quot;hello123&quot; =&gt; NaN</li></ul><p>利用Number构造器转化，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用+或-进行转化，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// + - 底层   还是去调用Number构造器</span>

<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token operator">+</span> str1 
console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span>num1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num1<span class="token punctuation">)</span>


<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token operator">-</span> str2
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num2<span class="token punctuation">)</span>


<span class="token comment">// &quot;&quot;叫空串</span>
<span class="token comment">// &quot;    &quot;不叫空串， 字符串中是空格</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-其它类型转boolean" tabindex="-1"><a class="header-anchor" href="#_11-其它类型转boolean" aria-hidden="true">#</a> 11，其它类型转boolean</h2><ol><li>把string类型转成boolean</li><li>把number类型转成boolean</li><li>把und类型转成boolean</li><li>把null类型转成boolean</li></ol><p>总结：哪些数据转成布尔类型会变成false</p><p>答：空串，0，-0，NaN，und，null 会转化成false，其它的都会转化成true 这个结论非常重要</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h1 id="六-条件语句" tabindex="-1"><a class="header-anchor" href="#六-条件语句" aria-hidden="true">#</a> 六，条件语句</h1><hr><p><strong>在日常生活中，也有三大流程，有：顺序流程，选择流程，循环流程。日常生活中是任何事件，都可以使用上面的三大流程解释。在计算机中，对应了三大结构，顺序结构，分支结构，循环结构。</strong></p><p>要实现所谓选择结构，有三种实现方案：</p><ul><li>if / if else / if elseif else</li><li>三元运算符</li><li>switch语句</li></ul><p>先看最简单的if语句，满足条件就执行某些代码，不满足就不执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 括号内的条件为true时，进入大括号里执行代码</span>
<span class="token comment">// 小括号内的结果若不是布尔类型时，会发生隐式转换转为布尔类型</span>
<span class="token comment">// 数字 0、空字符串 “”、null、undefined 和 NaN 都会被转换成 false</span>
<span class="token comment">// 其他值被转换为 true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    满足条件要执行的代码
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-基本条件语句" tabindex="-1"><a class="header-anchor" href="#_1-基本条件语句" aria-hidden="true">#</a> 1，基本条件语句</h2><h2 id="_2-多条件语句" tabindex="-1"><a class="header-anchor" href="#_2-多条件语句" aria-hidden="true">#</a> 2，多条件语句</h2><h2 id="_3-条件嵌套" tabindex="-1"><a class="header-anchor" href="#_3-条件嵌套" aria-hidden="true">#</a> 3，条件嵌套</h2><h1 id="七-while循环语句" tabindex="-1"><a class="header-anchor" href="#七-while循环语句" aria-hidden="true">#</a> 七，while循环语句</h1><hr><h2 id="_1-基本循环语句" tabindex="-1"><a class="header-anchor" href="#_1-基本循环语句" aria-hidden="true">#</a> 1，基本循环语句</h2><p>选择结构：</p><ul><li>if if/else if elseif else</li><li>三元运算符</li><li>switch语句</li></ul><h2 id="_2-案例练习" tabindex="-1"><a class="header-anchor" href="#_2-案例练习" aria-hidden="true">#</a> 2，案例练习</h2><p>练习作业：</p><ul><li>请实现一个用户登录系统，如果密码错误则反复提示让用户重新输入，直到输入正确才停止。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">/* 请实现一个用户登录系统，如果密码错误则反复提示让用户重新输入，直到输入正确才停止。 */</span>
    <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入用户名:&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> pwd <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入密码:&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 隐式转换</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token string">&#39;admin&#39;</span> <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">==</span> <span class="token number">123456</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 条件判断</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功！&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;密码错误，请重新输入！&#39;</span><span class="token punctuation">)</span>
        <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 递归</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用函数</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>猜数字，设定一个理想数字比如：66，一直提示让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了; 只有输入等于66，显示猜测结果正确，然后退出循环。</li></ul><h2 id="_3-条件嵌套-1" tabindex="-1"><a class="header-anchor" href="#_3-条件嵌套-1" aria-hidden="true">#</a> 3，条件嵌套</h2>`,165),f=[g];function _(x,w){return a(),s("div",null,f)}const y=n(b,[["render",_],["__file","JSxuexi.html.vue"]]);export{y as default};
