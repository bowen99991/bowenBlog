import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-b4839004.js";
const _imports_0 = "/bowenBlog/assets/image-20231224210231648-97593a19.png";
const _imports_1 = "/bowenBlog/assets/image-20231224214104078-f7044534.png";
const _imports_2 = "/bowenBlog/assets/image-20231225163732323-fbfc25d1.png";
const _imports_3 = "/bowenBlog/assets/image-20231226141842676-a298e7e2.png";
const _imports_4 = "/bowenBlog/assets/image-20231226142211349-9aa3c21d.png";
const _imports_5 = "/bowenBlog/assets/image-20231226143947330-989d2ae1.png";
const _imports_6 = "/bowenBlog/assets/image-20231226144345172-f9a39fe8.png";
const _imports_7 = "/bowenBlog/assets/image-20231226144358144-c6bbc633.png";
const _imports_8 = "/bowenBlog/assets/image-20231226144500587-8ed876f3.png";
const _imports_9 = "/bowenBlog/assets/image-20231226144706673-339ea0eb.png";
const _imports_10 = "/bowenBlog/assets/image-20231226145636360-1de83915.png";
const _imports_11 = "/bowenBlog/assets/image-20231226145716210-cde9546c.png";
const _imports_12 = "/bowenBlog/assets/image-20231226150034686-5433261f.png";
const _imports_13 = "/bowenBlog/assets/image-20231226153406019-32f707cf.png";
const _imports_14 = "/bowenBlog/assets/image-20231226153446434-c227ff9a.png";
const _imports_15 = "/bowenBlog/assets/image-20231226153505432-37b96cda.png";
const _imports_16 = "/bowenBlog/assets/image-20231226153603722-7526d169.png";
const _imports_17 = "/bowenBlog/assets/image-20231226153613166-2abc1306.png";
const _imports_18 = "/bowenBlog/assets/image-20231226102735578-f676efab.png";
const _imports_19 = "/bowenBlog/assets/image-20231226104348381-124b8a3e.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="file-和字符集" tabindex="-1"><a class="header-anchor" href="#file-和字符集" aria-hidden="true">#</a> File 和字符集</h2><h2 id="一-file-类" tabindex="-1"><a class="header-anchor" href="#一-file-类" aria-hidden="true">#</a> 一, File 类</h2><hr><h3 id="_1-file-类介绍与创建" tabindex="-1"><a class="header-anchor" href="#_1-file-类介绍与创建" aria-hidden="true">#</a> 1, File 类介绍与创建</h3><p>存储数据，可以把数据存储到变量，数组，对象，集合中，但是这些数据都是存储在内存中的，只要程序执行结束，或者断电了，数据就消失了。不能永久存储。有些数据要长久保存，可以将数据以文件的形式存在硬盘里，即使程序结束了，断电了只要硬盘没坏，数据就永久存在。</p><blockquote><p>File类，它的就用来表示当前系统下的文件（也可以是文件夹），通过File类提供的方法可以获取文件大小、判断文件是否存在、创建文件、创建文件夹等。需要我们注意：File对象只能对文件进行操作，不能操作文件中的内容。</p></blockquote><p>第一步是创建File类的对象。 想要创建对象，我们得看File类有哪些构造方法</p><p><img src="' + _imports_0 + '" alt="image-20231224210231648"></p><p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、创建一个File对象，指代某个具体的文件。</span>\n        <span class="token comment">// 路径分隔符</span>\n        <span class="token comment">// File f1 = new File(&quot;D:/resource/ab.txt&quot;);</span>\n        <span class="token comment">// 路径中&quot;\\&quot;要写成&quot;\\\\&quot;， 路径中&quot;/&quot;可以直接用</span>\n        <span class="token comment">// File f1 = new File(&quot;D:\\\\resource\\\\ab.txt&quot;); </span>\n        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:&quot;</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span><span class="token string">&quot;resource&quot;</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;ab.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件大小</span>\n\n        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/resource&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 注意：File对象可以指代一个不存在的文件路径</span>\n        <span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/resource/aaaa.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n        <span class="token comment">// 我现在要定位的文件是在模块中，应该怎么定位呢？</span>\n        <span class="token comment">// 绝对路径：带盘符的</span>\n        <span class="token comment">// File f4 = new File(&quot;D:\\\\code\\\\javasepromax\\\\file-io-app\\\\src\\\\abc.txt&quot;);</span>\n        <span class="token comment">// 相对路径（重点）：不带盘符，默认是直接去工程下寻找文件的。</span>\n        <span class="token class-name">File</span> f4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;file-io-app\\\\src\\\\abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-file-类的操作" tabindex="-1"><a class="header-anchor" href="#_2-file-类的操作" aria-hidden="true">#</a> 2, File 类的操作</h3><blockquote><p>文件操作是在计算机中进行读取、写入和管理文件的过程。在Java中，可以使用标准的Java I/O类库来进行文件操作。</p></blockquote><p><strong>创建文件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">boolean</span> created <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件已存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>写入文件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件写入成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件写入失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取文件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> character<span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>character <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> character<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件读取失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除文件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件删除失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>进行文件操作时，需要处理可能的异常情况，并且要<strong>确保文件路径和权限的正确性</strong></p><p>还可以使用更高级的文件操作类，如<code>BufferedReader</code>、<code>BufferedWriter</code>等，以提高读写效率和性能。</p></blockquote><h3 id="_3-file-类的其他api" tabindex="-1"><a class="header-anchor" href="#_3-file-类的其他api" aria-hidden="true">#</a> 3, FIle 类的其他API</h3><p><strong>检查文件属性</strong></p><ul><li><code>exists()</code>：检查文件是否存在。</li><li><code>isFile()</code>：检查是否为文件。</li><li><code>isDirectory()</code>：检查是否为目录。</li><li><code>canRead()</code>：检查文件是否可读。</li><li><code>canWrite()</code>：检查文件是否可写。</li><li><code>canExecute()</code>：检查文件是否可执行。</li></ul><p><strong>文件路径和名称操作</strong></p><ul><li><code>getPath()</code>：获取文件的路径和名称。</li><li><code>getName()</code>：获取文件的名称。</li><li><code>getParent()</code>：获取文件的父目录路径。</li></ul><p><strong>目录操作</strong></p><ul><li><code>mkdir()</code>：创建单层目录。</li><li><code>mkdirs()</code>：创建多层目录。</li><li><code>delete()</code>：删除文件或目录。</li></ul><p><strong>文件重命名和移动</strong></p><ul><li><code>renameTo(File dest)</code>：重命名文件或移动文件到指定位置。</li></ul><p><strong>文件列表操作</strong></p><ul><li><code>list()</code>：获取目录下的文件和子目录名称数组。</li><li><code>listFiles()</code>：获取目录下的文件和子目录<code>File</code>对象数组。</li></ul><h3 id="_4-遍历文件夹" tabindex="-1"><a class="header-anchor" href="#_4-遍历文件夹" aria-hidden="true">#</a> 4, 遍历文件夹</h3><p>代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileTraversalExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> folderPath <span class="token operator">=</span> <span class="token string">&quot;path/to/folder&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建folder对象</span>\n        <span class="token class-name">File</span> folder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>folderPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 遍历文件夹</span>\n        <span class="token function">traverseFolder</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">traverseFolder</span><span class="token punctuation">(</span><span class="token class-name">File</span> folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>folder<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 检查给定的文件夹是否是一个目录</span>\n            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> folder<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取文件夹中的所有文件和子文件夹</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件名：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印文件名</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;路径：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印文件路径</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果是子文件夹</span>\n                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类型：目录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">traverseFolder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归遍历子文件夹</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果是文件</span>\n                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;类型：文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;大小：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印文件大小</span>\n                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最后修改时间：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印最后修改时间</span>\n                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;给定的路径不是一个目录！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-递归" tabindex="-1"><a class="header-anchor" href="#二-递归" aria-hidden="true">#</a> 二, 递归</h2><hr><h3 id="_1-什么是递归" tabindex="-1"><a class="header-anchor" href="#_1-什么是递归" aria-hidden="true">#</a> 1, 什么是递归</h3><p>为了获取文件夹中子文件夹的内容，我们就需要学习递归这个知识点。递归是一种算法，从形式上来说，方法调用自己的形式称之为递归。有直接递归、间接递归，如下面的代码。代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionTest1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 直接方法递归</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----test1---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接方法递归</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 间接方法递归</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---test2---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 间接递归</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接执行上面的代码，会进入死循环，最终导致栈内存溢出</p><h3 id="_2-递归算法的执行流程" tabindex="-1"><a class="header-anchor" href="#_2-递归算法的执行流程" aria-hidden="true">#</a> 2, 递归算法的执行流程</h3><p>案例需求：计算n的阶乘，比如5的阶乘 = 1 * 2 * 3 * 4 * 5 ； 6 的阶乘 = 1 * 2 * 3 * 4 * 5 * 6</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>假设f(n)表示n的阶乘，那么我们可以推导出下面的式子\n	f(5) = 1+2+3+4+5\n    f(5) = f(4)+5\n    f(4) = f(3)+4\n    f(3) = f(2)+3\n    f(2) = f(1)+2\n    f(1) = 1\n总结规律：\n	除了f(1) = 1; 出口\n	其他的f(n) = f(n-1)+n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>f(n) 作为一个方法, 写法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5的阶乘是：&quot;</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//求n个数的阶乘</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// n = 1 时, return终结点</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n          	<span class="token comment">// 递归执行</span>\n            <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码的执行流程，我们用内存图的形式来分析一下，该案例中递归调用的特点是：一层一层调用，再一层一层往回返。</p><p><img src="' + _imports_1 + '" alt="image-20231224214104078"></p><h3 id="_3-递归搜索文件" tabindex="-1"><a class="header-anchor" href="#_3-递归搜索文件" aria-hidden="true">#</a> 3, 递归搜索文件</h3><h2 id="三-字符集" tabindex="-1"><a class="header-anchor" href="#三-字符集" aria-hidden="true">#</a> 三, 字符集</h2><hr><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1, 介绍</h3><blockquote><p><strong>GBK</strong>（Guo Biao Kou）是中华人民共和国国家标准 GB2312 的扩展字符集，它是汉字编码的一种形式，也是最常用的中文字符集之一。</p><p>GBK 字符集包含了 GB2312 字符集的全部字符，并在此基础上加入了大量的繁体汉字、生僻汉字和一些其他语种的字符。它采用双字节编码，每个字符占用两个字节，其中高字节的范围是 0x81 到 0xFE，低字节的范围是 0x40 到 0xFE，排列组合形成了一共 21,692 个汉字以及其他符号和字符。</p></blockquote><p><strong>Unicode 字符集</strong></p><blockquote><p>在Java中，字符集（Character Set）指的是用于表示字符的编码集合。Java使用Unicode字符集作为其内部字符表示方式，具体来说是使用UTF-16编码（16位无符号整数）来表示字符。</p></blockquote><p><strong>常见的字符集编码</strong>包括：</p><ol><li>UTF-8：可变长度的Unicode编码，兼容ASCII，广泛用于跨平台的文本数据交换和存储。</li><li>UTF-16：使用16位表示字符，支持整个Unicode字符集。</li><li>ISO-8859-1：也称为Latin-1，包含了大部分西欧语言的字符。</li><li>GBK：中文字符集，是GB2312的扩展，支持繁体汉字和其他语种的字符。</li></ol><p>目前我们使用最多的字符集编码是 <strong>UTF-8</strong></p><h3 id="_2-编码和解码" tabindex="-1"><a class="header-anchor" href="#_2-编码和解码" aria-hidden="true">#</a> 2, 编码和解码</h3><blockquote><p>字符编码是将字符转换为字节表示的过程，而字符解码是将字节表示转换回字符的过程。编码和解码是在字符和字节之间进行转换的过程。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">CharBuffer</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">CharsetDecoder</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">CharsetEncoder</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterEncodingExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> inputString <span class="token operator">=</span> <span class="token string">&quot;Hello, 你好！&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">Charset</span> charset <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 编码为字节数组</span>\n        <span class="token class-name">ByteBuffer</span> encodedBytes <span class="token operator">=</span> charset<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> encodedBytes<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码后的字节数组：&quot;</span> <span class="token operator">+</span> <span class="token function">byteArrayToHexString</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 解码为字符串</span>\n        <span class="token class-name">CharsetDecoder</span> decoder <span class="token operator">=</span> charset<span class="token punctuation">.</span><span class="token function">newDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">CharBuffer</span> decodedChars <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> decodedString <span class="token operator">=</span> decodedChars<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解码后的字符串：&quot;</span> <span class="token operator">+</span> decodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 将字节数组转换为十六进制字符串</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">byteArrayToHexString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> byteArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%02X &quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串转换字节" tabindex="-1"><a class="header-anchor" href="#字符串转换字节" aria-hidden="true">#</a> 字符串转换字节</h3><h2 id="四-io-流" tabindex="-1"><a class="header-anchor" href="#四-io-流" aria-hidden="true">#</a> 四, IO 流</h2><hr><blockquote><p>I/O流在Java中通常可以分为两类：字节流（Byte Stream）和字符流（Character Stream）。</p><p>Java中I/O操作主要是指使用 <strong>java.io</strong> 包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。</p></blockquote><p><img src="' + _imports_2 + '" alt="image-20231225163732323"></p><h3 id="顶级父类" tabindex="-1"><a class="header-anchor" href="#顶级父类" aria-hidden="true">#</a> 顶级父类</h3><table><thead><tr><th></th><th>输入流</th><th>输出流</th></tr></thead><tbody><tr><td>字节流</td><td>字节输入流 InputStream</td><td>字节输出流 OutputStream</td></tr><tr><td>字符流</td><td>字符输入流Reader</td><td>字符输出流 Writer</td></tr></tbody></table><p><strong>字节流</strong>（Byte Stream）以<strong>字节</strong>为单位进行读写操作，适用于处理二进制数据（如图像、音频、视频等）或文本数据中的字节数据。以下是一些常见的字节流类：</p><ol><li>InputStream：字节输入流的抽象基类，用于读取字节数据。</li><li>OutputStream：字节输出流的抽象基类，用于写入字节数据。</li><li>FileInputStream：从文件中读取字节的输入流。</li><li>FileOutputStream：向文件中写入字节的输出流。</li><li>BufferedInputStream：提供缓冲功能的字节输入流。</li><li>BufferedOutputStream：提供缓冲功能的字节输出流。</li></ol><p><strong>字符流</strong>（Character Stream）以<strong>字符</strong>为单位进行读写操作，适用于处理文本数据。字符流在内部使用编码（如UTF-8）将字符转换为字节进行处理。以下是一些常见的字符流类：</p><ol><li>Reader：字符输入流的抽象基类，用于读取字符数据。</li><li>Writer：字符输出流的抽象基类，用于写入字符数据。</li><li>FileReader：从文件中读取字符的输入流。</li><li>FileWriter：向文件中写入字符的输出流。</li><li>BufferedReader：提供缓冲功能的字符输入流。</li><li>BufferedWriter：提供缓冲功能的字符输出流。</li></ol><h3 id="io-的分类-输入流和输出流" tabindex="-1"><a class="header-anchor" href="#io-的分类-输入流和输出流" aria-hidden="true">#</a> <strong>IO 的分类 输入流和输出流</strong></h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li>输入流 ：把数据从 其他设备 上读取到 内存 中的流。</li><li>输出流 ：把数据从 内存 中写出到 其他设备 上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li>字节流 ：以字节为单位，读写数据的流。</li><li>字符流 ：以字符为单位，读写数据的流。</li></ul><blockquote><p><strong>总结:</strong></p><p>输入流就是读数据, 输出流就是写数据</p><p><em>字符流相对于字节流的优势在于能够更方便地处理文本数据，提供了字符级别的读写操作，而不需要手动处理字符编码相关的细节。</em></p></blockquote><h3 id="_1-输入流" tabindex="-1"><a class="header-anchor" href="#_1-输入流" aria-hidden="true">#</a> 1, 输入流</h3><blockquote><p><strong>输入流</strong>（Input Stream）是用于从数据源（如文件、网络连接等(硬盘中的数据或网络中的数据) ）读取数据的抽象概念。在Java中，<code>java.io.InputStream</code> 是用于表示输入流的类。</p><p>输入流提供了一系列方法来读取不同类型的数据，如字节、字符、对象等。它是以字节为基础的，可以从输入流中逐个字节地读取数据。</p></blockquote><p><strong>常见的输入流:</strong></p><ul><li>FileInputStream：用于从文件中读取字节数据的输入流。</li><li>ByteArrayInputStream：用于从内存中的字节数组读取数据的输入流。</li><li>BufferedInputStream：用于提供缓冲功能的输入流，可以提高读取性能。</li><li>DataInputStream：用于从输入流中读取基本数据类型和字符串的输入流。</li><li>ObjectInputStream：用于从输入流中读取对象的输入流。</li></ul><h3 id="_2-输出流" tabindex="-1"><a class="header-anchor" href="#_2-输出流" aria-hidden="true">#</a> 2, 输出流</h3><blockquote><p>输出流（Output Stream）是用于向目标数据源（如文件、网络连接等）写入数据的抽象概念。在Java中，<code>java.io.OutputStream</code> 是用于表示输出流的类。</p><p>输出流提供了一系列方法来写入不同类型的数据，如字节、字符、对象等。它是以字节为基础的，可以将数据以字节形式写入输出流中。</p></blockquote><p>常见的输出流:</p><ul><li>FileOutputStream：用于向文件中写入字节数据的输出流。</li><li>ByteArrayOutputStream：用于向内存中的字节数组写入数据的输出流。</li><li>BufferedOutputStream：用于提供缓冲功能的输出流，可以提高写入性能。</li><li>DataOutputStream：用于向输出流中写入基本数据类型和字符串的输出流。</li><li>ObjectOutputStream：用于向输出流中写入对象的输出流。</li></ul><h3 id="fileinputstream" tabindex="-1"><a class="header-anchor" href="#fileinputstream" aria-hidden="true">#</a> <strong>FileInputStream</strong></h3><blockquote><p>是用于从文件中读取字节数据的输入流</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一个汉字转换为3个字节</span>\n<span class="token comment">// int 类型是4个字节, 但是只会保留一个字节的信息写出</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;path/to/file.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 文件路径</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> data<span class="token punctuation">;</span>\n          <span class="token comment">// 读取没有字节, 则会返回 -1 </span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 将字节数据转换为字符并输出</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> \n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理可能的异常</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n  \n<span class="token comment">// 流使用完毕, 需要关闭, 释放系统资源</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>文件路径 &quot;path/to/file.txt&quot; 应替换为实际的文件路径。</p></blockquote><p><strong>操作示例</strong></p><ol><li><p>创建</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读取单个字节数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> data <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取一个字节数据</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读取字节数组数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个字节数组作为缓冲区</span>\n<span class="token keyword">int</span> bytesRead <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取字节数据，并返回实际读取的字节数</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭输入流：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="fileoutstream" tabindex="-1"><a class="header-anchor" href="#fileoutstream" aria-hidden="true">#</a> FileOutStream</h3><blockquote><p><code>FileOutputStream</code> 是 Java 中用于将字节数据写入文件的类。它是 <code>OutputStream</code> 类的子类，提供了一系列用于写入字节数据的方法。</p></blockquote><p>代码示例, 将字节数据写入文件并关闭流</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;path/to/file.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 文件路径</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 要写入的数据</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串转换为字节数组</span>\n            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字节数组写入文件</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理可能的异常</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节流复制文件" tabindex="-1"><a class="header-anchor" href="#字节流复制文件" aria-hidden="true">#</a> 字节流复制文件</h3><p>代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCopyExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> sourceFilePath <span class="token operator">=</span> <span class="token string">&quot;path/to/source/file.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 源文件路径</span>\n        <span class="token class-name">String</span> destinationFilePath <span class="token operator">=</span> <span class="token string">&quot;path/to/destination/file.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 目标文件路径</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destinationFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>\n\n            <span class="token comment">// 从源文件读取数据，并写入目标文件</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制完成。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理可能的异常</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-io-流资源释放" tabindex="-1"><a class="header-anchor" href="#五-io-流资源释放" aria-hidden="true">#</a> 五, IO 流资源释放</h2><hr><h3 id="jdk-7之前和-jdk-7-之后" tabindex="-1"><a class="header-anchor" href="#jdk-7之前和-jdk-7-之后" aria-hidden="true">#</a> JDK 7之前和 JDK 7 之后</h3><blockquote><p>在 JDK 7 之前，资源释放需要显式地在 <code>finally</code> 块中进行处理。这样做是为了确保资源在使用后被正确关闭和释放，即使在发生异常的情况下也能够执行相应的清理操作。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceReleaseExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/source/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/destination/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 执行读取和写入操作</span>\n\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 在 finally 块中关闭资源</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>outputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 JDK 7 及更高版本中，引入了自动资源管理（Automatic Resource Management）的特性，通过使用 <code>try-with-resources</code> 语句可以更方便地释放资源。在 <code>try-with-resources</code> 语句块中创建的资源会在代码块结束后自动关闭，无需手动编写 <code>finally</code> 块来释放资源。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceReleaseExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/source/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/destination/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">// 执行读取和写入操作</span>\n\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 <code>try</code> 关键字后的括号中，可以声明一个或多个资源对象，这些资源对象必须实现 <code>AutoCloseable</code> 接口。在代码块结束后，所有声明的资源都会自动关闭，无论是否发生异常。</p><p>使用 <code>try-with-resources</code> 语句可以简化资源释放的代码，并提高代码的可读性和可维护性。同时，它还能够处理多个资源的释放，减少了手动编写 <code>finally</code> 块的复杂性。</p></blockquote><h3 id="try-with-resources-语句" tabindex="-1"><a class="header-anchor" href="#try-with-resources-语句" aria-hidden="true">#</a> try-with-resources 语句</h3><blockquote><p>当使用 <code>try-with-resources</code> 语句时，您可以在括号内声明一个或多个资源对象。这些资源对象必须实现 <code>AutoCloseable</code> 接口，该接口定义了 <code>close()</code> 方法用于关闭资源。在 <code>try-with-resources</code> 语句块结束时，会自动关闭这些资源对象，无需显式调用 <code>close()</code> 方法。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryWithResourcesExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;path/to/file.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 文件路径</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> line<span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// String filePath = &quot;path/to/file.txt&quot;;：指定要读取的文件路径。</span>\n<span class="token comment">// try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {：在括号内声明并初始化 BufferedReader 对象和 FileReader 对象。这里使用嵌套的构造函数来创建对象，并将它们作为资源对象声明在 try 语句中。</span>\n<span class="token comment">// String line;：用于存储读取的每一行文本。</span>\n<span class="token comment">// while ((line = reader.readLine()) != null) {：循环读取文件的每一行，直到读取到文件末尾。</span>\n<span class="token comment">// reader.readLine()：读取文件的一行文本。</span>\n<span class="token comment">// System.out.println(line);：输出读取的文本行。</span>\n<span class="token comment">// } catch (IOException e) {：捕获可能的 IOException 异常。</span>\n<span class="token comment">// e.printStackTrace();：打印异常堆栈跟踪信息，以便进行调试或错误处理。</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-字符流" tabindex="-1"><a class="header-anchor" href="#六-字符流" aria-hidden="true">#</a> 六, 字符流</h2><hr><h3 id="_1-filereader-类" tabindex="-1"><a class="header-anchor" href="#_1-filereader-类" aria-hidden="true">#</a> 1, FileReader 类</h3><blockquote><p>字符流中的FileReader类，是字符输入流，用来将文件中的字符数据读取到程序中来。</p></blockquote><p><img src="' + _imports_3 + '" alt="image-20231226141842676"></p><p>FileReader读取文件的步骤如下：</p><ul><li>第一步：创建FileReader对象与要读取的源文件接通</li><li>第二步：调用read()方法读取文件中的字符</li><li>第三步：调用close()方法关闭流</li></ul><p><img src="' + _imports_4 + '" alt="image-20231226142211349"></p><p>构造器：</p><ul><li>public FileReader(File filee) 创建字符输入流管道与源文件接通</li><li>public FileReader(String pathname) 创建字符输入流管道与源文件接通</li></ul><p>两个 <strong>read</strong> 方法：</p><ul><li>public int read() 每次读取一个字符返回，如果发现没有字符可读，返回-1</li><li>public int read(char[] buffer) 每次用一个字符数组去读取数据，返回字符数组读取了多少个字符，如果发现没有数据可读，返回-1</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>code<span class="token punctuation">.</span>demo05</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;Java_demo00\\\\src\\\\04.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">// 文件内容: hello java</span>\n            <span class="token comment">// System.out.println(fr.read());  // 104 ....  对应h的ASCII码</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            \n            <span class="token comment">// // 读取完毕开始, 返回 -1</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n\n            <span class="token comment">// 当文件中没有更多字符可读时，fr.read() 方法会返回 -1</span>\n            <span class="token comment">// System.out.println(fr.read());</span>\n\n            <span class="token comment">// 可以一次读取多个字符,性能高一点</span>\n            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> len<span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 将字符数组（buffer）中指定范围的字符转换为字符串</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-filewriter-类" tabindex="-1"><a class="header-anchor" href="#_2-filewriter-类" aria-hidden="true">#</a> 2, FileWriter 类</h3><p>FileWriter 类可以将程序中的字符数据写入文件。</p><p><img src="' + _imports_5 + '" alt="image-20231226143947330"></p><p><strong>FileWriter 往文件中写字符数据的步骤如下：</strong></p><ul><li>第一步：创建 FileWirter 对象与要读取的目标文件接通</li><li>第二步：调用 write (字符数据/字符数组/字符串)方法读取文件中的字符</li><li>第三步：调用 close()方法关闭流</li></ul><p><strong>构造器：</strong></p><ul><li>public FileWriter(File file) 创建字符输出流管道与源文件对象接通</li><li>public FileWriter(String filepath) 创建字符输出流管道与源文件对象接通</li><li>public FileWriter(File file, boolean append) 创建字符输出流管道与源文件对象接通, 可追加数据</li><li>public FileWriter(String filepath, boolean append) 创建字符输出流管道与源文件对象接通, 可追加数据</li></ul><p><strong>常见write方法：</strong></p><ul><li>void write(int c) 写一个字符</li><li>void write(String str) 写一个字符串</li><li>void write(String str，int off, int len) 写一个字符串的一部分</li><li>void write(char[] cbuf) 写入一个字符数组</li><li>void write(char[] cbuf， int off, int len) 写入一个字符数组的一部分</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 字符流：</span>\n        <span class="token keyword">try</span><span class="token punctuation">(</span>\n          <span class="token comment">// 字符输出流管道，与源文件关联</span>\n           <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;module01/src/01.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n            <span class="token comment">// 写一个字符出去</span>\n            <span class="token comment">//fw.write(&#39;a&#39;);</span>\n            <span class="token comment">//fw.write(97);</span>\n            <span class="token comment">//fw.write(&#39;码&#39;);</span>\n            <span class="token comment">//fw.write(&quot;\\r\\n&quot;);</span>\n            <span class="token comment">//fw.write(&#39;路&#39;);</span>\n\n            <span class="token comment">//fw.write(&quot;我爱Java~&quot;);</span>\n\n            <span class="token comment">// 写字符串的一部分出去</span>\n            <span class="token comment">//fw.write(&quot;我爱Java~&quot;,0,1);</span>\n\n            <span class="token comment">// 写一个字符数组出去</span>\n            <span class="token comment">//char[] buffer = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;码&#39;,&#39;路&#39;};</span>\n            <span class="token comment">//fw.write(buffer);</span>\n            <span class="token comment">//fw.write(&quot;\\r\\n&quot;);</span>\n\n            <span class="token comment">// 写字符数组的一部分出去</span>\n            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;码&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;路&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-filewriter-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-filewriter-注意事项" aria-hidden="true">#</a> 3, FileWriter 注意事项</h3><blockquote><p><strong>FileWriter写完数据之后，必须刷新或者关闭，写出去的数据才能生效。</strong></p><p>比如：下面的代码只调用了写数据的方法，没有关流的方法。当你打开目标文件时，是看不到任何数据的。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 字符输出流管道，与源文件关联</span>\n        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;module01/src/01.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 写一个字符出去</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;张&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上flush()方法之后，数据就会立即到目标文件中去。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 字符输出流管道，与源文件关联</span>\n        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;module01/src/01.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 写一个字符出去</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;张&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用FilWriter写数据之后，必须刷新，写出去的数据才能生效</span>\n        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用close()方法，数据也会立即到文件中去。因为close()方法在关闭流之前，会将内存中缓存的数据先刷新到文件，再关流。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 字符输出流管道，与源文件关联</span>\n        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;module01/src/01.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 写一个字符出去</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;张&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用FilWriter写数据之后，必须刷新，写出去的数据才能生效</span>\n        <span class="token comment">//fw.flush();</span>\n\n        <span class="token comment">// close是关闭流，在关闭流之前，会将内存中缓存的数据先刷新到文件中，再关闭</span>\n        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果流关闭了，就不能再操作了，如下：</p><p><img src="' + _imports_6 + '" alt="image-20231226144345172"></p><h2 id="七-缓冲流" tabindex="-1"><a class="header-anchor" href="#七-缓冲流" aria-hidden="true">#</a> 七, 缓冲流</h2><hr><p><strong>介绍</strong>:</p><p><em>缓冲流是在字节流或字符流的基础上添加了缓冲功能的流。它们提供了缓冲区来临时存储数据，以提高读取和写入的效率。</em></p><p><img src="' + _imports_7 + '" alt="image-20231226144358144"></p><p><strong>缓冲流的作用</strong>：可以对原始流进行包装，提高原始流读写数据的性能。</p><p><strong>两个常用的缓冲流类</strong></p><p><code>BufferedReader</code> 和 <code>BufferedWriter</code>：</p><ul><li><code>BufferedReader</code> 是字符流的缓冲输入流，它包装了一个字符输入流（如 <code>FileReader</code> 或 <code>InputStreamReader</code>），提供了更高效的字符读取功能。它可以一次读取一行或一部分字符，并将其存储在内部的缓冲区中，减少了对底层流的实际读取次数。</li><li><code>BufferedWriter</code> 是字符流的缓冲输出流，它包装了一个字符输出流（如 <code>FileWriter</code> 或 <code>OutputStreamWriter</code>），提供了更高效的字符写入功能。它可以一次写入一行或一部分字符，并将其存储在内部的缓冲区中，减少了对底层流的实际写入次数。</li></ul><p><code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code>：</p><ul><li><code>BufferedInputStream</code> 是字节流的缓冲输入流，它包装了一个字节输入流（如 <code>FileInputStream</code> 或 <code>InputStream</code>），提供了更高效的字节读取功能。它可以一次读取一部分字节，并将其存储在内部的缓冲区中，减少了对底层流的实际读取次数。</li><li><code>BufferedOutputStream</code> 是字节流的缓冲输出流，它包装了一个字节输出流（如 <code>FileOutputStream</code> 或 <code>OutputStream</code>），提供了更高效的字节写入功能。它可以一次写入一部分字节，并将其存储在内部的缓冲区中，减少了对底层流的实际写入次数。</li></ul><blockquote><p><strong>解读</strong>:</p><p>使用缓冲流可以减少对底层流的实际读写次数，从而提高读写的效率。它们适用于处理大量数据或需要频繁读写的场景。在使用完缓冲流后，记得调用 <code>close()</code> 方法来确保缓冲区中的数据被刷新并关闭底层流。</p></blockquote><h3 id="_1-字节缓冲流" tabindex="-1"><a class="header-anchor" href="#_1-字节缓冲流" aria-hidden="true">#</a> 1, 字节缓冲流</h3><blockquote><p>字节缓冲流是在字节流的基础上添加了缓冲功能的流。它们提供了缓冲区来临时存储数据，以提高读取和写入的效率。</p></blockquote><p><strong>如以下图实例</strong></p><p>**读数据时：**它先用原始字节输入流一次性读取8KB的数据存入缓冲流内部的数组中（ps: 先一次多囤点货），再从8KB的字节数组中读取一个字节或者多个字节（消耗屯的货）。</p><p><img src="' + _imports_8 + '" alt="image-20231226144500587"></p><p><strong>写数据时：</strong> 它是先把数据写到缓冲流内部的8BK的数组中（ps: 先攒一车货），等数组存满了，再通过原始的字节输出流，一次性写到目标文件中去（把囤好的货，一次性运走）。</p><p><img src="' + _imports_9 + '" alt="image-20231226144706673"></p><p>创建缓冲字节流对象时，需要封装一个原始流对象进来。</p><p>构造方法：</p><ul><li>public BufferedInputStream(InputStream is) 把低级的字节输入流包装成一个高级的缓冲字节输入流，从而提高读数据的性能</li><li>public BufferedOutputStream(OutputStream os)把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能</li></ul><p>使用缓冲流复制文件，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n       <span class="token comment">// 字节流</span>\n       <span class="token comment">//     字节输入流  InputStream 接口</span>\n       <span class="token comment">//                FileInputStream  实现类  字节输入流    原始流/低级流</span>\n       <span class="token comment">//                BufferedInputStream  实现类  字节缓冲输入流   包装流/处理流</span>\n       <span class="token comment">//     字节输出流  OutputStream 接口</span>\n       <span class="token comment">//                FileOutputStream  实现类  字节输出流   原始流/低级流</span>\n       <span class="token comment">//                BufferedOutputStream  实现类  字节缓冲输出流    包装流/处理流</span>\n       <span class="token comment">// 字符流</span>\n       <span class="token comment">//     字符输入流  Reader 接口</span>\n       <span class="token comment">//                FileReader  实现类   字符输入流    原始流/低级流</span>\n       <span class="token comment">//                BufferedReader  实现类   字符缓冲输入流    包装流/处理流</span>\n       <span class="token comment">//     字符输出流  Writer 接口</span>\n       <span class="token comment">//                FileWriter  实现类   字符输出流   原始流/低级流</span>\n       <span class="token comment">//                BufferedWriter  实现类   字符缓冲输出流    包装流/处理流</span>\n\n\n        <span class="token comment">// 包装流就是对原始流进行包装，目的就是提高原始流读写数据的性能。</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span>\n                <span class="token comment">// 原始流  字节输入流</span>\n                <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:/resource/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 把原始流包装一下，得到一个缓冲流     字节缓冲输入流</span>\n                <span class="token class-name">InputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token comment">// 原始流  字节输出流</span>\n                <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;E:/resource/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 把原始流包装一下，得到一个缓冲流   字节缓冲输出流</span>\n                <span class="token class-name">OutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> len<span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;复制完成~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个字节缓冲流类：</p><ol><li><code>BufferedInputStream</code>：它是字节流的缓冲输入流，可以包装其他字节输入流（如 <code>FileInputStream</code> 或 <code>InputStream</code>）来提供更高效的字节读取功能。<code>BufferedInputStream</code> 内部维护了一个缓冲区，当需要读取字节时，它会从底层流中一次获取一部分数据并存储到缓冲区中，然后逐个字节地提供给读取操作，减少了对底层流的实际读取次数。</li><li><code>BufferedOutputStream</code>：它是字节流的缓冲输出流，可以包装其他字节输出流（如 <code>FileOutputStream</code> 或 <code>OutputStream</code>）来提供更高效的字节写入功能。<code>BufferedOutputStream</code> 内部维护了一个缓冲区，当需要写入字节时，它会将数据写入到缓冲区，并在缓冲区满或手动刷新时将数据一次性写入底层流，减少了对底层流的实际写入次数。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCopyExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> sourceFile <span class="token operator">=</span> <span class="token string">&quot;source.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 源文件路径</span>\n        <span class="token class-name">String</span> destinationFile <span class="token operator">=</span> <span class="token string">&quot;destination.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 目标文件路径</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n            <span class="token comment">// 创建字节输入流和缓冲输入流</span>\n            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            \n            <span class="token comment">// 创建字节输出流和缓冲输出流</span>\n            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destinationFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区大小</span>\n            <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>\n\n            <span class="token comment">// 从缓冲输入流读取数据，并写入缓冲输出流</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-字符缓冲流" tabindex="-1"><a class="header-anchor" href="#_2-字符缓冲流" aria-hidden="true">#</a> 2, 字符缓冲流</h3><ul><li>字符缓冲输入流</li><li>字符缓冲输出流</li></ul><p>字符缓冲流的原理和字节缓冲流是类似的，它底层也会有一个8KB的数组，但是这里是字符数组。字符缓冲流也不能单独使用，它需要依赖于原始字符流一起使用。</p><p><img src="' + _imports_10 + '" alt="image-20231226145636360"></p><p>**BufferedReader读数据时：**它先原始字符输入流一次性读取8KB的数据存入缓冲流内部的数组中（ps: 先一次多囤点货），再从8KB的字符数组中读取一个字符或者多个字符（消耗屯的货)</p><p><img src="' + _imports_11 + '" alt="image-20231226145716210"></p><p>创建BufferedReader对象需要用到 BufferedReader的构造方法，内部需要封装一个原始的字符输入流，我们可以传入 FileReader</p><ul><li>public BufferedReadeer(Reader r) 把低级的字符输入流包装成字符缓冲输入流管道，从而提高字符输入流读字符数据的性能。</li></ul><p>BufferedReader还要特有的方法，一次可以读取文本文件中的一行：</p><ul><li>public String readLine() 读取一行数据返回，如果没有数据可读，会返回null</li></ul><p>BufferedReader读取数据代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span>\n                <span class="token comment">// 原始流  字符输入流</span>\n                <span class="token class-name">Reader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;D:/resource/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 把原始流包装一下，得到一个缓冲流     字符缓冲输入流</span>\n                <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> len<span class="token punctuation">;</span>\n            <span class="token comment">//while ((len=br.read(buffer))!=-1){</span>\n            <span class="token comment">//    System.out.println(new String(buffer,0,len));</span>\n            <span class="token comment">//}</span>\n            <span class="token comment">// 直接取读一行数据并返回，如果没有数据可读了，会返回null</span>\n            <span class="token comment">//System.out.println(br.readLine());</span>\n\n            <span class="token class-name">String</span> line<span class="token punctuation">;</span> <span class="token comment">// 记录每次读取的一行数据</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BufferedWriter写数据时：</strong> 它是先把数据写到字符缓冲流内部的8BK的数组中（ps: 先攒一车货），等数组存满了，再通过原始的字符输出流，一次性写到目标文件中去（把囤好的货，一次性运走）。</p><p><img src="' + _imports_12 + '" alt="image-20231226150034686"></p><p>创建BufferedWriter对象时需要用到BufferedWriter的构造方法，而且内部需要封装一个原始的字符输出流，我们这里可以传递FileWriter。</p><ul><li>public BufferedWriter(Writer r) 把低级的字符输出流包装成一个高级的缓冲字符输出流管道，从而提高字符输出流写数据的性能。</li></ul><p>BufferedWriter新增了一个功能，可以用来写一个换行符：</p><ul><li>public void newLine() 换行</li></ul><p>代码演示BufferedWriter往文件中写入字符数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span>\n                <span class="token comment">// 原始流  字符输出流</span>\n                <span class="token class-name">Writer</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;D:/resource/1.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 把原始流包装一下，得到一个缓冲流     字符缓冲输出流</span>\n                <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n           bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 换行</span>\n\n           bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;我爱Java~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 换行</span>\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 找一个1G的文件，从一个地方，复制到另一个地方，做性能测试</span>\n        <span class="token comment">//  1）使用原始流1个字节1个字节复制</span>\n        <span class="token comment">//  2）使用原始流按字节数组形式复制</span>\n        <span class="token comment">//  3）使用缓冲流1个字节1个字节复制</span>\n        <span class="token comment">//  4）使用缓冲流按字节数组形式复制</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-缓冲流的性能问题" tabindex="-1"><a class="header-anchor" href="#_3-缓冲流的性能问题" aria-hidden="true">#</a> 3, 缓冲流的性能问题</h3><p><strong>注意:</strong></p><p>使用缓冲流可以提升读写操作的性能，但并非在所有情况下都能带来显著的性能提升。性能的提升取决于具体的使用场景和操作方式。</p><p>缓冲流的性能提升主要有以下几个原因：</p><ol><li><strong>减少对底层流的实际读写次数</strong>：缓冲流在内部维护了一个缓冲区，可以一次读取或写入一部分数据到缓冲区，然后再从缓冲区中逐个读取或写入数据。这样可以减少对底层流的实际读写次数，从而提高性能。</li><li><strong>批量读写操作</strong>：缓冲流可以支持一次性读取或写入一部分数据，而不是逐个字节或字符地读取或写入。这对于处理大量数据时可以减少系统调用的次数，提高读写的效率。</li><li><strong>内存与磁盘之间的数据交互</strong>：缓冲流在内存和磁盘之间建立了一个缓冲区，通过批量读写操作将数据从磁盘读取到内存或从内存写入到磁盘。这样可以充分利用内存和磁盘之间的数据交互速度差异，提高读写的效率。</li></ol><h2 id="八-转换流" tabindex="-1"><a class="header-anchor" href="#八-转换流" aria-hidden="true">#</a> 八, 转换流</h2><hr><blockquote><p>FileReader读取文件中的字符时，默认只能读取UTF-8编码格式的文件。如果使用FileReader读取GBK格式的文件，可能存在乱码，因为<strong>FileReader它遇到汉字默认是按照3个字节来读取的</strong>，<strong>而GBK格式的文件一个汉字是占2个字节</strong>，这样就会<strong>导致乱码</strong>。Java给我们提供了另外两种流InputStreamReader，OutputStreamWriter，这两个流我们把它叫做转换流。它们可以将字节流转换为字符流，并且可以指定编码方案。</p></blockquote><h3 id="_1-inputstreamreader-类" tabindex="-1"><a class="header-anchor" href="#_1-inputstreamreader-类" aria-hidden="true">#</a> 1, InputStreamReader 类</h3><blockquote><p>前面是InputStream表示字节输入流，后面是Reader表示字符输入流，合在一起意思就是表示可以把InputStream转换为Reader，最终InputStreamReader其实也是Reader的子类，所以也算是字符输入流。</p></blockquote><p>InputStreamReader也是不能单独使用的，它内部需要封装一个InputStream的子类对象，再指定一个编码表，如果不指定编码表，默认会按照UTF-8形式进行转换。</p><h3 id="_2-outputstreamwriter-类" tabindex="-1"><a class="header-anchor" href="#_2-outputstreamwriter-类" aria-hidden="true">#</a> 2, OutputStreamWriter 类</h3><p>OutputStreamWriter类，前面是OutputStream表示字节输出流，后面是Writer表示字符输出流，合在一起意思就是表示可以把OutputStream转换为Writer，最终OutputStreamWriter其实也是Writer的子类，所以也算是字符输出流。</p><p>OutputStreamReader也是不能单独使用的，它内部需要封装一个OutputStream的子类对象，再指定一个编码表，如果不指定编码表，默认会按照UTF-8形式进行转换。</p><h2 id="九-打印流" tabindex="-1"><a class="header-anchor" href="#九-打印流" aria-hidden="true">#</a> 九, 打印流</h2><hr><p>打印流（PrintStream 和 PrintWriter）是 Java 中用于将数据打印输出到不同目标的类。它们提供了便捷的方法来输出各种数据类型，如文本、数字和对象。</p><ol><li><code>PrintStream</code>：<code>PrintStream</code> 是字节打印流，它继承自 <code>OutputStream</code> 类。它提供了多个重载的 <code>print</code> 和 <code>println</code> 方法，可以接受各种数据类型，并将它们转换为字符串并输出到目标流，通常是控制台或文件。</li><li><code>PrintWriter</code>：<code>PrintWriter</code> 是字符打印流，它继承自 <code>Writer</code> 类。类似于 <code>PrintStream</code>，<code>PrintWriter</code> 也提供了多个重载的 <code>print</code> 和 <code>println</code> 方法，可以接受各种数据类型，并将它们转换为字符串并输出到目标流。</li></ol><p>这些<strong>打印流类的常用方法包括：</strong></p><ul><li><code>print()</code>：接受不同类型的参数，并将其转换为字符串输出到目标流，不会自动换行。</li><li><code>println()</code>：接受不同类型的参数，并将其转换为字符串输出到目标流，输出结束后会自动换行。</li><li><code>printf()</code>：类似于 <code>print()</code>，但支持使用格式化字符串输出。</li><li><code>format()</code>：类似于 <code>printf()</code>，用于格式化输出。</li></ul><p><strong>PrintStream 和 PrintWriter 代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// System.out.println();</span>\n        <span class="token comment">// 使用 PrintStream 打印流输出到控制台</span>\n        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>\n        ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ps<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value is: %.2f&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用 PrintWriter 打印流输出到文件</span>\n        <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a line of text.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pw<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pw<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The answer is: %d&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节打印流" tabindex="-1"><a class="header-anchor" href="#字节打印流" aria-hidden="true">#</a> <strong>字节打印流</strong></h3><p>打印流的基本使用方法：</p><ol><li>创建打印流对象： <ul><li>使用 <code>System.out</code> 创建 <code>PrintStream</code> 对象，以将输出打印到控制台。</li><li>使用 <code>new PrintWriter(Writer writer)</code> 创建 <code>PrintWriter</code> 对象，以将输出打印到指定的 <code>Writer</code> 对象（如文件或字符串）。</li></ul></li><li>使用打印方法输出数据： <ul><li><code>print()</code>：将数据打印为字符串，不会自动换行。</li><li><code>println()</code>：将数据打印为字符串，输出结束后会自动换行。</li><li><code>printf()</code> 或 <code>format()</code>：使用格式化字符串输出数据，类似于 <code>String.format()</code>。</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 创建字节打印流</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">&quot;Java_demo00\\\\src\\\\03.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-打印流的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-打印流的基本使用" aria-hidden="true">#</a> 1, 打印流的基本使用</h3><h3 id="_2-重定向输出语句" tabindex="-1"><a class="header-anchor" href="#_2-重定向输出语句" aria-hidden="true">#</a> 2, 重定向输出语句</h3><p><strong>System.out.println()</strong></p><p>前面讲过<code>System.out.println()</code>这句话表示打印输出，但是至于为什么能够输出，其实我们一直不清楚。</p><p>以前是因为知识储备还不够，无法解释，到现在就可以给同学们揭晓谜底了，因为System里面有一个静态变量叫out，out的数据类型就是PrintStream，它就是一个打印流，而且这个打印流的默认输出目的地是控制台，所以我们调用<code>System.out.pirnln()</code>就可以往控制台打印输出任意类型的数据，而且打印啥就输出啥。</p><p>而且System还提供了一个方法，可以修改底层的打印流，这样我们就可以重定向打印语句的输出目的地了。我们玩一下, 直接上代码</p><p>​</p><h2 id="十-数据流" tabindex="-1"><a class="header-anchor" href="#十-数据流" aria-hidden="true">#</a> 十, 数据流</h2><hr><p>数据流，我们在开发中偶尔也会用到。比如，我们想把数据和数据的类型一并写到文件中去，读取的时候也将数据和数据类型一并读出来。这就可以用到数据流，有两个DataInputStream和DataOutputStream.</p><p><img src="' + _imports_13 + '" alt="image-20231226153406019"></p><h3 id="_1-dataoutputstream" tabindex="-1"><a class="header-anchor" href="#_1-dataoutputstream" aria-hidden="true">#</a> 1, DataOutputStream</h3><p><strong>数据输出流</strong></p><blockquote><p>数据输出流（Data Output Stream）是一种用于将基本数据类型写入输出流的类。它提供了一种将数据以二进制形式写入输出流的方式，以便在稍后读取时能够按照相同的格式进行解析。</p></blockquote><p>构造器:</p><p><strong><img src="' + _imports_14 + '" alt="image-20231226153446434"></strong></p><p>方法:</p><p><img src="' + _imports_15 + '" alt="image-20231226153505432"></p><p>代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataOutputStreamExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 创建输出流</span>\n            <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;data.bin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">DataOutputStream</span> dataOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 写入数据</span>\n            <span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n            <span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> stringValue <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>\n            \n            dataOutputStream<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>intValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            dataOutputStream<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            dataOutputStream<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 关闭流</span>\n            dataOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            \n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据写入完成。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行上述代码后，会在当前目录下生成一个名为data.bin的文件，其中包含了我们写入的数据。这些数据以二进制形式进行存储，以便稍后进行读取和解析。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-datainputstream" tabindex="-1"><a class="header-anchor" href="#_2-datainputstream" aria-hidden="true">#</a> 2, DataInputStream</h3><p><strong>数据输入流</strong></p><blockquote><p>DataIntputStream也是一种包装流，创建DataInputStream对象时，底层需要依赖于一个原始的InputStream流对象。然后调用它的readXxx()方法就可以读取特定类型的数据。</p></blockquote><p>构造器</p><p><img src="' + _imports_16 + '" alt="image-20231226153603722"></p><p>方法:</p><p><img src="' + _imports_17 + '" alt="image-20231226153613166"></p><p>读取文件中特定类型的数据（整数、小数、字符串等）</p><p><strong>数据输入流</strong></p><blockquote><p>数据输入流（Data Input Stream）是一种用于从输入流中读取基本数据类型的类。它提供了一种从二进制数据流中读取数据并按照预定格式解析的方式。</p></blockquote><p>代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataInputStreamExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 创建输入流</span>\n            <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;data.bin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">DataInputStream</span> dataInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 读取数据</span>\n            <span class="token keyword">int</span> intValue <span class="token operator">=</span> dataInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">double</span> doubleValue <span class="token operator">=</span> dataInputStream<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> stringValue <span class="token operator">=</span> dataInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 关闭流</span>\n            dataInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 输出读取的数据</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取的整数值: &quot;</span> <span class="token operator">+</span> intValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取的浮点数值: &quot;</span> <span class="token operator">+</span> doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取的字符串值: &quot;</span> <span class="token operator">+</span> stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行上述代码时，它会从名为data.bin的文件中读取数据，并将其解析为相应的数据类型。然后，我们将读取的数据输出到控制台。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一-序列化流" tabindex="-1"><a class="header-anchor" href="#十一-序列化流" aria-hidden="true">#</a> 十一, 序列化流</h2><hr><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p><img src="' + _imports_18 + '" alt="image-20231226102735578"></p><p>这里有一个新词叫序列化：</p><ul><li><strong>序列化：意思就是把对象写到文件或者网络中去</strong>。（简单记：写对象）</li><li><strong>反序列化：意思就是把对象从文件或者网络中读取出来。</strong>（简单记：读对象）</li></ul><h3 id="声明类可以被序列化" tabindex="-1"><a class="header-anchor" href="#声明类可以被序列化" aria-hidden="true">#</a> 声明类可以被序列化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>implements Serializable</code>是Java中一个接口实现声明，用于表示一个类可以被序列化。当一个类实现了<code>Serializable</code>接口时，它表明该类的对象可以通过序列化机制转换为字节流，从而可以在网络中传输、存储到磁盘或在进程之间进行通信。</p><p><code>Serializable</code>接口是一个标记接口，也就是说它没有包含任何方法。它仅仅是作为一个标记，告诉Java虚拟机（JVM）该类可以被序列化。实现<code>Serializable</code>接口的类可以使用Java的序列化工具和框架来对其对象进行序列化和反序列化。</p></blockquote><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h3><blockquote><p>什么是序列化 ?</p><p><strong>序列化（Serialization）是将对象转换为字节序列的过程</strong>，以便在需要时可以将其存储到文件、内存或通过网络进行传输。序列化后的对象可以在稍后的时间点进行反序列化，恢复成原始对象。</p></blockquote><p><strong>要序列化一个对象，需要执行以下步骤</strong>：</p><ol><li>确保要序列化的类实现了<code>Serializable</code>接口。</li><li>创建一个<code>ObjectOutputStream</code>对象，将其与输出流（如文件输出流）关联。</li><li>使用<code>writeObject</code>方法将对象写入输出流。</li></ol><h3 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h3><blockquote><p>反序列化（Deserialization）是将字节序列转换回对象的过程，即从序列化的字节流中恢复出原始对象的过程。</p></blockquote><p><strong>代码示例, 对象的序列化和反序列化</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 可序列化的 Person 类</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Person [name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 序列化对象</span>\n        <span class="token function">serializeObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 反序列化对象</span>\n        <span class="token function">deserializeObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 序列化对象</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializeObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 创建 ObjectOutputStream 对象</span>\n            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 创建要序列化的对象</span>\n            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 序列化对象</span>\n            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 关闭输出流</span>\n            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象序列化成功.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 反序列化对象</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserializeObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 创建 ObjectInputStream 对象</span>\n            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 反序列化对象</span>\n            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;反序列化对象: &quot;</span> <span class="token operator">+</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 关闭输入流</span>\n            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transient-关键字" tabindex="-1"><a class="header-anchor" href="#transient-关键字" aria-hidden="true">#</a> transient 关键字</h3><p><strong>不参与序列化 transient关键字</strong></p><p>在Java中，如果你有某些字段不想参与对象的序列化过程，可以使用<code>transient</code>关键字进行标记。<code>transient</code>关键字可以用于修饰字段，表示该字段不会被序列化。</p><p>重要特点和使用场景：</p><ol><li>序列化时的跳过：当一个对象被序列化时，<code>transient</code>修饰的成员变量的值不会被保存到字节流中。这通常用于标记敏感信息或不需要序列化的临时数据。</li><li>反序列化时的默认值：当一个对象被反序列化时，<code>transient</code>修饰的成员变量会被设置为默认值，例如数值类型为0，引用类型为null。因此，在反序列化后，<code>transient</code>字段的值需要重新进行初始化。</li><li>临时数据的存储：<code>transient</code>关键字可以用于临时数据的存储，这些数据不需要被持久化。例如，一个包含缓存信息的对象可以将缓存数据声明为<code>transient</code>，以避免在序列化时将缓存数据写入到字节流中。</li><li><strong>安全性和保密性</strong>：通过将敏感信息的字段标记为<code>transient</code>，可以确保在对象序列化时不会将敏感数据暴露给未授权的访问者。这在涉及<strong>密码、密钥或其他敏感数据的场景</strong>中非常有用。</li></ol><h2 id="十二-io-框架" tabindex="-1"><a class="header-anchor" href="#十二-io-框架" aria-hidden="true">#</a> 十二, IO 框架</h2><hr><p>IO（Input/Output）框架是用于处理输入和输出操作的软件组件或库。它提供了一种机制来读取和写入不同类型的数据，从而与外部设备、文件系统、网络连接等进行交互。</p><blockquote><p>创建 lib 文件包, 导入 jar 包 (可以认为是 node_modules 下的文件)</p></blockquote><p><strong>引入jar包，具体步骤如下</strong></p><ol><li>在模块的目录下，新建一个lib文件夹</li><li>把jar包复制粘贴到lib文件夹下</li><li>选择lib下的jar包，右键点击Add As Library，然后就可以用了</li></ol><p>为了简化对IO操作，由apache开源基金组织提供了一组有关IO流小框架，可以提高IO流的开发效率。这个框架的名字叫commons-io：其本质是别人写好的一些字节码文件（class文件），打包成了一个jar包。我们只需要把jar包引入到我们的项目中，就可以直接用了。 jar包中提供的工具类叫FileUtils，它的部分功能如下:</p><p><img src="' + _imports_19 + '" alt="image-20231226104348381"></p><h3 id="commons-io框架" tabindex="-1"><a class="header-anchor" href="#commons-io框架" aria-hidden="true">#</a> commons IO框架</h3><p>Apache Commons IO是一个开源的Java库，提供了许多实用的IO操作工具类，用于简化和增强Java IO的功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonsIOExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">File</span> sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;source.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;destination.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>复制, 读取, 删除操作都可以完成</p></blockquote>', 282);
const _hoisted_283 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_283);
}
const JavaOOP4_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Java-OOP4.html.vue"]]);
export {
  JavaOOP4_html as default
};
