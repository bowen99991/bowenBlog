import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app-9a6f8046.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="ajax-介绍" tabindex="-1"><a class="header-anchor" href="#ajax-介绍" aria-hidden="true">#</a> Ajax 介绍</h2><hr><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 前端能发请求的方式：\n        // =================  get \n            浏览器的地址栏\n            a标签的href\n            img标签src\n            script标签的src\n            link标签的href\n            postman工具也可以发请求\n            表单\n            ajax\n        // =================  post\n            postman工具也可以发请求\n            表单\n            ajax\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AJAX:Asynchronous Javascript And XML（异步JavaScript和XML）</strong></p><p>​ ajax 并不是一个新技术，是多门技术的结合体，如：js bom json...</p><p>​ 作用：向后端发出请求，后端给出响应</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> XML(可自定义的标记语言):\n        HTML:\n            &lt;div&gt;  &lt;p&gt;   &lt;span&gt; ... \n        XML:\n            &lt;pig&gt;   &lt;dog&gt;   &lt;student&gt;...\n            在10年前，是前后端通信的一种数据格式\n            现在，前后端通信主要是以json为主\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> ajax发请求的经典步骤：\n1）创建一个ajax对象  XMLHttpRequest\n2）监听ajax对象的状态变化   或   监听onload事件\n3）配置网络请求\n4）发出请求\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 1）创建一个ajax对象   XMLHttpRequest   属于BOM中的内容</span>\n    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 它是一个对象, 里面有许多方法可以使用</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ajax刚创建出来的时状态是0</span>\n\n    <span class="token comment">// 2）监听ajax对象的状态变化 </span>\n    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// console.log(&quot;==&gt;&quot;, xhr.readyState);</span>\n      <span class="token comment">// if(xhr.readyState === 4){</span>\n      <span class="token comment">//     console.log(&quot;-------------&quot;);</span>\n      <span class="token comment">//     console.log(xhr.response);</span>\n      <span class="token comment">//     console.log(&quot;-------------&quot;);</span>\n      <span class="token comment">// }</span>\n      \n      <span class="token comment">// XMLHttpRequest.DONE 也表示ajax请求完成(服务器已完全把数据给了ajax)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> XMLHttpRequest<span class="token punctuation">.</span><span class="token constant">DONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就绪状态码变为 4</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 3）配置网络请求</span>\n    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:3000/get&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 请求的地址, 本机地址</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用完open方法后,ajax的状态就变成1</span>\n\n    <span class="token comment">// 4）发出请求  send(请求体)  请求体就是给后端传递数据</span>\n    <span class="token comment">// get请求没有所谓的请求体  只有post请求才能请求体</span>\n    <span class="token comment">// 你发出了get请求,send()  ()中不需要写任何内容 </span>\n    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ajax的状态就变成1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="express-框架的使用" tabindex="-1"><a class="header-anchor" href="#express-框架的使用" aria-hidden="true">#</a> express 框架的使用</h2><p><strong>express 介绍</strong></p><p>Express是一个流行的Node.js的Web应用程序框架，它简化了构建Web应用程序和API的过程。作为一个简洁、灵活和高效的框架，Express提供了一组强大的功能和工具，使开发者能够更轻松地构建可扩展的Web应用程序。</p><p>以下是一些Express的特点和功能：</p><ol><li>路由：Express提供了路由功能，可以定义URL路径和对应的处理函数，以便处理各种请求。通过定义不同的路由规则，可以将请求映射到相应的处理函数上。</li><li>中间件：Express的中间件是一系列函数，可在请求和响应之间添加处理逻辑。中间件可以用于执行身份验证、日志记录、异常处理等任务。Express的核心思想是构建一个中间件处理链，依次处理请求。</li><li>模板引擎：Express支持多种模板引擎，如EJS、Pug等。模板引擎可以帮助开发人员将数据动态渲染到HTML页面中，生成可供浏览器渲染的最终输出。</li><li>静态文件服务：Express可以轻松地将静态文件（如样式表、图像和JavaScript文件）提供给客户端，通过定义静态文件目录并使用合适的中间件进行处理。</li><li>数据库集成：Express没有内置的数据库功能，但可以与各种数据库集成，如MongoDB、MySQL等。通过使用适当的Node.js数据库驱动程序或ORM库，可以在Express应用程序中访问和操作数据库。</li><li>错误处理：Express提供了一套简单但强大的错误处理机制，使开发人员能够捕获和处理应用程序中的错误，同时保持应用程序的稳定性和可用性。</li></ol><p><strong>安装 express 依赖</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i express  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建 server.js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.引入express</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2.创建应用对象</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3.创建路由规则</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n 	 res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello express&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 响应一个 text格式数据</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4.监听3000端口,启动服务</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3000 server is running&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ajax-使用-get-传参" tabindex="-1"><a class="header-anchor" href="#ajax-使用-get-传参" aria-hidden="true">#</a> Ajax 使用 get 传参</h2><p><strong>服务端 server.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// get 方式传参</span>\n  \n<span class="token comment">// app.post(&#39;/server&#39;, (req, res) =&gt; {     // post 方式传参</span>\n\n  <span class="token comment">// 设置响应体</span>\n  <span class="token comment">// 设置允许跨域</span>\n  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// res.send(&#39;hello ajax&#39;)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello ajax -post&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server 3000 is running&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>允许跨域, 响应头设置</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;) \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它是用来配置跨域资源共享（Cross-Origin Resource Sharing, CORS）的一个重要字段。</p><p>CORS是一种机制，它允许在一个域中加载的Web应用程序可以访问来自其他域的资源。由于浏览器的同源策略（Same-Origin Policy）限制，普通的跨域请求是被浏览器拒绝执行的。而通过配置CORS响应头，服务器可以告知浏览器哪些域可以访问该资源。</p><p>在这里，res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;<em>&#39;)设置了&quot;Access-Control-Allow-Origin&quot;字段的值为&quot;</em>&quot;，表示允许任何域来访问该资源。这种设置方式称为通配符，它将跨域访问的权限开放给了所有域。</p><p>请注意，&quot;*&quot;表示允许所有域，但在实际的生产环境中，通常会更加安全和精确地指定允许访问的域，例如可以设置为具体的域名或IP地址。</p><p>该设置可以用来解决浏览器发起跨域请求时遇到的问题，并允许服务器端提供资源给其他域的Web应用程序使用。</p><p><strong>get 传参</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\n    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 1.创建对象</span>\n      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token comment">// 2.初始化, 设置请求方法</span>\n      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:3000/server&#39;</span><span class="token punctuation">)</span>\n      <span class="token comment">//  xhr.open(&#39;get&#39;, &#39;http://127.0.0.1:3000/server?a=100&amp;age=zs&#39;)   // (query的传参方式)</span>\n\n      <span class="token comment">// 3.发送</span>\n      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token comment">// 4.事件绑定</span>\n      <span class="token comment">// readystate 是xhr 中对象的属性, 表示 0,1,2,3,4</span>\n      xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当状态码变为4</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 状态码2xx 就是成功</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应状态码</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 状态字符串</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有响应头</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应体</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-post-传参" tabindex="-1"><a class="header-anchor" href="#使用-post-传参" aria-hidden="true">#</a> 使用 post 传参</h2><p><strong>post 传参</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// 绑定事件</span>\n    p<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseover&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// console.log(123);  // 测试</span>\n\n      <span class="token comment">// 1.创建对象</span>\n      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n      <span class="token comment">// 2.初始化, 设置请求方法</span>\n      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:3000/server&#39;</span><span class="token punctuation">)</span>\n\n      <span class="token comment">// 3.发送</span>\n      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n      <span class="token comment">// 4.事件绑定</span>\n      <span class="token comment">// readystate 是xhr 中对象的属性, 表示 0,1,2,3,4</span>\n      xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当状态码变为4</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 状态码2xx 就是成功</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 33);
const _hoisted_34 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_34);
}
const Ajax_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Ajax.html.vue"]]);
export {
  Ajax_html as default
};
