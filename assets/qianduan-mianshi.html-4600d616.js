import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-830a5e72.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="javascript-篇" tabindex="-1"><a class="header-anchor" href="#javascript-篇" aria-hidden="true">#</a> JavaScript 篇</h1><h2 id="一-基本" tabindex="-1"><a class="header-anchor" href="#一-基本" aria-hidden="true">#</a> 一, 基本</h2><h3 id="_1-基本类型" tabindex="-1"><a class="header-anchor" href="#_1-基本类型" aria-hidden="true">#</a> 1, 基本类型</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>基本类型：\n        1）number\n        2）string\n        3）boolean\n        4）null\n        5）undefiend\n        6）symbol\n\n        引用类型：\n        1）数组\n        2）对象\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-null-的类型" tabindex="-1"><a class="header-anchor" href="#_2-null-的类型" aria-hidden="true">#</a> 2, null 的类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\n\n <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// object</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token comment">// false</span>\n <span class="token comment">// null只有和undefined相等, 但是不是全等</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-判断两个对象是否相等" tabindex="-1"><a class="header-anchor" href="#_3-判断两个对象是否相等" aria-hidden="true">#</a> 3, 判断两个对象是否相等 ?</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token keyword">function</span> <span class="token function">compareObjects</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> keys1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys1<span class="token punctuation">)</span> <span class="token comment">// 获取所有的键名, 返回一个数组[&#39;a&#39;, &#39;b&#39;]</span>\n        <span class="token keyword">const</span> keys2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\n        <span class="token comment">// 判断长度</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>keys1<span class="token punctuation">.</span>length <span class="token operator">!==</span> keys2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> keys1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 遍历值是否相等</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n      <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compareObjects</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-函数和匿名函数" tabindex="-1"><a class="header-anchor" href="#_4-函数和匿名函数" aria-hidden="true">#</a> 4, 函数和匿名函数</h3><h3 id="_5-i-和-i" tabindex="-1"><a class="header-anchor" href="#_5-i-和-i" aria-hidden="true">#</a> 5, i++ 和 ++i</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>++在前，整体是新值\n++在后，整体是旧值\ni的值都要加1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-a标签点击下载的方式" tabindex="-1"><a class="header-anchor" href="#_6-a标签点击下载的方式" aria-hidden="true">#</a> 6, a标签点击下载的方式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  1)a.download 当指定 a 标签的 download 属性时，点击该链接会直接保存为⽂件，⽂件名为download 属性\n  \n  2)通过对 a 标签指定的 URL 在服务器设置响应头 Content-Disposition: attachment;filename=&quot;filename.jpg&quot; 可直接下载 \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-preload和prefetch的应用场景" tabindex="-1"><a class="header-anchor" href="#_7-preload和prefetch的应用场景" aria-hidden="true">#</a> 7, preload和prefetch的应⽤场景？</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>webpack优化之preload和prefetch：\n1)单⻚⾯应⽤由于⻚⾯过多，可能会导致代码体积过⼤，从⽽使得⾸⻚打开速度过慢。所以切分代码，优化⾸屏打开速度尤为重要。\n2)但是所有的技术⼿段都不是完美的。当我们切割代码后，⾸屏的js⽂件体积减少了好多。但是也有⼀个突出的问题：\n3)那就是当跳转其他⻚⾯的时候，需要下载相应⻚⾯的js⽂件，这就导致体验极其不好，每⼀次点击访问新⻚⾯都要等待js⽂件下载，然后再去请求接⼝获取数据。频繁出现loading动画的体验真的不好\n4)所以如果我们在进⼊⾸⻚后，在浏览器的空闲时间提前下好⽤户可能会点击⻚⾯的js⽂件，这样⾸屏的js⽂件⼤⼩得到了控制，⽽且再点击新⻚⾯的时候，相关的js⽂件已经下载好了，就不再会出现loading动画。\n\n动态引⼊js⽂件，实现code-splitting，减少⾸屏打开时间\n1)按引⼊情况加载，只需添加注释即可\n2)代码分割注释：/webpackChunkName: &#39;mp-supports&#39;/\n3)prefetch注释：/* webpackPrefetch: true */\n4)更多的，可以查看 webpack 注释⿊魔法：https://webpack.js.org/api/module-methods/#magic-comments\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-dom-中-element-与-node-有何区别" tabindex="-1"><a class="header-anchor" href="#_8-dom-中-element-与-node-有何区别" aria-hidden="true">#</a> 8. DOM 中 Element 与 Node 有何区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Element 继承于 Node，具有 Node 的⽅法，同时⼜拓展了很多⾃⼰的特有⽅法。\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-this的绑定规则" tabindex="-1"><a class="header-anchor" href="#_9-this的绑定规则" aria-hidden="true">#</a> 9, this的绑定规则</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>默认绑定：独⽴函数调⽤，函数没有被绑定到某个对象上进⾏调⽤\n隐式绑定：通过某个对象发起的函数调⽤，在调⽤对象内部有⼀个对函数的引⽤。\n显式绑定：明确this指向的对象，第⼀个参数相同并要求传⼊⼀个对象。\nnew绑定：\n1）创建⼀个全新对象\n2）新对象被执⾏prototype链接\n3）新对象绑定到函数调⽤的this\n4）如果函数没有返回其他对象，表达式会返回这个对象\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-如何实现⻚面文本不可复制" tabindex="-1"><a class="header-anchor" href="#_11-如何实现⻚面文本不可复制" aria-hidden="true">#</a> 11. 如何实现⻚⾯⽂本不可复制</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>有 CSS 和 JS 两种⽅法，以下任选其⼀或结合使⽤\n1)使⽤ CSS 如下：user-select: none;\n2)使⽤ JS 如下，监听 selectstart 事件，禁⽌选中。当⽤户选中⼀⽚区域时，将触发 selectstart 事件，Selection API 将会选中⼀⽚区域。禁⽌选中区域即可实现⻚⾯⽂本不可复制。\n\ndocument.body.onselectstart = (e) =&gt; {  e.preventDefault(); };\ndocument.body.oncopy = (e) =&gt; {  e.preventDefault();};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-常用数组操作方法" tabindex="-1"><a class="header-anchor" href="#_12-常用数组操作方法" aria-hidden="true">#</a> 12, 常用数组操作方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>常见的数组操作方法：\n\npush()：向数组末尾添加一个或多个元素，并返回新数组的长度。\npop()：删除并返回数组的最后一个元素。\nshift()：删除并返回数组的第一个元素。\nunshift()：向数组开头添加一个或多个元素，并返回新数组的长度。\nconcat()：合并两个或多个数组，并返回一个新数组。\nslice()：从原数组中提取指定范围的元素，并返回一个新数组。\nsplice()：删除、替换或插入元素到数组的指定位置。\njoin()：将数组的所有元素连接成一个字符串。\nindexOf()：返回指定元素在数组中的第一个匹配位置的索引。\nlastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>遍历和转换数组的方法</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用于遍历和转换数组的方法：\n\nforEach()：对数组的每个元素执行指定的操作。\nmap()：对数组的每个元素执行指定的操作，并返回一个新数组。\nfilter()：根据指定条件筛选数组的元素，并返回一个新数组。\nreduce()：对数组的每个元素执行指定的累积操作，返回一个累积结果。\nsort()：对数组的元素进行排序。\nreverse()：颠倒数组中元素的顺序。\nsome()：检测数组中是否至少有一个元素满足指定条件。\nevery()：检测数组中的所有元素是否都满足指定条件。\nfind()：返回数组中满足指定条件的第一个元素。\nfindIndex()：返回数组中满足指定条件的第一个元素的索引。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-说出对dom和document对象的理解" tabindex="-1"><a class="header-anchor" href="#_13-说出对dom和document对象的理解" aria-hidden="true">#</a> 13, 说出对DOM和document对象的理解</h3><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DOM:⽂档对象模型(Document Object Model)将⻚⾯所有的内容表示为可以修改的对象\n1)浏览器将我们编写在HTML中的每⼀个元素(Element)都抽象成了⼀个个对象\n2)所有这些对象都可以通过JavaScript来对其进⾏访问，那么我们就可以通过JavaScript来操作⻚⾯;\n3)所以，我们将这个抽象过程称之为 ⽂档对象模型(Document Object Model)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Document节点表示的整个载⼊的⽹⻚，它的实例是全局的document对象:\n1)对DOM的所有操作都是从 document 对象开始的\n2)它是DOM的⼊⼝点，可以从document开始去访问任何节点元素;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>DOM 文档对象模型</p><blockquote><p>DOM是一种表示HTML或XML文档的树状结构。<strong>它将文档中的每个元素、属性、文本和其他内容都表示为对象</strong>，开发者可以使用这些对象来操作和修改文档的结构、内容和样式。</p></blockquote><p><code>document</code>对象<strong>是DOM的一部分</strong>，<strong>它代表整个文档</strong>。通过<code>document</code>对象，开发者可以访问和操作文档中的元素、属性、文本等内容。<code>document</code>对象提供了许多方法和属性，使开发者能够查询和修改文档的各个部分。</p><p><code>document</code>对象，您可以执行以下操作：</p><ul><li><strong>查询和选择元素</strong>：使用<code>document.getElementById()</code>、<code>document.getElementsByClassName()</code>、<code>document.getElementsByTagName()</code>等方法来获取文档中的特定元素。</li><li><strong>修改元素内容和属性</strong>：使用<code>document.createElement()</code>、<code>element.innerHTML</code>、<code>element.setAttribute()</code>等方法来创建、修改和删除元素的内容和属性。</li><li><strong>操作文档结构</strong>：使用<code>document.createElement()</code>、<code>element.appendChild()</code>、<code>element.removeChild()</code>等方法来创建、添加和删除元素。</li><li><strong>处理事件</strong>：使用<code>element.addEventListener()</code>方法来添加事件监听器，响应用户的交互行为。</li><li><strong>获取和修改文档信息</strong>：通过<code>document.title</code>、<code>document.URL</code>、<code>document.head</code>等属性来访问和修改文档的信息。</li></ul><h3 id="_14-for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#_14-for-in-和-for-of-的区别" aria-hidden="true">#</a> 14, for in 和 for of 的区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在JavaScript中遍历数组通常是使⽤for...i循环，\n在ES5具有遍历数组功能的还有forEach、map、ﬁlter、some、every、reduce、reduceRight等。\nfor...in和for...of是两种增强型循环，\nfor...in是ES5标准，在ES6中新增了for...of的循环⽅式。\n\nfor...in ：遍历以任意顺序迭代⼀个对象的除Symbol以外的可枚举属性，包括继承的可枚举属性。\nfor...of：遍历在可迭代对象，包括 Array ， Map ， Set ， String ， TypedArray ，arguments 对象等等\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>区别：</strong></p><p>1）for...in可以遍历对象和数组，for...of不能遍历对象</p><p>2）for...in 循环不仅遍历对象的键名，还会遍历⼿动添加的其它键，甚⾄包括原型链上的键</p><p>3）for...in遍历的索引为字符串类型</p><p>4）for..of适⽤遍历数/数组对象/字符串/map/set等拥有迭代器对象的集合，但是不能遍历对象</p><p>5）for...of与forEach()不同的是，它可以正确响应break、continue和return语句</p><p>6）具有迭代器对象才可以使⽤for...of</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n      <span class="token comment">// ---------------------------</span>\n      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 0,1,2,3,4</span>\n      <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-纯函数是什么-如何写纯函数" tabindex="-1"><a class="header-anchor" href="#_15-纯函数是什么-如何写纯函数" aria-hidden="true">#</a> 15, 纯函数是什么? 如何写纯函数</h3><blockquote><p>React 中具有这个概念</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>纯函数：纯函数⼀般具有以下的特点：\n1）确定的输⼊⼀定会有确定的输出（外部环境的任何变化不会影响函数内部的操作产⽣的结果）\n2）纯函数的执⾏不会产⽣副作⽤。（函数内部的操作也不会对函数外部产⽣任何影响）\n\n纯函数在react和redux中应⽤⽐较多。编写纯函数：\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-什么是迭代器对象" tabindex="-1"><a class="header-anchor" href="#_16-什么是迭代器对象" aria-hidden="true">#</a> 16, 什么是迭代器对象</h3><blockquote><p>迭代器对象（Iterator object）是一种<strong>提供迭代（遍历）数据集合的机制的对象</strong>。它定义了一种方式来按顺序访问集合中的元素，逐个返回元素的值。</p></blockquote><p>迭代器对象通常包含两个重要的方法：</p><ol><li><code>next()</code> 方法：该方法返回一个包含两个属性的对象，即 <code>{ value, done }</code>。<code>value</code> 表示当前迭代的值，<code>done</code> 表示迭代器是否已经完成遍历，如果还有更多值可供迭代，则为 <code>false</code>，否则为 <code>true</code>。</li><li><code>Symbol.iterator</code> 方法：该方法返回迭代器对象本身。这使得迭代器对象可以通过 <code>for...of</code> 循环或使用 <code>...</code> 运算符进行迭代。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n      <span class="token comment">// 数组的 Symbol.iterator 方法获取迭代器对象</span>\n      <span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span>\n\n		  <span class="token comment">// next() 方法逐个访问数组的元素</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token comment">// 迭代完毕</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 最后一次调用 next() 返回的 done 属性为 true，表示迭代器已经完成遍历。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-js严格模式的理解" tabindex="-1"><a class="header-anchor" href="#_17-js严格模式的理解" aria-hidden="true">#</a> 17, JS严格模式的理解</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>严格模式是⼀种JavaScript的限制模式，因为种种历史原因，JavaScript语⾔在⾮严格模式下是⽐较松散的。在JavaScript不断优化和加⼊新特性的过程中，为了兼容早期的JavaScript，⼀些错误和不规范的写法也被保留了下来。这些错误也不会被抛出。在开启了严格模式后，js引擎会以⼀种更严格的规范执⾏JavaScript代码，⼀些不规范的写法和错误也会直接抛出。\n\n1)对⽂件开启：在⽂件的开头写上&quot;use strict&quot;\n2)对函数开启：在函数的开头写上&quot;use strict&quot;\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>严格模式下的语法限制：</p><blockquote><p>1)不允许意外创建全局变量（不写var、let、const这种声明变量的关键字） 2)会对静默失败的赋值操作抛出异常 3)试图删除不可删除的属性 4)不允许函数参数有相同的名称 5)不允许只有0开头的⼋进制语法 6)不允许使⽤with 7)⽆法获取eval中定义的变量 8)this绑定不会默认转成对象</p></blockquote><h3 id="_18-浏览器的内核" tabindex="-1"><a class="header-anchor" href="#_18-浏览器的内核" aria-hidden="true">#</a> 18, 浏览器的内核</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>浏览器内核⼜称浏览器渲染引擎，是浏览器的最核⼼部分。负责解析⽹⻚语法并渲染⽹⻚。\n\n常⻅的浏览器内核有：\n1)trident（三叉戟）---- IE浏览器、360安全浏览器、UC浏览器、搜狗⾼速浏览器、百度浏览器\n2)gecko（壁⻁） ---- Mozilla、Firefox\n3)pestro -&gt; Blink ---- Opera\n4)Webkit ---- Safari、360极速浏览器、搜狗⾼速浏览器、移动端浏览器\n5)Webkit -&gt; Blink ----Chrome、Edge\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-输入一个url到⻚面显示的过程" tabindex="-1"><a class="header-anchor" href="#_19-输入一个url到⻚面显示的过程" aria-hidden="true">#</a> 19, 输⼊⼀个URL到⻚⾯显示的过程</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>URL 输⼊:\n1)检查输⼊的内容是否是⼀个合法的 URL 链\n2)判断输⼊的 URL 是否完整, 如果不完整，浏览器可能会对域进⾏猜测，补全前缀或者后缀\n3)使⽤⽤户设置的默认搜索引擎来进⾏搜索\n\nDNS 解析:\n1)浏览器不能直接通过域名找到对应的服务器 IP 地址\n2)所以需要进⾏ DNS 解析，查找到对应的 IP 地址进⾏访问。\n\n建⽴ TCP 连接：\n1)三次握手\n\n发送 HTTP / HTTPS 请求（建⽴ TLS 连接）：\n1）向服务器 发起 TCP 连接请求\n2）当这个请求到达服务端后，通过 TCP 三次握⼿，建⽴ TCP 的连接。\n\n服务器响应请求：\n1）当浏览器到 web 服务器的连接建⽴后，浏览器会发送⼀个初始的 HTTP GET 请求，请求⽬标通常是⼀个 HTML ⽂件。服务器收到请求后，将发回⼀个 HTTP 响应报⽂，内容包括相关响应头和 HTML 正⽂。\n\n浏览器解析渲染⻚⾯：\n1）处理 HTML 标记并构建 DOM 树。\n2）处理 CSS 标记并构建 CSSOM 树。\n3）将 DOM 与 CSSOM 合并成⼀个渲染树\n4）根据渲染树来布局，以计算每个节点的⼏何信息。\n5）将各个节点绘制到屏幕上。\n\nHTTP 请求结束，断开 TCP 连接\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-进程和线程的区别和关系" tabindex="-1"><a class="header-anchor" href="#_20-进程和线程的区别和关系" aria-hidden="true">#</a> 20, 进程和线程的区别和关系</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>进程：\n1）是 cpu 分配资源的最⼩单位；（是能拥有资源和ᇿ⽴运⾏的最⼩单位）\n2）计算机已经运⾏的程序，是操作系统管理程序的⼀种⽅式 (官⽅说法)\n3）可以认为启动⼀个应⽤程序，就会默认启动⼀个进程（也可能是多个进程）(个⼈解释)\n4）也可以说进程是线程的容器\n\n线程：\n1）是 cpu 调度的最⼩单位；（线程是建⽴在进程的基础上的⼀次程序运⾏单位，⼀个进程中可以有多个线程）\n2）操作系统能够运⾏运算调度的最⼩单位，通常情况下它被包含在进程中 (官⽅说法)\n3）每⼀个进程中，都会启动⾄少⼀个线程⽤来执⾏程序中的代码，这个线程被称之为主线程\n\n操作系统如何做到同时让多个进程同时⼯作?\n1）因为 CPU 的运算速度⾮常快, 可以快速的在多个进程之间迅速的切换\n2）当进程中的线程获取到世间⽚时, 就可以快速执⾏我们编写的代码\n3）由于 CPU 执⾏速度过于变态, 对于⽤户来说是感受不到这种快速切换的\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 56);
const _hoisted_57 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_57);
}
const qianduanMianshi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "qianduan-mianshi.html.vue"]]);
export {
  qianduanMianshi_html as default
};
