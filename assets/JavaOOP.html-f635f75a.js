import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-01d350d9.js";
const _imports_0 = "/bowenBlog/assets/image-20231218101845737-8aadeadb.png";
const _imports_1 = "/bowenBlog/assets/image-20231218101954295-78e90bb4.png";
const _imports_2 = "/bowenBlog/assets/image-20231218102035241-6b9111b9.png";
const _imports_3 = "/bowenBlog/assets/image-20231218102312590-f7476504.png";
const _imports_4 = "/bowenBlog/assets/image-20231218102723084-85e34727.png";
const _imports_5 = "/bowenBlog/assets/image-20231218131122286-5efb76d8.png";
const _imports_6 = "/bowenBlog/assets/image-20231218131952301-0ff444bb.png";
const _imports_7 = "/bowenBlog/assets/image-20231218171958530-90a47979.png";
const _imports_8 = "/bowenBlog/assets/image-20231219224311656-440fae3e.png";
const _imports_9 = "/bowenBlog/assets/image-20231219224657584-1f111574.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="一-面向对象基础" tabindex="-1"><a class="header-anchor" href="#一-面向对象基础" aria-hidden="true">#</a> 一, 面向对象基础</h2><hr><h3 id="_1-面向对象" tabindex="-1"><a class="header-anchor" href="#_1-面向对象" aria-hidden="true">#</a> 1, 面向对象</h3><p>所谓的面向对象, 就是把要处理的数据和操作数据的方法, 封装成一个对象, 我们只需要操作这个对象就可以了。</p><p>我们之前讲过：</p><ul><li>JS中的面向对象</li><li>TS中的面向对象</li></ul><p>今天讲的Java中的面向对象和JS或TS中的面向对象类似。</p><p><strong>对象是什么</strong>？</p><ul><li>对象就是对数据和操作数据的方法进行的封装</li><li>有了类, 我们就可以去new对象了</li><li>和JS一样, 对象都是存储在堆区的, 在栈区仅仅保存了地址</li></ul><p><strong>类和对象注意点</strong>：</p><ul><li>类名首字母大写, 满足驼峰命名</li><li>类中定义的变量叫成员变量, 说白了就是封装的数据</li><li>类中定义的方法叫成员方法, 说白了就是操作数据的</li><li>成员变量都有默认值（和基本类型默认值一样）, 在定义成员变量时, 一般不赋初始</li><li><em>一个文件中, 可以有多个类, 但只能一个用public修饰, 且public修饰的类名必须是文件名。</em></li></ul><h3 id="_2-this和构造器" tabindex="-1"><a class="header-anchor" href="#_2-this和构造器" aria-hidden="true">#</a> 2, this和构造器</h3><p>this是什么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 想想,    js中的new的实例原理</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this=&gt;&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this表示new出来的对象</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s1=&gt;&quot;</span><span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// s1是一个地址</span>\n\n        s1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过this在方法中可以访问本类对象的成员变量。代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>\n    <span class="token comment">// 成员变量（数据）</span>\n    <span class="token keyword">int</span> no<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> score<span class="token punctuation">;</span>\n\n    <span class="token comment">// 方法（操作数据的）</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this=&gt;&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this表示new出来的对象</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token operator">&gt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你,    你考入到了北大~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s1<span class="token punctuation">.</span>no <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        s1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>\n\n        s1<span class="token punctuation">.</span><span class="token function">gn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-封装" tabindex="-1"><a class="header-anchor" href="#_3-封装" aria-hidden="true">#</a> 3, 封装</h3><p>所谓的封装就是把数据和操作数据的方法封装到一个类（对象）中。封装的设计规范用8个字总结, 就是：<strong>合理隐藏、合理暴露</strong>。</p><p>合理隐藏：</p><ul><li>被private修饰的变量或者方法, 只能在本类中被访问</li></ul><p>合理暴露：</p><ul><li>被public修饰的变量或方法, 就可以在本类或类外访问</li></ul><p>代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>\n    <span class="token comment">// 成没变量没有修饰符修饰,    默认是public</span>\n    <span class="token comment">// public 公有的,    类内和类外都可以访问</span>\n    <span class="token comment">//String name;</span>\n    <span class="token comment">//double score;</span>\n\n    <span class="token comment">// private表示私有的,    只有类内可以访问,    类外是不以访问的</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>\n\n    <span class="token comment">// getScore是被访问public修饰的,    所以类外也是可以访问的</span>\n    <span class="token comment">//private double getScore(){</span>\n    <span class="token comment">// getter（访问器）: 主要是用地访问类中私有的成员变量</span>\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//System.out.println(this.score);</span>\n        <span class="token comment">// 类内是可以访问私有的成员变量</span>\n        <span class="token keyword">return</span> score<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// setter（设置器）：主要是用来修改类中的成员变量</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据非法~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xq&quot;</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//System.out.println(s1.name);</span>\n        <span class="token comment">//System.out.println(s1.score);</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s1<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getter和setter可以自动生成, 如下：</p><p><img src="' + _imports_0 + '" alt="image-20231218101845737"></p><h3 id="_4-实体javabean" tabindex="-1"><a class="header-anchor" href="#_4-实体javabean" aria-hidden="true">#</a> 4, 实体JavaBean</h3><p>实体类就是一种特殊的类, 它需要满足下面的要求：</p><ul><li>类中成员变量都是私有的, 并且对外提供getXxx和setXxx方法。</li><li>类中必须要有一个公共的无参构造器</li></ul><p>实体类的作用：</p><ul><li>实体类中除了有给对象存、取值的方法就没有提供其他方法了。所以实体类仅仅只是用来封装数据用的。</li></ul><p>书写一个Student实例类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> score<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> num<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了实体类, 就可以去new了, new完之后, 就可以得到对象, 如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token comment">//import com.malu.hello.Student;  // 这一行代码不用写</span>\n\n<span class="token comment">// 导入某个类,    如果这个类文件是同包,    那么就不需要手动导入</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// s1和s2封装了4个数据</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xq&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体类应用场景：</p><ul><li>实体类仅仅只用来封装数据, 而对数据的处理交给其他类来完成, 以实现数据和数据业务处理相分离。</li></ul><p>上面已经创建好了实体类, 再创建一个业务处理的类, 如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentOperator</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Student是一个类型,    是我们自己写的类型</span>\n    <span class="token comment">// 成员变量</span>\n    <span class="token keyword">private</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">StudentOperator</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>student <span class="token operator">=</span> student<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;学生成绩及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;学生成绩不及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在main方法中, 调用之, 如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xq&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">StudentOperator</span> studentOperator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentOperator</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        studentOperator<span class="token punctuation">.</span><span class="token function">printPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前工程目录是这样的：</p><p><img src="' + _imports_1 + '" alt="image-20231218101954295"></p><h3 id="_5-案例" tabindex="-1"><a class="header-anchor" href="#_5-案例" aria-hidden="true">#</a> 5, 案例</h3><p>需求：</p><ul><li>想要展示系统中全部的电影信息（每部电影：编号、名称、价格）</li><li>允许用户根据电影的编号（id）, 查询出某个电影的详细信息</li><li>运行程序时, 能够根据用户的选择, 执行不同的功能</li></ul><h3 id="_6-员变量和局部变量的区别" tabindex="-1"><a class="header-anchor" href="#_6-员变量和局部变量的区别" aria-hidden="true">#</a> 6, 员变量和局部变量的区别</h3><p>区别如下：</p><p><img src="' + _imports_2 + '" alt="image-20231218102035241"></p><p>面向对象的核心点就是封装, 将数据和数据的处理方式, 都封装到对象中； 至于对象要封装哪些数据？对数据进行怎样的处理？ 需要通过类来设计。需要注意的是, 不同的人, 对同一个对象进行设计, 对象封装那些数据, 提供哪些方法, 可能会有所不同；只要能够完成需求, 符合设计规范, 都是合理的设计。</p><p>代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>variable</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>\n    <span class="token comment">// 成员变量</span>\n    <span class="token comment">//    位置：类里面,    方法外面</span>\n    <span class="token comment">//    初始值：有默认值的,    不需要初始化,    当然它也是可以初始化的,    一般不去初始化</span>\n    <span class="token comment">//    内存位置：堆内存</span>\n    <span class="token comment">//    作用域：整体对象,    与对象共存亡</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;malu&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 局部变量</span>\n        <span class="token comment">//    位置：在方法里面</span>\n        <span class="token comment">//    初始值：使用之前必须完成赋值</span>\n        <span class="token comment">//    内存位置：栈内存</span>\n        <span class="token comment">//    作用域：在所属的{}中有效,    随着方法的运行结束而死亡</span>\n        <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">double</span> score <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//System.out.println(name);</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-api" tabindex="-1"><a class="header-anchor" href="#二-api" aria-hidden="true">#</a> 二, API</h2><hr><h3 id="_1-包" tabindex="-1"><a class="header-anchor" href="#_1-包" aria-hidden="true">#</a> 1, 包</h3><p>API的翻译是Application Program Interface, 叫应用程序接口, 说白了, 就是别人写好的一些程序, 给咱们程序员直接拿去调用。Java官方其实已经给我们写好了很多很多类, 每一个类中又提供了一系列方法来解决与这个类相关的问题。如：</p><ul><li>比如String类, 表示字符串, 提供的方法全都是对字符串操作的。</li><li>比如ArrayList类, 表示一个容器, 提供的方法都是对容器中的数据进行操作的。</li></ul><p>API分类：</p><ul><li>官方的API, 只需要学习一些常用的就行。</li><li>第三方的API, 有的第三方API比官方的还好用。\\</li></ul><p>在讲一些API之, 我们先说一下包, Java官方提供的类有很多, 为了对这些类进行分门别类的管理, 别人把写好的类都是放在不同的包里的。包其实类似于文件夹, 一个包中可以放多个类文件。</p><p>关于包的一些知识点：</p><ul><li>要调用自己所在包下的其他程序, 可以直接调用。（同一个包下的类, 互相可以直接调用）</li><li>要调用其他包下的程序, 则必须在当前程序中导包, 才可以访问！导包格式：<code>import 包名.类名</code></li><li>要调用Java.lang包下的程序, 不需要我们导包的, 可以直接使用。</li><li>要调用多个不同包下的程序, 而这些程序名正好一样, 此时默认只能导入一个程序, 另一个程序必须带包名访问。</li></ul><h3 id="_2-string类" tabindex="-1"><a class="header-anchor" href="#_2-string类" aria-hidden="true">#</a> 2, String类</h3><p>Java为了方便我们处理字符串, 所以给我们提供了一个String类来代表字符串, 这个类就是 <code>java.lang</code> 包下。按照面向对象的编程思想, 对于字符串的操作, 只需要创建字符串对象, 用字符串对象封装字符串数据, 然后调用String类的方法就可以了。Java程序中的所有字符串字面值（如&quot;abc&quot;）都是字符串的实例实现, 实例实例, 其实指的就是字符串对象。</p><p>创建String对象的第一种方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//  方式一：字符串字面量创建</span>\n<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;ok&quot;是字符串对象</span>\n<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;malu&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建String对象的第二种方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//方式二：new String类</span>\n<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个空白字符串对象,    不含有任何内容</span>\n\n<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据传入的字符串内容生成一个字符串对象</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;码&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;路&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据字符数组,    创建字符串对象</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据字节数组,    创建字符串对象</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建字符串对象, 它里面封装了字符串数据, 利用字符串对象, 可以对字符串数据进行处理。创建字符串对象有两种方式：</p><ul><li>直接使用双引号 &quot; &quot;</li><li>new String类, new时, 它会调用类中的构造器去初始化字符串对象</li></ul><p>学会了创建字符串, 还需要知道都有哪些常用操作字符串的方法：</p><p><img src="' + _imports_3 + '" alt="image-20231218102312590"></p><p><strong>关于字符串的注意细节：</strong></p><ul><li>String对象的内容不可改变, 被称为不可变字符串对象。</li><li>双引号写的字符串对象, 会存储到字符串常量池中, 且相同内容的字符串只存储一份。</li><li>通过new创建的字符串对象, 每new一次都会产生一个新的对象存储到堆中。</li></ul><p>关于字符串的注意细节, 看如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>\nname <span class="token operator">+=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>\nname <span class="token operator">+=</span> <span class="token string">&quot;malu&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要是以 <code>“”</code> 方式写出的字符串对象, 会在堆内存中的<strong>字符串常量池</strong>中存储, 执行第一句话时, 会在堆内存的常量池中, 创建一个字符串对象 <code>“你好”</code> , 然后把 <code>“你好”</code> 的地址赋值给 <code>String name</code> 。</p><p>当执行第二句话时, 又会再堆内存的常量池中创建一个字符串 <code>“Java”</code> , 和 <code>“你好”</code> 拼接, 拼接之后还会产生一个新的字符串对象 <code>”你好JAVA“</code> , 然后将新产生的 <code>“你好JAVA”</code> 对象的地址赋值给 <code>String name</code> 变量。</p><p>当执行第三句话时, 又会再堆内存的常量池中创建一个字符串 <code>“malu”</code> , 和 <code>“你好java”</code> 拼接, 拼接之后还会产生一个新的字符串对象 <code>”你好JAVAmalu“</code> , 然后将新产生的 <code>“你好JAVAmalu”</code> 对象的地址赋值给 <code>String name</code> 变量。</p><p>结论：使用双引号创建的“你好&quot;,&quot;Java&quot;,&quot;malu&quot;这三个字符串对象, 从始到终, 它们都是存储在字符串常量池的, 它们的内容是没有发生变化的, 所以说String对象是不可变的。</p><p><em><strong>使用又引号创建的字符串对象 和 new出来的字符串对象的区别</strong>？</em></p><ul><li>使用<code>“...”</code>方式写出的字符串对象, 会存储到字符串常量池, 且相同内容的字符串只存储一份。</li><li>通过<code>new</code>方式创建字符串对象, 每new一次都会产生一个新的对象放在堆内存中。</li></ul><h3 id="_3-arraylist类" tabindex="-1"><a class="header-anchor" href="#_3-arraylist类" aria-hidden="true">#</a> 3, ArrayList类</h3><p>数组一旦创建大小不变, 比如创建一个长度为3的数组, 就只能存储3个元素, 想要存储第4个元素就不行。而集合是大小可变的, 想要存储几个元素就存储几个元素, 在实际工作中用得更多。ArrayList就是一种集合, 集合其实有很多, ArrayList只是其中的一种。</p><p>集合学习要点：</p><ul><li><p>创建集合</p></li><li><p>调用集合中的方法对集合中的数据进行CRUD操作</p><p>集合有哪些特点</p></li></ul><p>创建集合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 创建出了ArrayList集合对象,    创建出来的是一个空的集合对象</span>\n        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从jdk1.7开始支持</span>\n        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集合中的方法：</p><p><img src="' + _imports_4 + '" alt="image-20231218102723084"></p><h2 id="三-静态" tabindex="-1"><a class="header-anchor" href="#三-静态" aria-hidden="true">#</a> 三, 静态</h2><hr><blockquote><p>面向对象最核心的套路是：<strong>设计对象来处理数据，解决问题。</strong> 学习OOP进阶，目的就是让我们设计出来的对象更加好用。接下来，我们会学习很多小的知识点，这些小的知识点需要我们尽可能学生，到后面我们利用这些知识点去设计对象。</p></blockquote><h3 id="_0-static关键字" tabindex="-1"><a class="header-anchor" href="#_0-static关键字" aria-hidden="true">#</a> 0, <strong>static关键字</strong></h3><p><code>static</code> 是一个关键字, 它可以应用于变量、方法和内部类。<code>static</code> 关键字具有以下几个主要的用途和特性：</p><ol><li>静态变量（Static Variables）：使用 <code>static</code> 关键字声明的变量称为静态变量或类变量。静态变量属于类而不是对象, 它们在类加载时被初始化, 并且在整个程序执行期间都存在。可以通过类名直接访问静态变量, 而无需创建类的实例。</li><li>静态方法（Static Methods）：使用 <code>static</code> 关键字声明的方法称为静态方法。静态方法属于类而不是对象, 可以通过类名直接调用, 而无需创建类的实例。静态方法主要用于实现与类相关的功能, 而不需要访问实例特定的状态。</li><li>静态代码块（Static Initialization Blocks）：使用 <code>static</code> 关键字声明的代码块称为静态代码块。静态代码块在类加载时执行, 并且只执行一次。它通常用于执行类的初始化操作, 如初始化静态变量或执行其他静态操作。</li><li>静态内部类（Static Inner Classes）：使用 <code>static</code> 关键字声明的内部类称为静态内部类。静态内部类与外部类相互独立, 可以在没有外部类实例的情况下创建静态内部类的对象。</li></ol><p>静态成员（静态变量和静态方法）属于类本身, 而不是类的实例。它们在内存中只有一份拷贝, 并且可以被类的所有实例共享。通过使用 <code>static</code> 关键字, 可以方便地在不创建对象的情况下访问类的成员或执行类的操作。</p><blockquote><p>静态成员不能直接访问非静态成员, 因为非静态成员是与对象实例相关联的。静态成员只能直接访问其他静态成员。</p></blockquote><p><strong>类变量 ( static ) 和实例变量</strong></p><ol><li><p>类变量（静态变量）：</p><ul><li>类变量属于类本身, 使用 <code>static</code> 关键字声明。</li><li>类变量在类加载时被初始化, 并且在整个程序执行期间都存在。它们在内存中只有一份拷贝, 被类的所有实例共享。</li><li>类变量可以通过类名直接访问, 而不需要创建类的实例。</li><li>类变量通常用于表示与类相关的数据或共享的状态, 例如常量、配置信息等。</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class MyClass {\n    public static int count;  // 类变量\n\n    public void increment() {\n        count++;  // 可以在实例方法中访问类变量\n    }\n}\n\n// 访问类变量\nMyClass.count = 10;\nint currentCount = MyClass.count;\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实例变量：</p><ul><li>实例变量属于类的实例（对象）, 每个对象都有自己的一份实例变量副本。</li><li>实例变量在创建对象时被初始化, 并且每个对象的实例变量值可以不同。</li><li>实例变量可以通过对象引用来访问。</li><li>实例变量通常用于表示对象的状态或特征。</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class MyClass {\n    public int number;  // 实例变量\n\n    public void displayNumber() {\n        System.out.println(number);  // 可以在实例方法中访问实例变量\n    }\n}\n\n// 创建对象并访问实例变量\nMyClass obj1 = new MyClass();\nobj1.number = 10;\nobj1.displayNumber();\n\nMyClass obj2 = new MyClass();\nobj2.number = 20;\nobj2.displayNumber();\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>类变量和实例变量在访问权限和生命周期上也有所区别。类变量通常使用 <code>public</code> 或 <code>private</code> 访问修饰符, 并且在类加载和卸载时存在。而实例变量通常使用 <code>public</code>、<code>private</code>、<code>protected</code> 或默认访问修饰符, 并且在创建对象时分配内存, 在对象被垃圾回收时销毁。</p></blockquote><h3 id="_1-static修饰成员变量" tabindex="-1"><a class="header-anchor" href="#_1-static修饰成员变量" aria-hidden="true">#</a> 1, Static修饰成员变量</h3><p>先学习一个static关键字，static读作静态，可以用来修饰成员变量，也能修饰成员方法。当static修饰成员变量时，被static修饰的成员变量，叫类变量，反之叫实例变量。</p><ul><li>类变量：有static修饰，属于类，在计算机中只有一份，会被类的全部对象共享，用类名调用。</li><li>实例变量：无static修饰，属于每个对象的，每一个对象都有一份，用对象调用。</li></ul><p><img src="' + _imports_5 + '" alt="image-20231218131122286"></p><p>访问或调用方式：</p><ul><li>由于静态变量是属于类的，只需要通过类名就可以调用：<strong>类名. 静态变量</strong></li><li>实例变量是属于对象的，需要通过对象才能调用：<strong>对象. 实例变量</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类变量</span>\n    <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token comment">// 实例变量（对象的变量）</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、类变量的用法。</span>\n        <span class="token comment">// 类名.类变量（推荐）</span>\n        <span class="token class-name">Student</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;袁华&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 对象.类变量（不推荐）</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;马冬梅&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;秋雅&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 秋雅</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 秋雅</span>\n\n        <span class="token comment">// 2、实例变量的用法：属于每个对象的变量</span>\n        <span class="token comment">// 对象.实例变量</span>\n        s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>\n        s2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span>\n\n        <span class="token comment">// System.out.println(Student.age); // 报错</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际开发中，如果某个数据只需要一份，且希望能够被共享（访问、修改），则该数据可以定义成类变量来记住。需求：系统启动后，要求用于类可以记住自己创建了多少个用户对象。</p><p>第一步：先定义一个 <code>User</code> 类，在用户类中定义一个static修饰的变量，用来表示在线人数；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类变量</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// User.number++;</span>\n        <span class="token comment">// 注意：在同一个类中，访问自己类的类变量，才可以省略类名不写。</span>\n        number<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：再写一个测试类，再测试类中创建4个User对象，再打印number的值，观察number的值是否再自增。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//创建4个对象</span>\n        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        \n        <span class="token comment">//查看系统创建了多少个User对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;系统创建的User对象个数：&quot;</span><span class="token operator">+</span><span class="token class-name">User</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-static-修饰成员方法" tabindex="-1"><a class="header-anchor" href="#_2-static-修饰成员方法" aria-hidden="true">#</a> 2, static 修饰成员方法</h3><p>成员方法根据有无static也分为两类：<strong>类方法、实例方法</strong></p><ul><li>类方法：有static修饰的成员方法，属于类。调用时直接用类名调用即可。</li><li>实例方法：无static修饰的成员方法，属于对象。调用时，需要使用对象调用。</li></ul><p>定义一个Student类，在类中定义一个类方法、定义一个实例方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">double</span> score<span class="token punctuation">;</span>\n    <span class="token comment">// 类方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 实例方法（对象的方法）</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成绩：&quot;</span> <span class="token operator">+</span>\n                <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">&quot;及格&quot;</span><span class="token operator">:</span> <span class="token string">&quot;不及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义一个测试类，注意类方法、对象方法调用的区别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、类方法的用法</span>\n        <span class="token comment">// 类名.类方法（推荐）</span>\n        <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 对象.类方法（不推荐）</span>\n        <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s<span class="token punctuation">.</span><span class="token function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、实例方法的用法</span>\n        <span class="token comment">// 对象.实例方法</span>\n        s<span class="token punctuation">.</span><span class="token function">printPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// Student.printPass(); // 报错</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类方法细节：</p><ul><li>static修饰的方法，可以被类名调用，是因为它是随着类的加载而加载的，所以类名直接就可以找到static修饰的方法。</li><li>非static修饰的方法，需要创建对象后才能调用，是因为实例方法中可能会访问实例变量，而实例变量需要创建对象后才存在。所以实例方法，必须创建对象后才能调用。</li></ul><h3 id="_3-工具类" tabindex="-1"><a class="header-anchor" href="#_3-工具类" aria-hidden="true">#</a> 3, 工具类</h3><p>类方法的一个应用场景之一就是做<strong>工具类</strong>，一个工具类它里面的方法可以全都是静态的，那么这个类中的方法就全都可以被类名直接调用，调用起来非常方便。</p><p>实现一个生厉验证码的工具类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUtil</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 2、开始定义一个循环产生每位随机字符</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 3、随机一个字符范围内的索引。</span>\n            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 4、根据索引去全部字符中提取该字符</span>\n            code <span class="token operator">+=</span> data<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// code = code + 字符</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> code<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>MyUtils</code> 的 <code>createCOde()方法</code> 产生任意个数的验证码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">MyUtils</span><span class="token punctuation">.</span><span class="token function">createCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工具类里的方法全都是静态的，推荐用类名调用为了防止使用者用对象调用。我们可以把工具类的构造方法私有化。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUtil</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 私有化构造方法：这样别人就不能使用构造方法new对象了</span>\n    <span class="token keyword">private</span> <span class="token class-name">MyUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 2、开始定义一个循环产生每位随机字符</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 3、随机一个字符范围内的索引。</span>\n            <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 4、根据索引去全部字符中提取该字符</span>\n            code <span class="token operator">+=</span> data<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// code = code + 字符</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> code<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-static-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-static-注意事项" aria-hidden="true">#</a> 4, static 注意事项</h3><p>注意事项：</p><ul><li><strong>类方法</strong>中可以直接访问类的成员，不可以直接访问实例成员。</li><li><strong>实例方法</strong>中即可以直接访问类成员，也可以直接访问实例成员。</li><li><strong>实例方法</strong>中可以出现this关键字，类方法中不可以出现this关键字。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>ublic <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token class-name">String</span> schoolName<span class="token punctuation">;</span> <span class="token comment">// 类变量</span>\n    <span class="token keyword">double</span> score<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span>\n\n    <span class="token comment">// 1、类方法中可以直接访问类的成员，不可以直接访问实例成员。</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 注意：同一个类中，访问类成员，可以省略类名不写。</span>\n        schoolName <span class="token operator">=</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">;</span>\n        <span class="token function">printHelloWorld2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// System.out.println(score); // 报错的</span>\n        <span class="token comment">// printPass(); // 报错的</span>\n\n        <span class="token comment">// System.out.println(this); // 报错的</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 类方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHelloWorld2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 2、实例方法中既可以直接访问类成员，也可以直接访问实例成员。</span>\n    <span class="token comment">// 实例方法</span>\n    <span class="token comment">// 3、实例方法中可以出现this关键字，类方法中不可以出现this关键字的</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        schoolName <span class="token operator">=</span> <span class="token string">&quot;中国2&quot;</span><span class="token punctuation">;</span>\n        <span class="token function">printHelloWorld2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printPass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 实例方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-代码块" tabindex="-1"><a class="header-anchor" href="#_5-代码块" aria-hidden="true">#</a> 5, 代码块</h3><p>代码块根据有无static修饰分为两种：静态代码块、实例代码块</p><ul><li>静态代码块，类加载时自动执行，类只会加载一次，所以静态代码块也只会加载一次。可以大静态代码块中，对类变量进行初始化赋值。静态代码块不需要创建对象就能够执行。</li><li>每次创建对象，就会执行实例代码块，在构造器之前执行。和构造器一样，都是用来完成对象初始化的，可以对实例变量进行初始化赋值。作用和构造器作用是一样的。</li></ul><p><strong>普通代码块</strong></p><blockquote><p>普通代码块是指被包含在一对花括号 <code>{}</code> 内的代码块。它可以出现在方法内部、类的成员方法内部以及任何需要执行一系列语句的地方。普通代码块没有特殊的名称，会在所属作用域中被执行。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 普通代码块</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 这里可以编写一些语句</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造代码块</strong></p><blockquote><p>方法代码块是指在类中直接编写的代码块。它在创建对象时执行，位于类的成员变量定义之后，构造方法之前。方法代码块可以用于执行初始化操作，为实例变量赋初始值等。每次创建对象时，方法代码块都会被执行。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 方法代码块</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 这里可以编写一些语句</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 构造方法</span>\n    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 这里是构造方法的代码</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>静态代码块</strong></p><blockquote><p>静态代码块是指使用 <code>static</code> 关键字修饰的代码块。它在类被加载时执行，并且只会执行一次。静态代码块主要用于进行类的初始化操作，如加载驱动程序、初始化静态变量等。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 静态代码块</span>\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 这里可以编写一些语句</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实例代码块</strong></p><blockquote><p>实例代码块（Instance Initialization Block）是构造代码块的一种特殊形式。它与构造代码块的语法类似，但没有任何关键字。实例代码块在创建对象时执行，但在构造方法之前执行。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 实例变量</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n\n    <span class="token comment">// 实例代码块</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 在实例代码块中初始化实例变量</span>\n        value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 构造方法</span>\n    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 这里是构造方法的代码</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>? 实例代码块和构造代码块都用于对象的初始化，但它们的执行顺序不同。实例代码块在每次创建对象时都会执行，而构造代码块只在构造方法执行之前执行。</em></p><h3 id="_6-单例设计模式" tabindex="-1"><a class="header-anchor" href="#_6-单例设计模式" aria-hidden="true">#</a> 6, 单例设计模式</h3><p>单例设计模式，所谓设计模式指的是，一类问题可能会有多种解决方案，而设计模式是在编程实践中，多种方案中的一种最优方案。讲两种单例：</p><ul><li>饿汉式单例</li><li>懒汉式单例</li></ul><p>饿汉式单例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 2、定义一个类变量记住类的一个对象</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 1、必须私有类的构造器</span>\n    <span class="token keyword">private</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 3、定义一个类方法返回类的对象</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">A</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 目标：掌握单例设计模式的写法。</span>\n        <span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">A</span> a2 <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>懒汉式单例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 2、定义一个类变量，用于存储这个类的一个对象。</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>\n\n    <span class="token comment">// 1、把类的构造器私有</span>\n    <span class="token keyword">private</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 3、定义一个类方法，这个方法要保证第一次调用时才创建一个对象，后面调用时都会用这同一个对象返回。</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">B</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第一次创建对象~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> b<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">B</span> b1 <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次拿对象</span>\n        <span class="token class-name">B</span> b2 <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-继承" tabindex="-1"><a class="header-anchor" href="#四-继承" aria-hidden="true">#</a> 四, 继承</h2><hr><h3 id="_1-继承" tabindex="-1"><a class="header-anchor" href="#_1-继承" aria-hidden="true">#</a> 1, 继承</h3><p>面向对象的三大特征：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><p>子类能继承父类的非私有成员（成员变量和成员方法），创建子类对象是由子类和父类共同完成的。</p><h3 id="_2-继承的好处" tabindex="-1"><a class="header-anchor" href="#_2-继承的好处" aria-hidden="true">#</a> 2, 继承的好处</h3><p>如果多个类，有相同的代码，可以把相同的代码抽到一个类中，让别人类去继承这个类，这样可以提高代码的复用性。<strong>继承可以提高代码的复用性</strong></p><ul><li>代码重用</li><li>统一接口</li><li>扩展功能</li><li>多态性</li><li>继承关系的逻辑表达</li></ul><h3 id="_3-权限修饰符" tabindex="-1"><a class="header-anchor" href="#_3-权限修饰符" aria-hidden="true">#</a> 3, 权限修饰符</h3><p>四种修饰符</p><ul><li>private</li><li>public</li><li>protected</li><li>缺省(默认空)</li></ul><p><strong>介绍</strong></p><ol><li><code>public</code>（公共）： <code>public</code>是最高级别的权限修饰符，表示公共的、对所有类可见的。使用<code>public</code> 修饰的类、成员变量、方法和构造函数可以被任何类访问。</li><li><code>protected</code>（受保护）： <code>protected</code> 修饰符表示受保护的，只有同一包或子类中的类可以访问。在不同包中的非子类无法直接访问受保护的成员。</li><li>默认（无修饰符）： 如果没有明确使用任何权限修饰符，那么成员或类将具有默认的访问级别。默认访问级别在同一包内可见，但对于不同包中的类则不可见。</li><li><code>private</code>（私有）： <code>private</code> 是最严格的权限修饰符，表示私有的，只有同一类内的其他成员才能访问。私有成员对于类的外部是不可见的。</li></ol><p><img src="' + _imports_6 + '" alt="image-20231218131952301"></p><h3 id="_4-单继承" tabindex="-1"><a class="header-anchor" href="#_4-单继承" aria-hidden="true">#</a> 4, 单继承</h3><p><strong>Java语言只支持单继承，不支持多继承，但是可以多层继承</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、Java是单继承的：一个类只能继承一个直接父类；Java中的类不支持多继承，但是支持多层继承。</span>\n        <span class="token comment">// 2、Object类是Java中所有类的祖宗。</span>\n        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//extends Object{}</span>\n<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// class C extends B , A{} // 报错</span>\n<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-方法重写" tabindex="-1"><a class="header-anchor" href="#_5-方法重写" aria-hidden="true">#</a> 5, 方法重写</h3><p>当子类觉得父类方法不好用，或者无法满足父类需求时，子类可以重写一个方法名称、参数列表一样的方法，去覆盖父类的这个方法，这就是方法重写。</p><p>A类是父类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再写一个B类，当成子类，重写上面两个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>\n    <span class="token comment">// 1)重写的方法上面，可以加一个注解@Override,用于标注这个方法是复写的父类方法</span>\n    <span class="token comment">// 2)子类复写父类方法时，访问权限必须大于或者等于父类方法的权限</span>\n    <span class="token comment">// 	 public &gt; protected &gt; 缺省</span>\n    <span class="token comment">// 3)重写的方法返回值类型，必须与被重写的方法返回值类型一样，或者范围更小</span>\n    <span class="token comment">// 4)私有方法、静态方法不能被重写，如果重写会报错。</span>\n    <span class="token annotation punctuation">@Override</span> <span class="token comment">// 安全，可读性好</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 方法重写</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;666666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">B</span> b <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        b<span class="token punctuation">.</span><span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        b<span class="token punctuation">.</span><span class="token function">print2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>声明不变，重新实现</strong></p><h3 id="_6-子类访问成员的特点" tabindex="-1"><a class="header-anchor" href="#_6-子类访问成员的特点" aria-hidden="true">#</a> 6, 子类访问成员的特点</h3><p>子类和父类有相同成员的情况，在子类中访问其他成员（成员变量、成员方法），是依据就近原则的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;父类名字&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==父类的print1方法执行==&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;子类名称&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;局部名称&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 局部名称</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==子类的print1方法执行了=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类的</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 目标：掌握子类中访问其他成员的特点：就近原则。</span>\n        <span class="token class-name">Z</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        z<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        z<span class="token punctuation">.</span><span class="token function">showMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类和父类出现同名变量或者方法，优先使用子类的；此时如果一定要在子类中使用父类的成员，可以加 this 或者 super 进行区分。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">F</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;子类名称&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;局部名称&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 局部名称</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类成员变量</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父类的成员变量</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==子类的print1方法执行了=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类的</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父类的</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>this 调用的子类的, super 调用的父类</p></blockquote><h3 id="_7-子类访问构造器的特点" tabindex="-1"><a class="header-anchor" href="#_7-子类访问构造器的特点" aria-hidden="true">#</a> 7, 子类访问构造器的特点</h3><p>子类全部构造器，都会先调用父类构造器，再执行自己。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---父类F的 无参构造器 执行了 ---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">F</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// super() // 默认是存在的</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---子类Z的 无参构造器 执行了 ---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// super() // 默认是存在的</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---子类Z的 有参构造器 执行了 ---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Z</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Z</span> z2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想使用默认的 <code>super()</code> 方式调用父类构造器，还可以手动使用 <code>super(参数)</code> 调用父类有参数构造器。代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">F</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> skill<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> skill<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认是存在的</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Z</span> z2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;全栈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问自己类的构造器。通过this()或this(参数)来调用，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> skill<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> skill<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用自己类的构造器</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Z</span> z2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;全栈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结this和super的使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>访问本类成员：\n	<span class="token keyword">this</span><span class="token punctuation">.</span>成员变量	<span class="token comment">//访问本类成员变量</span>\n	<span class="token keyword">this</span><span class="token punctuation">.</span>成员方法	<span class="token comment">//调用本类成员方法</span>\n	<span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//调用本类空参数构造器(无参构造)</span>\n    <span class="token keyword">this</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>	  <span class="token comment">//调用本类有参数构造器</span>\n    \n访问父类成员：\n	<span class="token keyword">super</span><span class="token punctuation">.</span>成员变量	<span class="token comment">//访问父类成员变量</span>\n	<span class="token keyword">super</span><span class="token punctuation">.</span>成员方法	<span class="token comment">//调用父类成员方法</span>\n	<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		   <span class="token comment">//调用父类空参数构造器</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>	  <span class="token comment">//调用父类有参数构造器</span>\n    \n<span class="token keyword">this</span>和<span class="token keyword">super</span>访问构造方法，只能用到构造方法的第一句，否则会报错。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-多态" tabindex="-1"><a class="header-anchor" href="#五-多态" aria-hidden="true">#</a> 五, 多态</h2><hr><h3 id="_1-多态" tabindex="-1"><a class="header-anchor" href="#_1-多态" aria-hidden="true">#</a> 1, 多态</h3><blockquote><p>多态是面向对象编程的一个重要概念，它允许使用父类的引用变量来引用子类的对象，以实现方法的动态绑定和运行时的多态行为。多态性通过继承和方法重写来实现。</p></blockquote><p>多态性的关键在于以下几个要素：</p><ol><li>继承关系：多态性要求存在继承关系，即一个类继承自另一个类。</li><li>方法重写：子类可以重写（覆盖）继承自父类的方法，通过提供自己的实现来改变方法的行为。</li><li>父类引用变量：使用父类的引用变量来引用子类的对象。这样可以在编译时期使用父类的类型，而在运行时期根据实际对象类型调用相应的方法。</li></ol><p><strong>父类变量接受子类对象的现象称为对象多态</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Animal is making a sound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Dog is barking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cat is meowing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Animal</span> animal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        animal1<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Dog类的sound()方法</span>\n        animal2<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Cat类的sound()方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-多态的优劣" tabindex="-1"><a class="header-anchor" href="#_2-多态的优劣" aria-hidden="true">#</a> 2, 多态的优劣</h3><ol><li>灵活性和可扩展性：多态性允许使用父类的引用变量来引用子类的对象，这样可以在编译时期使用父类的类型，而在运行时期根据实际对象类型调用相应的方法。这种灵活性使得代码更加可扩展，可以方便地新增子类来扩展功能，而不需要修改现有的代码。</li><li>代码重用：通过多态性，可以通过父类的引用变量来调用子类的方法，从而实现代码的重用。子类可以继承和重写父类的方法，通过提供自己的实现来改变方法的行为，而不需要重新编写相同的代码。</li><li>统一接口和封装性：多态性可以通过定义共同的父类接口或抽象类来实现统一的接口，从而使得类之间的耦合度降低，代码更加灵活和可扩展。这样可以提高代码的封装性，隐藏子类的实现细节，只暴露父类的接口，便于代码的维护和管理。</li><li>多态性的适应性：多态性使得代码更具适应性，可以通过父类引用变量来引用不同的子类对象，根据实际对象类型调用相应的方法。这样可以根据不同的情况和需求，动态地选择和执行不同的代码逻辑，提高代码的灵活性和可定制性。</li><li>简化代码和维护性：多态性使得代码更具简洁性，通过父类引用变量可以处理多个不同的子类对象，避免了大量的条件判断语句和代码冗余。同时，面向父类编程可以提高代码的可读性和维护性，降低代码的复杂性和耦合度。</li></ol><p><strong>多态在运行时存在的错误</strong></p><blockquote><p>由于多态性的动态绑定特性，编译器无法检查方法调用的正确性，可能会导致运行时错误。如果父类引用变量引用了一个子类对象，但该子类对象没有实现父类中的某个方法，那么在运行时调用该方法时将抛出异常。这需要程序员在编码过程中保证正确的类型匹配，以避免潜在的运行时错误。</p></blockquote><h3 id="_3-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_3-强制类型转换" aria-hidden="true">#</a> 3, 强制类型转换</h3><h2 id="六-final-关键字" tabindex="-1"><a class="header-anchor" href="#六-final-关键字" aria-hidden="true">#</a> 六, final 关键字</h2><hr><h3 id="_1-final" tabindex="-1"><a class="header-anchor" href="#_1-final" aria-hidden="true">#</a> 1, final</h3><blockquote><p>在 Java 中，<code>final</code> 是一个关键字，用于修饰类、方法和变量，具有不同的含义和作用。</p></blockquote><p><code>final</code> 修饰类：当用 <code>final</code> 修饰一个类时，表示该类是不可继承的，即不能有子类。这样可以防止其他类对该类的继承和修改，保护类的完整性和稳定性。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FinalClass</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类的定义</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>final</code> 修饰方法：当用 <code>final</code> 修饰一个方法时，表示该方法不能被子类重写（覆盖）。这样可以确保方法的逻辑在继承关系中不被修改，保持其原有的行为。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ParentClass</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 方法的实现</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ChildClass</span> <span class="token keyword">extends</span> <span class="token class-name">ParentClass</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 无法重写 finalMethod() 方法</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>final</code> 修饰变量：当用 <code>final</code> 修饰一个变量时，表示该变量是一个常量，一旦被赋值后就不能再改变其值。常量一般使用大写字母表示，多个单词之间用下划线分隔。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_VALUE</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-常量" tabindex="-1"><a class="header-anchor" href="#_2-常量" aria-hidden="true">#</a> 2, 常量</h3><blockquote><p>真实开发中，经常使用final来定义常量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//常量: 定义一个常量表示学校名称</span>\n<span class="token comment">//为了方便在其他类中被访问所以一般还会加上public修饰符</span>\n<span class="token comment">//常量命名规范：建议都采用大写字母命名，多个单词之前有_隔开</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li>被 static final 修饰的成员变量，称之为常量。</li><li>通常用于记录系统的配置信息</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constant</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SCHOOL_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;北大&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalDemo2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//由于常量是static的所以，在使用时直接用类名就可以调用</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-abstract-关键字" tabindex="-1"><a class="header-anchor" href="#七-abstract-关键字" aria-hidden="true">#</a> 七, abstract 关键字</h2><hr><h3 id="_1-abstract" tabindex="-1"><a class="header-anchor" href="#_1-abstract" aria-hidden="true">#</a> 1, abstract</h3><blockquote><p><code>abstract</code> 是一个关键字，用于修饰类、方法和接口</p></blockquote><p>Java中有一个关键字叫abstract，它就是抽象的意思，它可以修饰类也可以修饰方法。</p><ul><li>被abstract修饰的类，就是抽象类</li><li>被abstract修饰的方法，就是抽象方法（不允许有方法体）</li></ul><p><strong>抽象类</strong></p><p><code>abstract</code> 修饰类：当用 <code>abstract</code> 修饰一个类时，表示该类是一个抽象类。抽象类不能被实例化，只能作为其他类的父类，用于被继承。抽象类可以包含抽象方法和非抽象方法。抽象类的主要目的是为了提供一种通用的、具有部分实现的基类，让子类来实现具体的功能。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类的定义，可以包含抽象方法和非抽象方法</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>抽象方法</strong></p><p><code>abstract</code> 修饰方法：当用 <code>abstract</code> 修饰一个方法时，表示该方法是一个抽象方法，没有具体的实现。抽象方法只有方法的声明，没有方法体。抽象方法必须在抽象类中声明，然后由子类来实现具体的功能。子类继承抽象类后，必须实现抽象方法，否则子类也必须声明为抽象类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>\n    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">abstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>子类继承抽象类 <code>AbstractClass</code> 后，必须实现 <code>abstractMethod()</code> 方法。</p></blockquote><p><strong><code>abstract</code> 修饰接口</strong></p><p>在接口中，所有的方法都默认是抽象方法，因此不需要显式地使用 <code>abstract</code> 关键字修饰。接口中的方法只有方法的声明，没有方法体。实现接口的类必须提供方法的具体实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">interfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类实现接口 <code>MyInterface</code> 后，必须实现 <code>interfaceMethod()</code> 方法。</p></blockquote><p>使用 <code>abstract</code> 关键字的好处包括：</p><ul><li>提供了一种抽象和封装的机制，可以定义通用的基类或接口，让子类来实现具体的功能。</li><li>强制子类实现抽象方法，保证了类的完整性和一致性。</li><li>提供了一种多态性的方式，可以通过父类或接口引用变量来引用子类对象，实现灵活的调用和扩展。</li></ul><h3 id="_2-模板方法模式" tabindex="-1"><a class="header-anchor" href="#_2-模板方法模式" aria-hidden="true">#</a> 2, 模板方法模式</h3><blockquote><p><strong>设计模式是解决某一类问题的最优方案</strong>。模板方法模式主要解决方法中存在重复代码的问题，比如A类和B类都有sing()方法，sing()方法的开头和结尾都是一样的，只是中间一段内容不一样。此时A类和B类的sing()方法中就存在一些相同的代码。</p></blockquote><p><img src="' + _imports_7 + '" alt="image-20231218171958530"></p><p>怎么解决上面的重复代码问题呢？ 我们可以写一个抽象类C类，在C类中写一个doSing()的抽象方法。再写一个sing()方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 模板方法设计模式</span>\n<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 模板方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;唱一首你喜欢的歌：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">doSing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;唱完了!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A类继承C类，复写 doSing() 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是一只小小小小鸟，想要飞就能飞的高~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B类继承C类，也复写 doSing()方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我们一起学猫叫，喵喵喵喵喵喵喵~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        b<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板方法模式解决了多个子类中有相同代码的问题。具体实现步骤如下</p><ul><li>第1步：定义一个抽象类，把子类中相同的代码写成一个模板方法。</li><li>第2步：把模板方法中不能确定的代码写成抽象方法，并在模板方法中调用。</li><li>第3步：子类继承抽象类，只需要父类抽象方法就可以了。</li></ul><h2 id="八-interface-接口" tabindex="-1"><a class="header-anchor" href="#八-interface-接口" aria-hidden="true">#</a> 八, interface 接口</h2><hr><h3 id="_1-接口定义" tabindex="-1"><a class="header-anchor" href="#_1-接口定义" aria-hidden="true">#</a> 1, 接口定义</h3><p>接口是比抽象类抽象得更加彻底的一种特殊结构。Java已经发展了20多年了，在发展的过程中不同 JDK 版本的接口也有一些变化，所以我们在学习接口时，先以老版本为基础，学习完老版本接口的特性之后，再顺带着了解一些新版本接口的特性。定义接口使用interface关键字，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>\n    <span class="token comment">//成员变量（常量）</span>\n    <span class="token comment">//成员方法（抽象方法）</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义行为契约</strong></p><blockquote><p>接口定义了一组方法签名，描述了一个类应该具备的行为和功能。它们提供了一种契约或合同，规定了实现类应该提供的方法。</p></blockquote><p><strong>多继承</strong></p><blockquote><p>Java 中的类只能单继承一个父类，但可以实现多个接口。通过实现接口，类可以在继承一个类的同时，获得另外一组接口所定义的行为和能力。</p></blockquote><p><strong>实现接口</strong></p><p><strong>接口继承接口</strong></p><p><strong>多态性</strong></p><p><strong>规范和约束</strong></p><p><strong>回调机制</strong></p><h3 id="_2-接口的优点" tabindex="-1"><a class="header-anchor" href="#_2-接口的优点" aria-hidden="true">#</a> 2, 接口的优点</h3><p><strong>实现多继承</strong></p><p>Java 中的类只能单继承一个父类，但可以实现多个接口。接口提供了一种实现多继承的机制，使得一个类可以具备多个接口所定义的行为和能力。</p><h2 id="九-内部类" tabindex="-1"><a class="header-anchor" href="#九-内部类" aria-hidden="true">#</a> 九, 内部类</h2><hr><h3 id="_1-内部类" tabindex="-1"><a class="header-anchor" href="#_1-内部类" aria-hidden="true">#</a> 1, 内部类</h3><blockquote><p><strong>Java 中的内部类是定义在其他类内部的类</strong>。内部类与外部类有特殊的关系，可以访问外部类的成员，包括私有成员，而外部类也可以访问内部类的成员。内部类提供了更强大的封装和组织代码的能力。</p></blockquote><p>Java 中有四种类型的内部类：</p><ol><li><strong>成员内部类</strong>（Member Inner Class）：定义在类的内部，但在类的成员位置。它可以访问外部类的所有成员，包括私有成员。成员内部类可以使用访问修饰符进行修饰（如 <code>public</code>、<code>private</code>、<code>protected</code> 或默认修饰符），具有独立的生命周期。</li><li><strong>静态内部类</strong>（Static Inner Class）：它是被声明为静态的内部类，与外部类的实例无关。静态内部类可以访问外部类的静态成员，但不能直接访问外部类的非静态成员。静态内部类的实例化不依赖于外部类的实例。</li><li><strong>局部内部类</strong>（Local Inner Class）：定义在方法或作用域内部的类称为局部内部类。局部内部类的作用域仅限于定义它的方法或作用域内部。局部内部类可以访问所在方法或作用域的局部变量，但这些变量必须声明为 <code>final</code> 或实际上是 <code>final</code> 的。</li><li><strong>匿名内部类</strong>（Anonymous Inner Class）：匿名内部类是没有显式定义类的名称的内部类。它通常用作接口的实现类或抽象类的子类，可以直接在创建对象的地方定义和使用。匿名内部类没有构造函数，它的定义和对象的创建同时进行。</li></ol><p><strong>内部类的使用场景</strong>包括：</p><ul><li>实现类的逻辑封装，提供更好的代码组织和可读性。</li><li>实现回调机制，例如事件处理。</li><li>使用内部类访问外部类的私有成员，实现封装和隐藏。</li></ul><p>代码演示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> outerField <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 外部类成员变量</span>\n\n    <span class="token comment">// 成员内部类</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberInnerClass</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;访问外部类的成员变量：outerField = &quot;</span> <span class="token operator">+</span> outerField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 静态内部类</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是静态内部类的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 方法中的局部内部类</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodWithLocalInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> localVar <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n        <span class="token keyword">class</span> <span class="token class-name">LocalInnerClass</span> <span class="token punctuation">{</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;访问外部方法的局部变量：localVar = &quot;</span> <span class="token operator">+</span> localVar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">LocalInnerClass</span> innerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        innerObj<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 匿名内部类</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodWithAnonymousInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是匿名内部类的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">OuterClass</span> outerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用成员内部类</span>\n        <span class="token class-name">MemberInnerClass</span> innerObj <span class="token operator">=</span> outerObj<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">MemberInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        innerObj<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用静态内部类</span>\n        <span class="token class-name">StaticInnerClass</span> staticInnerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staticInnerObj<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用局部内部类</span>\n        outerObj<span class="token punctuation">.</span><span class="token function">methodWithLocalInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 使用匿名内部类</span>\n        outerObj<span class="token punctuation">.</span><span class="token function">methodWithAnonymousInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-成员内部类" tabindex="-1"><a class="header-anchor" href="#_2-成员内部类" aria-hidden="true">#</a> 2, 成员内部类</h3><h3 id="_3-局部内部类" tabindex="-1"><a class="header-anchor" href="#_3-局部内部类" aria-hidden="true">#</a> 3, 局部内部类</h3><h3 id="_4-静态内部类" tabindex="-1"><a class="header-anchor" href="#_4-静态内部类" aria-hidden="true">#</a> 4, 静态内部类</h3><h3 id="_5-匿名内部类" tabindex="-1"><a class="header-anchor" href="#_5-匿名内部类" aria-hidden="true">#</a> 5, 匿名内部类</h3><blockquote><p>匿名内部类是没有显式定义类名的内部类，它通常用于实现接口或继承抽象类，并在创建对象的地方进行定义和使用</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用匿名内部类实现接口</span>\n      \n        <span class="token comment">// 子类</span>\n        <span class="token class-name">MyInterface</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;在匿名内部类中实现接口方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        myObj<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用接口方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十-枚举" tabindex="-1"><a class="header-anchor" href="#十-枚举" aria-hidden="true">#</a> 十, 枚举</h2><hr><h3 id="_1-枚举" tabindex="-1"><a class="header-anchor" href="#_1-枚举" aria-hidden="true">#</a> 1, 枚举</h3><blockquote><p>在Java中，枚举（Enum）是一种特殊的数据类型，用于定义一组命名的常量。枚举类型在Java中是一种独立的类，可以包含属性、方法和构造函数。</p></blockquote><p>实例代码</p><p><strong>定义枚举类型</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 枚举常量</span>\n  <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>访问枚举常量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Day</span> today <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: MONDAY</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>枚举常量可以拥有属性和方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">{</span>\n  <span class="token comment">// </span>\n  <span class="token function">MONDAY</span><span class="token punctuation">(</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">TUESDAY</span><span class="token punctuation">(</span><span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">WEDNESDAY</span><span class="token punctuation">(</span><span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n\n  <span class="token class-name">Day</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用枚举常量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Day</span> today <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Monday</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>迭代枚举常量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Day</span> day <span class="token operator">:</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>比较枚举常量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Day</span> day1 <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span>\n<span class="token class-name">Day</span> day2 <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">TUESDAY</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>day1 <span class="token operator">==</span> day2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相等&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;不相等&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>枚举在Java中用于表示固定的、预定义的一组常量，并且提供了更好的类型安全性和可读性。它们常用于定义状态、选项、配置等</p></blockquote><h3 id="_2-枚举的应用场景" tabindex="-1"><a class="header-anchor" href="#_2-枚举的应用场景" aria-hidden="true">#</a> 2, 枚举的应用场景</h3><p>枚举一般表示一组信息(一般表示几个固定的值)，然后作为参数进行传输。比如我们现在有这么一个应用，用户进入应用时，需要让用户选择是女生、还是男生，然后系统会根据用户选择的是男生，还是女生推荐不同的信息给用户观看。</p><p>这里我们就可以先定义一个枚举类，用来表示男生、或者女生，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Constant</span> <span class="token punctuation">{</span>\n    <span class="token constant">BOY</span><span class="token punctuation">,</span><span class="token constant">GIRL</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类，完成用户进入系统后的选择，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">provideInfo</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">BOY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">provideInfo</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">GIRL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">provideInfo</span><span class="token punctuation">(</span><span class="token class-name">Constant</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">case</span> <span class="token constant">BOY</span><span class="token operator">:</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;展示一些信息给男生看&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> <span class="token constant">GIRL</span><span class="token operator">:</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;展示一些信息给女生看&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一-泛型" tabindex="-1"><a class="header-anchor" href="#十一-泛型" aria-hidden="true">#</a> 十一, 泛型</h2><hr><h3 id="_1-泛型定义" tabindex="-1"><a class="header-anchor" href="#_1-泛型定义" aria-hidden="true">#</a> 1, 泛型定义</h3><blockquote><p>Java中的泛型（Generics）是一种在编译时提供类型安全性的机制，它允许在类、接口和方法中使用参数化类型。通过使用泛型，可以编写更通用、可重用的代码，并在编译时进行类型检查，从而减少类型转换错误和运行时异常。</p></blockquote><p><img src="' + _imports_8 + '" alt="image-20231219224311656"></p><p>ArrayList集合的设计者在定义ArrayList集合时，就已经明确ArrayList集合时给别人装数据用的，但是别人用ArrayList集合时候，装什么类型的数据他不知道，所以就用一个<code>E</code>表示元素的数据类型。当别人使用ArrayList集合创建对象时，<code>new ArrayList&lt;String&gt;</code>就表示元素为String类型，<code>new ArrayList&lt;Integer&gt;</code>表示元素为Integer类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 泛型：泛型类，泛型接口，泛型方法它们都是泛型。 说白了，就是类型参数化。</span>\n        <span class="token comment">// ArrayList类  当成JS中的数组来用的就行了   这个类就是一个泛型类。</span>\n\n        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下泛型的作用、本质：</p><ul><li><strong>泛型的好处：在编译阶段可以避免出现一些非法的数据。</strong></li><li><strong>泛型的本质：把具体的数据类型传递给类型变量。</strong></li></ul><h3 id="_2-自定义泛型类" tabindex="-1"><a class="header-anchor" href="#_2-自定义泛型类" aria-hidden="true">#</a> 2, 自定义泛型类</h3><p>自定义泛型类，在实际工作中一般都是源代码中写好，我们直接用的，就是ArrayList这样的，自己定义泛型类我们自己写的非常少的，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//这里的&lt;T,W&gt;其实指的就是类型变量，可以是一个，也可以是多个。</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们自己定义一个MyArrayList泛型类，模拟一下自定义泛型类的使用。注意这里重点仅仅只是模拟泛型类的使用，所以方法中的一些逻辑是次要的，也不会写得太严谨。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义泛型类  T  W   E  叫类型变量，可以是一个，也可以是多个</span>\n<span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// 索引，方便对数组进行操作</span>\n\n    <span class="token comment">// 添加元素</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>\n        index<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 获取元素</span>\n    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试自定义的泛型类MyArrayList，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-泛型接口" tabindex="-1"><a class="header-anchor" href="#_3-泛型接口" aria-hidden="true">#</a> 3, 泛型接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//这里的类型变量，一般是一个字母，比如&lt;E&gt;</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名<span class="token operator">&lt;</span>类型变量<span class="token operator">&gt;</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-泛型方法" tabindex="-1"><a class="header-anchor" href="#_4-泛型方法" aria-hidden="true">#</a> 4, 泛型方法</h3><p>泛型方法的格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token operator">&lt;</span>泛型变量<span class="token punctuation">,</span>泛型变量<span class="token operator">&gt;</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-泛型限定" tabindex="-1"><a class="header-anchor" href="#_5-泛型限定" aria-hidden="true">#</a> 5, 泛型限定</h3><p>泛型限定是泛型的特殊用法，意思是对泛型的数据类型进行范围的限制。有如下的三种格式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- &lt;?&gt; 表示任意类型\n- &lt;? extends 数据类型&gt; 表示指定类型或者指定类型的子类\n- &lt;? super 数据类型&gt; 表示指定类型或者指定类型的父类\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-泛型擦除" tabindex="-1"><a class="header-anchor" href="#_6-泛型擦除" aria-hidden="true">#</a> 6, 泛型擦除</h3><p>泛型只能编译阶段有效，一旦编译成字节码，字节码中是不包含泛型的。而且泛型只支持引用数据类型，不支持基本数据类型。代码反编译之后，是看不以泛型的。</p><h2 id="十二-常用api" tabindex="-1"><a class="header-anchor" href="#十二-常用api" aria-hidden="true">#</a> 十二, 常用API</h2><hr><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1, 介绍</h3><p>API（Application Programming interface）意思是应用程序编程接口，说人话就是Java帮我们写好的一些程序，如：类、方法等，我们直接拿过来用就可以解决一些问题。</p><p><img src="' + _imports_9 + '" alt="image-20231219224657584"></p><h3 id="object-类" tabindex="-1"><a class="header-anchor" href="#object-类" aria-hidden="true">#</a> Object 类</h3><blockquote><p><code>Object</code>类是Java中所有类的根类。它位于<code>java.lang</code>包中，是所有Java类的超类，因此每个对象都可以作为<code>Object</code>类型的实例。</p></blockquote><p><strong>默认方法</strong></p><ul><li><code>Object</code>类提供了一些默认的方法，如<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code>、<code>getClass()</code>等。</li><li>这些方法都可以在所有的Java类中直接使用，因为每个类都默认继承了<code>Object</code>类。</li></ul><p><strong>常用 API</strong></p><ol><li><code>equals()</code>方法： <ul><li><code>equals()</code>方法用于比较两个对象是否相等。</li><li>默认情况下，<code>equals()</code>方法比较的是对象的引用是否相等（即内存地址），但可以在具体的类中覆盖这个方法，以实现自定义的相等比较逻辑。</li></ul></li><li><code>hashCode()</code>方法： <ul><li><code>hashCode()</code>方法返回对象的哈希码值，用于在哈希表等数据结构中快速查找对象。</li><li>如果在类中覆盖了<code>equals()</code>方法，通常也要同时覆盖<code>hashCode()</code>方法，以保证相等的对象具有相同的哈希码。</li></ul></li><li><code>toString()</code>方法： <ul><li><code>toString()</code>方法返回对象的字符串表示形式。</li><li>默认情况下，<code>toString()</code>方法返回的是对象的类名和哈希码（由<code>getClass().getName()</code>和<code>hashCode()</code>组成），但可以在具体的类中覆盖这个方法，以提供更有意义的字符串表示。</li></ul></li><li><code>getClass()</code>方法： <ul><li><code>getClass()</code>方法返回对象的运行时类，即对象所属的具体类。</li><li>这个方法是<code>Object</code>类中唯一一个非<code>final</code>的方法，因此可以在子类中覆盖它。</li></ul></li></ol><h3 id="objects-类" tabindex="-1"><a class="header-anchor" href="#objects-类" aria-hidden="true">#</a> Objects 类</h3><blockquote><p>在Java中，<code>java.util.Objects</code>类是一个实用工具类，提供了一些静态方法来对对象进行常见的操作，如空值检查、对象比较和哈希码计算等。</p></blockquote><p><strong>常见 API</strong></p><ol><li><code>isNull(Object obj)</code>：检查给定对象是否为<code>null</code>。</li><li><code>nonNull(Object obj)</code>：检查给定对象是否不为<code>null</code>。</li><li><code>requireNonNull(T obj)</code>：要求给定对象不为<code>null</code>，否则抛出<code>NullPointerException</code>异常。</li><li><code>requireNonNull(T obj, String message)</code>：要求给定对象不为<code>null</code>，否则抛出带有自定义错误消息的<code>NullPointerException</code>异常。</li><li><code>equals(Object a, Object b)</code>：比较两个对象是否相等，处理了<code>null</code>的情况，避免抛出<code>NullPointerException</code>。</li><li><code>deepEquals(Object a, Object b)</code>：深度比较两个对象是否相等，会递归比较数组和嵌套对象。</li><li><code>hashCode(Object obj)</code>：计算对象的哈希码，处理了<code>null</code>的情况。</li><li><code>hash(Object... values)</code>：根据一组对象计算组合哈希码。</li><li><code>toString(Object obj)</code>：获取对象的字符串表示，处理了<code>null</code>的情况。</li><li><code>compare(T a, T b, Comparator&lt;? super T&gt; c)</code>：使用给定的比较器比较两个对象。</li><li><code>requireNonNullElse(T obj, T defaultObj)</code>：要求给定对象不为<code>null</code>，否则返回默认对象。</li><li><code>requireNonNullElseGet(T obj, Supplier&lt;? extends T&gt; supplier)</code>：要求给定对象不为<code>null</code>，否则通过提供的供应函数获取默认对象。</li></ol><h3 id="包装类转化" tabindex="-1"><a class="header-anchor" href="#包装类转化" aria-hidden="true">#</a> 包装类转化</h3><p><strong>什么是包装类</strong></p><blockquote><p>包装类（Wrapper class）是Java中提供的一组用于表示基本数据类型的类。基本数据类型是Java中的原始数据类型，如整数类型<code>int</code>、浮点类型<code>float</code>、字符类型<code>char</code>等。包装类提供了将基本数据类型封装为对象的功能，使得可以在需要对象的场景中使用基本数据类型。</p><p><strong>Java中的包装类</strong>有以下几种：</p><ol><li><code>Boolean</code>：对应布尔类型<code>boolean</code>。</li><li><code>Byte</code>：对应字节类型<code>byte</code>。</li><li><code>Short</code>：对应短整数类型<code>short</code>。</li><li><code>Integer</code>：对应整数类型<code>int</code>。</li><li><code>Long</code>：对应长整数类型<code>long</code>。</li><li><code>Float</code>：对应浮点类型<code>float</code>。</li><li><code>Double</code>：对应双精度浮点类型<code>double</code>。</li><li><code>Character</code>：对应字符类型<code>char</code>。</li></ol></blockquote><p><em>包装类的主要作用是提供了一系列方法来操作基本数据类型的值，同时也支持将基本数据类型转换为字符串、进行比较等操作。此外，包装类还可以作为泛型的参数，参与集合的操作，以及在需要使用对象的场景中，如集合类、泛型类、反射等。</em></p><p><em>包装类还提供了自动拆箱（Autoboxing）和自动装箱（Autounboxing）的特性。自动拆箱指的是将包装类对象自动转换为对应的基本数据类型值，而自动装箱指的是将基本数据类型值自动封装为对应的包装类对象。这样可以方便地在基本数据类型和包装类之间进行转换，使得代码更加简洁和易读。</em></p><p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>\n<span class="token keyword">int</span> value <span class="token operator">=</span> number<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱</span>\n\n<span class="token class-name">Double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将double类型封装为Double对象</span>\n<span class="token keyword">double</span> pi <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将Double对象拆箱为double类型</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转换基本数据类型</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> primitiveInt <span class="token operator">=</span> intValue<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用包装类的intValue()方法</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以直接使用自动拆箱的特性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> primitiveInt <span class="token operator">=</span> intValue<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转换为字符串</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> strValue <span class="token operator">=</span> intValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用包装类的toString()方法</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以直接使用包装类的字符串形式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> strValue <span class="token operator">=</span> intValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用字符串拼接的方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> strValue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> intValue<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串转换为包装类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> strValue <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用包装类的valueOf()方法</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以直接使用自动装箱的特性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> strValue <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在进行包装类转换时，需要注意避免出现<code>NumberFormatException</code>等异常，特别是在字符串转换为包装类时，要确保字符串的格式正确。</p></blockquote><h3 id="stringbuilder-类" tabindex="-1"><a class="header-anchor" href="#stringbuilder-类" aria-hidden="true">#</a> StringBuilder 类</h3><blockquote><p><code>StringBuilder</code>类是Java中用于处理可变字符串的类，它位于<code>java.lang</code>包下。<code>StringBuilder</code>类提供了一组方法来操作字符串，包括追加、插入、删除、替换等操作，而且这些操作不会创建新的字符串对象，而是直接在原始字符串上进行修改，<u>因此在频繁修改字符串的情况下，使用<code>StringBuilder</code>可以提高性能。</u></p></blockquote><p>常用方法：</p><ol><li><code>append(String str)</code>：在字符串的末尾追加指定的字符串。</li><li><code>insert(int offset, String str)</code>：在指定位置插入指定的字符串。</li><li><code>delete(int start, int end)</code>：删除指定范围内的字符。</li><li><code>replace(int start, int end, String str)</code>：用指定的字符串替换指定范围内的字符。</li><li><code>substring(int start)</code>：从指定位置开始截取字符串的子串。</li><li><code>substring(int start, int end)</code>：从指定范围内截取字符串的子串。</li><li><code>reverse()</code>：反转字符串。</li><li><code>length()</code>：返回字符串的长度。</li><li><code>toString()</code>：将<code>StringBuilder</code>对象转换为字符串。</li></ol><p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 追加字符串</span>\nsb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;Hello World!&quot;</span>\n\nsb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot; Beautiful&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定位置插入字符串</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;Hello Beautiful World!&quot;</span>\n\nsb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除指定范围内的字符</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;Hello World!&quot;</span>\n\nsb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&quot;Awesome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换指定范围内的字符</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;Hello Awesome!&quot;</span>\n\n<span class="token class-name">String</span> sub <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取字符串的子串</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;Awesome!&quot;</span>\n\nsb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反转字符串</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;!emosewA olleH&quot;</span>\n\n<span class="token keyword">int</span> length <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取字符串的长度</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：14</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>StringBuilder</code>类是用于处理可变字符串的类，提供了一组方法来操作字符串，如追加、插入、删除、替换、截取、反转等操作。</p></blockquote><h3 id="stringjoiner-类" tabindex="-1"><a class="header-anchor" href="#stringjoiner-类" aria-hidden="true">#</a> StringJoiner 类</h3><blockquote><p><code>StringJoiner</code>类是Java 8中引入的一个实用工具类，<strong>用于拼接字符串</strong>，位于<code>java.util</code>包下。它提供了一种简便的方式来构造带有分隔符的字符串，适用于需要将多个字符串连接起来的场景。</p></blockquote><p><code>StringJoiner</code>类的主要构造函数有两个重载形式：</p><ol><li><code>StringJoiner(CharSequence delimiter)</code>：使用指定的分隔符构造一个空的<code>StringJoiner</code>对象。</li><li><code>StringJoiner(CharSequence delimiter, CharSequence prefix, CharSequence suffix)</code>：使用指定的分隔符、前缀和后缀构造一个空的<code>StringJoiner</code>对象。</li></ol><p><strong>常用 API</strong></p><ol><li><code>add(CharSequence element)</code>：向<code>StringJoiner</code>中添加元素。</li><li><code>merge(StringJoiner other)</code>：将另一个<code>StringJoiner</code>对象的内容合并到当前对象。</li><li><code>length()</code>：返回当前字符串的长度。</li><li><code>toString()</code>：将<code>StringJoiner</code>对象转换为字符串。</li></ol><p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringJoiner</span> joiner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用逗号和空格作为分隔符</span>\njoiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> fruits <span class="token operator">=</span> joiner<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;Apple, Banana, Orange&quot;</span>\n\n<span class="token class-name">StringJoiner</span> joiner2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot; | &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用竖线和空格作为分隔符，并添加前缀和后缀</span>\njoiner2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoiner2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoiner2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> colors <span class="token operator">=</span> joiner2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;[Red | Green | Blue]&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bigdecimal-类" tabindex="-1"><a class="header-anchor" href="#bigdecimal-类" aria-hidden="true">#</a> BigDecimal 类</h3><blockquote><p><code>BigDecimal</code>类是Java中提供的用于精确处理任意精度的十进制数的类。它位于<code>java.math</code>包中，并提供了大量的方法来执行数值运算、比较和格式化操作。</p></blockquote><p><strong>创建<code>BigDecimal</code>对象</strong></p><ul><li>使用字符串作为参数创建<code>BigDecimal</code>对象：<code>BigDecimal number = new BigDecimal(&quot;10.25&quot;);</code></li><li>使用整数或长整数作为参数创建<code>BigDecimal</code>对象：<code>BigDecimal number = BigDecimal.valueOf(10);</code></li></ul><p><strong>数值运算</strong></p><ul><li>加法：<code>BigDecimal result = number1.add(number2);</code></li><li>减法：<code>BigDecimal result = number1.subtract(number2);</code></li><li>乘法：<code>BigDecimal result = number1.multiply(number2);</code></li><li>除法：<code>BigDecimal result = number1.divide(number2, scale, roundingMode);</code>（需要指定精度和舍入模式）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>\n        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// System.out.println(b1 instanceof BigDecimal);</span>\n\n        <span class="token comment">// 设置小数位位数 , 并制定舍入模式 (四舍五入)</span>\n        <span class="token class-name">BigDecimal</span> b <span class="token operator">=</span>  b1<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>比较操作</strong></p><ul><li><code>compareTo()</code>方法：比较两个<code>BigDecimal</code>对象的大小，返回负整数、零或正整数。</li><li><code>equals()</code>方法：检查两个<code>BigDecimal</code>对象是否相等。</li></ul><p><strong>格式化输出</strong></p><ul><li><code>toString()</code>方法：将<code>BigDecimal</code>对象转换为字符串表示形式。</li><li><code>setScale()</code>方法：设置小数位数。</li></ul><p><strong>其他常用方法</strong></p><ul><li><code>abs()</code>方法：返回<code>BigDecimal</code>对象的绝对值。</li><li><code>max()</code>方法：返回两个<code>BigDecimal</code>对象中较大的一个。</li><li><code>min()</code>方法：返回两个<code>BigDecimal</code>对象中较小的一个。</li></ul><h3 id="math-类" tabindex="-1"><a class="header-anchor" href="#math-类" aria-hidden="true">#</a> Math 类</h3><blockquote><p>Math 类中许多与 JavaScript 中相同</p></blockquote><h3 id="system-类" tabindex="-1"><a class="header-anchor" href="#system-类" aria-hidden="true">#</a> System 类</h3><blockquote><p><code>System</code>类是Java中的一个系统类，位于<code>java.lang</code>包下。它提供了一系列与系统相关的方法和字段，用于访问系统级资源、执行标准输入输出、获取系统属性、进行垃圾回收等操作。</p></blockquote><p><code>System</code>类的一些常用方法和字段：</p><ol><li><code>out</code>：表示标准输出流（<code>PrintStream</code>对象），可以使用<code>System.out.println()</code>等方法进行标准输出。</li><li><code>err</code>：表示标准错误输出流（<code>PrintStream</code>对象），可以使用<code>System.err.println()</code>等方法进行标准错误输出。</li><li><code>in</code>：表示标准输入流（<code>InputStream</code>对象），可以使用<code>System.in.read()</code>等方法进行标准输入。</li><li><code>currentTimeMillis()</code>：返回当前时间的毫秒数，用于计算程序的执行时间等。</li><li><code>arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：用于复制数组中的元素。</li><li><code>gc()</code>：请求系统进行垃圾回收。</li><li><code>exit(int status)</code>：终止当前正在运行的Java虚拟机，并返回指定的状态码。</li></ol><p><strong>代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标准输出</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标准错误输出</span>\n\n<span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从标准输入读取一个字符的ASCII码</span>\n\n<span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前时间的毫秒数</span>\n\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> destination<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制数组</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请求进行垃圾回收</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 终止当前程序并返回状态码</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-类" tabindex="-1"><a class="header-anchor" href="#date-类" aria-hidden="true">#</a> Date 类</h3><blockquote><p><code>Date</code>类是Java中用于表示日期和时间的类，它位于<code>java.util</code>包中。然而需要注意的是，<code>Date</code>类在Java 8及之前的版本中被标记为过时（deprecated），因为它存在一些问题和限制。从Java 8开始，推荐使用<code>java.time</code>包中的新日期和时间 API（例如<code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>等）来处理日期和时间。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 输出当前的时间</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">long</span> time <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 自从 1970-1-1 至今多少年</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span><span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span> <span class="token operator">/</span><span class="token number">365</span> <span class="token operator">+</span> <span class="token string">&quot;年(数量)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="simpledateformat-类" tabindex="-1"><a class="header-anchor" href="#simpledateformat-类" aria-hidden="true">#</a> SimpleDateFormat 类</h3><blockquote><p><code>SimpleDateFormat</code>类是Java中用于格式化日期和时间的类，它位于<code>java.text</code>包中。<code>SimpleDateFormat</code>允许将日期和时间按照指定的格式进行格式化为字符串，或者将字符串解析为日期和时间对象。</p></blockquote><p><strong>常用 API</strong></p><ol><li><p>格式化日期和时间：</p><ul><li><code>format()</code>方法：将<code>Date</code>对象或<code>Calendar</code>对象格式化为字符串表示形式，例如：<code>String formattedDate = sdf.format(date);</code></li><li><code>format()</code>方法将日期和时间按照指定的格式转换为字符串。</li></ul></li><li><p>解析字符串为日期和时间：</p><ul><li><code>parse()</code>方法：将字符串解析为<code>Date</code>对象，例如：<code>Date parsedDate = sdf.parse(dateString);</code></li><li><code>parse()</code>方法将按照指定的格式解析字符串，并返回对应的日期和时间对象。</li></ul></li><li><p>格式模式符号 ( <strong>需要注意大小写</strong> ) ：</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SimpleDateFormat\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用一些特定的格式模式符号来表示日期和时间的不同部分，例如：</p><ul><li><code>yyyy</code>：四位数的年份</li><li><code>MM</code>：两位数的月份</li><li><code>dd</code>：两位数的日期</li><li><code>HH</code>：24小时制的小时</li><li><code>mm</code>：分钟</li><li><code>ss</code>：秒</li></ul></li></ul></li></ol><h3 id="calendar-类" tabindex="-1"><a class="header-anchor" href="#calendar-类" aria-hidden="true">#</a> Calendar 类</h3><blockquote><p><code>Calendar</code> 类是 Java 提供的一个用于处理日期和时间的抽象类。</p><p>它提供了许多方法来执行日期和时间的计算、格式化和解析等操作。<code>Calendar</code> 类是一个抽象类，不能直接实例化，但可以通过调用其静态方法来获取 <code>Calendar</code> 对象的实例。</p></blockquote><p>代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 日历类</span>\n        <span class="token comment">// 可以对年月日 , 时分秒进行运算</span>\n      \n      	<span class="token comment">// 获取 Calendar 实例</span>\n        <span class="token class-name">Calendar</span> instance <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 获取年月日</span>\n        <span class="token comment">// 修改时间</span>\n        <span class="token comment">// instance.add(Calendar.YEAR, 1);</span>\n        <span class="token keyword">int</span> year <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 月份从0开始到11</span>\n        <span class="token keyword">int</span> month <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> day <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 获取时间</span>\n        <span class="token class-name">Date</span> t1 <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Calendar 类还提供了其他一些方法和常量，用于处理星期、时区、日期比较等操作。需要注意的是，<strong>Calendar 类的月份从 0 开始</strong>，即 0 表示一月，11 表示十二月。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 Calendar 实例：可以使用 getInstance() 静态方法获取默认时区和语言环境的 Calendar 对象实例。例如：</span>\n\n<span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n<span class="token comment">// 设置日期和时间：可以使用 set() 方法设置特定的年、月、日、时、分、秒等字段的值。</span>\n\ncalendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DECEMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n<span class="token comment">// 获取日期和时间：可以使用 get() 方法获取特定字段的值，如年、月、日、时、分、秒等。</span>\n\n<span class="token keyword">int</span> year <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：月份从 0 开始，所以要加 1</span>\n<span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> hourOfDay <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> minute <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> second <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n<span class="token comment">// 日期和时间计算：Calendar 类提供了许多方法用于执行日期和时间的计算，如增加或减少特定字段的值。</span>\n\ncalendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加一天</span>\ncalendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减少两小时</span>\n```\n\n<span class="token comment">// 日期和时间格式化：可以使用 SimpleDateFormat 类或其他日期格式化类来格式化 Calendar 对象中的日期和时间。</span>\n\n<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> formattedDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n<span class="token comment">// 解析字符串为 Calendar 对象：可以使用 SimpleDateFormat 类或其他日期解析类将字符串解析为 Calendar 对象。</span>\n<span class="token class-name">String</span> dateString <span class="token operator">=</span> <span class="token string">&quot;2023-12-24 18:30:00&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrays-类" tabindex="-1"><a class="header-anchor" href="#arrays-类" aria-hidden="true">#</a> Arrays 类</h3><blockquote><p>在Java中，<code>java.util.Arrays</code>类提供了一些用于操作数组的静态方法。这些方法包括数组的排序、搜索、比较等操作。以下是一些<code>Arrays</code>类的常用方法和特点</p></blockquote><p><strong>排序数组</strong></p><blockquote><p><code>Arrays</code>类提供了<code>sort</code>方法用于对数组进行排序。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n上述代码将对`numbers`数组进行升序排序。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>搜索元素</strong></p><blockquote><p><code>Arrays</code>类提供了<code>binarySearch</code>方法用于在已排序的数组中搜索指定元素。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n上述代码将在`numbers`数组中搜索值为<span class="token number">3</span>的元素，并返回其索引。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>比较数组</strong></p><blockquote><p><code>Arrays</code>类提供了<code>equals</code>方法用于比较两个数组是否相等。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">boolean</span> isEqual <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n上述代码将比较`arr1`和`arr2`数组是否相等，并将结果存储在`isEqual`变量中。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>填充数组</strong></p><blockquote><p><code>Arrays</code>类提供了<code>fill</code>方法用于将指定的值填充到数组的所有元素中。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n上述代码将将数组`numbers`的所有元素填充为<span class="token number">0</span>。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>转换为字符串</strong></p><blockquote><p><code>Arrays</code>类提供了<code>toString</code>方法用于将数组转换为字符串表示。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n上述代码将将数组`numbers`转换为字符串表示，并将结果存储在`str`变量中。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Arrays</code>类还提供了其他一些方法，如<code>copyOf</code>（复制数组）、<code>asList</code>（将数组转换为List）等。你可以参考Java文档以了解更多关于<code>Arrays</code>类的详细信息和可用方法。</p>', 448);
const _hoisted_449 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_449);
}
const JavaOOP_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JavaOOP.html.vue"]]);
export {
  JavaOOP_html as default
};
