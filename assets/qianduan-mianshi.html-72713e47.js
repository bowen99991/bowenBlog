import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-030547e9.js";
const _imports_0 = "/bowenBlog/assets/image-20240106194215393-5469089b.png";
const _imports_1 = "/bowenBlog/assets/image-20240106194347830-1d7776c0.png";
const _imports_2 = "/bowenBlog/assets/image-20240106202530804-8ffd43bf.png";
const _imports_3 = "/bowenBlog/assets/image-20240106203757621-347da4b2.png";
const _imports_4 = "/bowenBlog/assets/image-20240106204325813-69e7729e.png";
const _imports_5 = "/bowenBlog/assets/image-20240106210855414-9b26994a.png";
const _imports_6 = "/bowenBlog/assets/image-20240106212526929-381119af.png";
const _imports_7 = "/bowenBlog/assets/image-20240106213430673-31f92af3.png";
const _imports_8 = "/bowenBlog/assets/image-20240106213515591-ddaf077a.png";
const _imports_9 = "/bowenBlog/assets/image-20240106213611395-c0b44d17.png";
const _imports_10 = "/bowenBlog/assets/image-20240106215402649-9b9f4b2c.png";
const _imports_11 = "/bowenBlog/assets/image-20240106220229169-7f9ce3d9.png";
const _imports_12 = "/bowenBlog/assets/image-20240106220440851-0737f772.png";
const _imports_13 = "/bowenBlog/assets/image-20240106220843040-d0e6f0e8.png";
const _imports_14 = "/bowenBlog/assets/image-20240106203238698-3a3a8829.png";
const _imports_15 = "/bowenBlog/assets/image-20240106203548664-2e07730d.png";
const _imports_16 = "/bowenBlog/assets/image-20240106222126035-7bb3e04c.png";
const _imports_17 = "/bowenBlog/assets/image-20240107231704539-ad3f6df8.png";
const _imports_18 = "/bowenBlog/assets/image-20240107231714806-2038c05d.png";
const _imports_19 = "/bowenBlog/assets/image-20240107231448297-7aae2ab8.png";
const _imports_20 = "/bowenBlog/assets/image-20240106222908754-23ec2898.png";
const _imports_21 = "/bowenBlog/assets/image-20240106224006329-201fc720.png";
const _imports_22 = "/bowenBlog/assets/image-20240107220247133-74f9f2b3.png";
const _imports_23 = "/bowenBlog/assets/image-20240107223400297-708095e2.png";
const _imports_24 = "/bowenBlog/assets/image-20240107223456603-9f3d5b23.png";
const _imports_25 = "/bowenBlog/assets/image-20240107223541258-37036dea.png";
const _imports_26 = "/bowenBlog/assets/image-20240107223951731-59e7ddb2.png";
const _imports_27 = "/bowenBlog/assets/image-20240107224334411-49573fbc.png";
const _imports_28 = "/bowenBlog/assets/image-20240107224451459-f32d7e30.png";
const _imports_29 = "/bowenBlog/assets/image-20240107224601753-a734fa67.png";
const _imports_30 = "/bowenBlog/assets/image-20240107232224196-dbb72187.png";
const _imports_31 = "/bowenBlog/assets/image-20240107233825169-55bc5c39.png";
const _imports_32 = "/bowenBlog/assets/image-20240107233920175-b6a5a563.png";
const _imports_33 = "/bowenBlog/assets/image-20240107232544832-9b9a0229.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="html-css篇" tabindex="-1"><a class="header-anchor" href="#html-css篇" aria-hidden="true">#</a> HTML/CSS篇</h1><hr><h3 id="_1-块级元素和行内元素的区别" tabindex="-1"><a class="header-anchor" href="#_1-块级元素和行内元素的区别" aria-hidden="true">#</a> 1, 块级元素和行内元素的区别</h3><p><img src="' + _imports_0 + '" alt="image-20240106194215393"></p><p>相关题目</p><p><strong>src 和 href 区别</strong></p><p><img src="' + _imports_1 + '" alt="image-20240106194347830"></p><ol><li>用途不同： <ul><li><code>src</code>（source）是用于指定外部资源</li><li><code>href</code>（hypertext reference）是用于指定链接到其他文档或资源的超链接路径。</li></ul></li><li>元素的适用范围： <ul><li><code>src</code>属性通常用于<code>&lt;img&gt;</code>（图像）、<code>&lt;audio&gt;</code>（音频）、<code>&lt;video&gt;</code>（视频）和<code>&lt;script&gt;</code>（脚本）等元素中，用于引用外部资源。</li><li><code>href</code>属性通常用于<code>&lt;a&gt;</code>（超链接）、<code>&lt;link&gt;</code>（样式表）和<code>&lt;base&gt;</code>（基准链接）等元素中，用于创建链接或指定外部资源的路径。</li></ul></li><li>影响的内容： <ul><li><code>src</code>属性会将外部资源<strong>嵌入到当前文档中</strong>。例如，<code>&lt;img src=&quot;image.jpg&quot;&gt;</code>会将名为&quot;image.jpg&quot;的图像嵌入到当前文档中。</li><li><code>href</code>属性用于指定链接到的文档或资源的路径。例如，<code>&lt;a href=&quot;page.html&quot;&gt;</code>会创建一个链接，点击该链接将导航到名为&quot;page.html&quot;的文档。</li></ul></li><li>对页面加载的影响： <ul><li>当浏览器解析到带有<code>src</code>属性的元素时，它会立即开始加载和显示该资源。如果<code>src</code>引用的资源很大，可能会影响页面加载时间。</li><li>对于带有<code>href</code>属性的元素，浏览器会将链接放置在文档中，但不会立即加载和显示链接的内容。用户点击链接时，浏览器才会根据<code>href</code>属性加载相应的文档或资源。</li></ul></li></ol><blockquote><p>核心: 一个是并行加载资源, 而 src 是暂停当前程序运行知道加载资源完毕再开始继续程序.</p></blockquote><h3 id="_2-盒子模型" tabindex="-1"><a class="header-anchor" href="#_2-盒子模型" aria-hidden="true">#</a> 2, 盒子模型</h3><p>概念:</p><blockquote><p>CSS定义所有的元素都可以拥有像盒子一样的外形和平面空间, 包括内容区, 内边距, 边框, 外边距 (也就是 content, padding, border, margin)</p></blockquote><p>分类:</p><ul><li>IE盒模型(怪异盒模型)</li><li>标准和模型</li></ul><p><strong>区别:</strong></p><ol><li>IE盒模型： <ul><li>在IE盒模型中，盒子的宽度（width）和高度（height）包括了内容（content）、内边距（padding）和边框（border）的尺寸。</li><li>公式：总宽度 = 内容宽度 + 左内边距 + 右内边距 + 左边框 + 右边框，总高度 = 内容高度 + 上内边距 + 下内边距 + 上边框 + 下边框。</li><li>当设置元素的宽度和高度时，实际显示的宽度和高度会减去内边距和边框的尺寸，内容会被压缩在这个减去内边距和边框的空间内。</li></ul></li><li>标准盒模型： <ul><li>在标准盒模型中，盒子的宽度（width）和高度（height）只包括了内容（content）的尺寸，不包括内边距（padding）和边框（border）。</li><li>公式：总宽度 = 内容宽度，总高度 = 内容高度。</li><li>当设置元素的宽度和高度时，实际显示的宽度和高度会包括内边距和边框的尺寸，内容会被限制在这个包括内边距和边框的空间内。</li></ul></li></ol><h3 id="_3-页面元素水平居中的几种方式" tabindex="-1"><a class="header-anchor" href="#_3-页面元素水平居中的几种方式" aria-hidden="true">#</a> 3, 页面元素水平居中的几种方式</h3><ol><li>块元素外边距auto 自动居中</li><li>内联元素text-align 文本居中</li><li>flex 布局居中方式</li><li>transform 移动, position 绝对定位居中的方式</li></ol><p><img src="' + _imports_2 + '" alt="image-20240106202530804"></p><h3 id="_4-css-的优先级和权重" tabindex="-1"><a class="header-anchor" href="#_4-css-的优先级和权重" aria-hidden="true">#</a> 4, CSS 的优先级和权重</h3><p><strong>优先级</strong></p><p>!important &gt; 行内样式 &gt; #id &gt; class &gt; 派生选择器 &gt; 群组选择器 &gt; *</p><p><strong>权重</strong></p><p>行内样式 &gt; id选择器 &gt; class选择器 &gt; 标签选择器 &gt; 通用下选择器(通配符* )</p><p>对应的权重 1000 &gt; 100 &gt; 10 &gt; 1 &gt; 0s</p><p>!important权重无穷大</p><h3 id="_5-link标签和-import-的区别" tabindex="-1"><a class="header-anchor" href="#_5-link标签和-import-的区别" aria-hidden="true">#</a> 5, link标签和@import 的区别</h3><p><img src="' + _imports_3 + '" alt="image-20240106203757621"></p><p>区别:</p><ol><li>语法的区别 <ol><li><code>&lt;link&gt;</code>是HTML标签，用于在HTML文档中引入外部样式表。它被<strong>放置在<code>&lt;head&gt;</code>标签内</strong>，并使用<code>rel</code>属性指定样式表的关系类型为<code>stylesheet</code>，并使用<code>href</code>属性指定样式表文件的路径。</li><li><code>@import</code>是CSS规则，用于在一个CSS文件中引入另一个CSS文件。它被放置在<strong>CSS文件的顶部</strong>，并使用<code>@import</code>关键字，后跟被引入的CSS文件的路径。</li></ol></li><li>加载顺序 <ol><li><code>&lt;link&gt;</code>标签会在页面加载时同时加载外部样式表，与HTML文档的<strong>加载顺序相同</strong>。这使得样式表可以在页面加载过程中并行加载，从而提高页面加载性能。</li><li><code>@import</code>规则会在CSS文件加载时才开始加载被引入的CSS文件。这意味着在加载主CSS文件时，需要<strong>等待</strong>被引入的CSS文件加载完毕才能继续解析样式。</li></ol></li><li>兼容性 <ol><li><code>&lt;link&gt;</code>标签是HTML标准的一部分，几乎所有的浏览器都支持它。</li><li><code>@import</code>规则是<strong>CSS2.1</strong>引入的，较旧的浏览器可能不支持它，尤其是在IE6和IE7中的行为不一致。然而，现代浏览器已经广泛支持<code>@import</code>。</li></ol></li><li>限制 <ol><li><code>&lt;link&gt;</code>标签可以用于引入其他类型的资源，如图标（<code>rel=&quot;icon&quot;</code>）和网站预渲染（<code>rel=&quot;prerender&quot;</code>）等。</li><li><code>@import</code>规则只能用于引入其他CSS文件，不能用于引入其他类型的资源。</li></ol></li></ol><h3 id="_6-如何理解-cssom是怎么理解的" tabindex="-1"><a class="header-anchor" href="#_6-如何理解-cssom是怎么理解的" aria-hidden="true">#</a> 6, 如何理解 CSSOM是怎么理解的</h3><p><img src="' + _imports_4 + '" alt="image-20240106204325813"></p><p>View 部分:</p><ul><li>窗口部分</li><li>滚动部分</li><li>布局部分</li></ul><p><img src="' + _imports_5 + '" alt="image-20240106210855414"></p><h3 id="_7-对边界塌陷的理解" tabindex="-1"><a class="header-anchor" href="#_7-对边界塌陷的理解" aria-hidden="true">#</a> 7, 对边界塌陷的理解</h3><p>常见于页面的布局问题</p><p><img src="' + _imports_6 + '" alt="image-20240106212526929"></p><p>子元素这是margin, 导致子父元素同时生效, 这时候造成了边界塌陷</p><p>解决方法:</p><ol><li>给父元素设置border</li><li>父元素添加属性 overflow: hidden (<strong>触发BFC机制</strong>);</li><li>父元素和子元素添加浮动, 脱离标准文档流(俗称 <strong>脱标</strong>)</li><li>父元素添加padding-top控制子元素</li><li>给父元素转变为行内块元素, display: inline-block;</li></ol><h3 id="_8-什么是-bfc" tabindex="-1"><a class="header-anchor" href="#_8-什么是-bfc" aria-hidden="true">#</a> 8, 什么是 BFC</h3><p>场景: 页面布局</p><p>概念和原理</p><p><img src="' + _imports_7 + '" alt="image-20240106213430673"></p><p>产生条件和作用</p><p><img src="' + _imports_8 + '" alt="image-20240106213515591"></p><h3 id="_9-语义化标签" tabindex="-1"><a class="header-anchor" href="#_9-语义化标签" aria-hidden="true">#</a> 9, 语义化标签</h3><blockquote><p>具有含义的标签, 最简单的见名知意具有代码可读性, 和SEO的优化</p></blockquote><p><img src="' + _imports_9 + '" alt="image-20240106213611395"></p><h3 id="_10-渐进增强和优雅降级的理解" tabindex="-1"><a class="header-anchor" href="#_10-渐进增强和优雅降级的理解" aria-hidden="true">#</a> 10, 渐进增强和优雅降级的理解</h3><p><img src="' + _imports_10 + '" alt="image-20240106215402649"></p><h3 id="_11-响应式布局时如何理解的" tabindex="-1"><a class="header-anchor" href="#_11-响应式布局时如何理解的" aria-hidden="true">#</a> 11, 响应式布局时如何理解的?</h3><p><img src="' + _imports_11 + '" alt="image-20240106220229169"></p><blockquote><p>响应式的最终目的也是为了适配</p></blockquote><p>布局:</p><ul><li>流式布局 (百分比布局)</li><li>栅格系统 grid</li><li>媒体查询 @media</li><li>viewport</li></ul><p><strong>优点和缺点</strong></p><p><img src="' + _imports_12 + '" alt="image-20240106220440851"></p><h3 id="_12-h5的新特性有哪些" tabindex="-1"><a class="header-anchor" href="#_12-h5的新特性有哪些" aria-hidden="true">#</a> 12, H5的新特性有哪些</h3><ol><li>拖拽释放 API</li><li>语义化标签</li><li>音频视频 API</li><li>Canvas 标签</li><li>Geolocation API</li><li>localStorage 和 sessionStorage 缓存方式</li><li>表单控件</li></ol><h3 id="_13-localstorage-和-sessionstorage-的区别" tabindex="-1"><a class="header-anchor" href="#_13-localstorage-和-sessionstorage-的区别" aria-hidden="true">#</a> 13, localStorage 和 sessionStorage 的区别</h3><p>对数据存储的理解</p><p>相同点和不同点</p><p><img src="' + _imports_13 + '" alt="image-20240106220843040"></p><blockquote><p>注意: 不同浏览器之间无法共享数据信息</p></blockquote><h1 id="计算机原理篇" tabindex="-1"><a class="header-anchor" href="#计算机原理篇" aria-hidden="true">#</a> 计算机原理篇</h1><hr><h1 id="网络篇" tabindex="-1"><a class="header-anchor" href="#网络篇" aria-hidden="true">#</a> 网络篇</h1><hr><h3 id="_1-http-dns-https-工作在网络osi模型中的那一层" tabindex="-1"><a class="header-anchor" href="#_1-http-dns-https-工作在网络osi模型中的那一层" aria-hidden="true">#</a> 1, HTTP DNS HTTPS 工作在网络OSI模型中的那一层?</h3><p>应用层</p><h3 id="_2-url-的解析过程" tabindex="-1"><a class="header-anchor" href="#_2-url-的解析过程" aria-hidden="true">#</a> 2, url 的解析过程</h3><h3 id="_3-浏览器输入url发生了什么" tabindex="-1"><a class="header-anchor" href="#_3-浏览器输入url发生了什么" aria-hidden="true">#</a> 3, 浏览器输入url发生了什么</h3><h1 id="移动端篇" tabindex="-1"><a class="header-anchor" href="#移动端篇" aria-hidden="true">#</a> 移动端篇</h1><hr><h3 id="_1-你是如何做适配的" tabindex="-1"><a class="header-anchor" href="#_1-你是如何做适配的" aria-hidden="true">#</a> 1, 你是如何做适配的</h3><p>自适应和响应式的概念:</p><ul><li>自适应: 根据不同的设备屏幕大小来自动调整尺寸, 大小</li><li>响应式: 会随着屏幕的实时变动而自动调整, 是一种自适应.</li></ul><p>常见的适配方案 (4种)</p><ul><li>百分比布局</li><li>rem + 动态 font-size</li><li>flex布局</li><li>Vw</li></ul><blockquote><p>一般在项目中, 这几种适配方式都是组合使用的, 这就是我对适配的理解</p></blockquote><h1 id="浏览器篇" tabindex="-1"><a class="header-anchor" href="#浏览器篇" aria-hidden="true">#</a> 浏览器篇</h1><hr><h3 id="_1-浏览器的内核" tabindex="-1"><a class="header-anchor" href="#_1-浏览器的内核" aria-hidden="true">#</a> 1, 浏览器的内核</h3><p>作用:</p><blockquote><p>它也称为 &#39;渲染引擎&#39; , 用来解释网页语法并渲染到网页上, 浏览器内核决定了浏览器该如何显示网页内容以及页面的格式信息</p></blockquote><p>常见的浏览器内核:</p><ul><li>IE浏览器内核</li><li>Chrome</li><li>Firefox</li><li>Safari</li><li>Opera</li></ul><p><img src="' + _imports_14 + '" alt="image-20240106203238698"></p><h3 id="_2-常见的兼容性问题有哪些" tabindex="-1"><a class="header-anchor" href="#_2-常见的兼容性问题有哪些" aria-hidden="true">#</a> 2, 常见的兼容性问题有哪些?</h3><p>浏览器兼容问题产生的原因:</p><blockquote><p>因为不同浏览器使用内核以及所支持的HTML等网页语言标准不同, 以及用户客户端的环境不同 (分辨率不同) 造成的显示达不到理想的效果, 一般兼容问题主要解决的是 ie6, 7 ,8 的问题</p></blockquote><p>常见的兼容性的问题:</p><p><img src="' + _imports_15 + '" alt="image-20240106203548664"></p><h1 id="javascript-篇" tabindex="-1"><a class="header-anchor" href="#javascript-篇" aria-hidden="true">#</a> JavaScript 篇</h1><hr><h2 id="一-基本" tabindex="-1"><a class="header-anchor" href="#一-基本" aria-hidden="true">#</a> 一, 基本</h2><h3 id="_1-基本类型" tabindex="-1"><a class="header-anchor" href="#_1-基本类型" aria-hidden="true">#</a> 1, 基本类型</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>基本类型：\n        1）number\n        2）string\n        3）boolean\n        4）null\n        5）undefiend\n        6）symbol\n\n        引用类型：\n        1）数组\n        2）对象\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的数据类型</p><p><strong>ES5</strong></p><ul><li>基本类型 Number String Boolean undefined Null</li><li>引用类型 Object Function Array</li></ul><p><strong>ES6</strong></p><ul><li>Symbol</li><li>谷歌新版本 Bigint , 指安全存储, 操作大整数</li></ul><p>null 的 undefined 的区别:</p><ul><li>undefined 表示声明了, 但是没有使用</li><li>null 表示声明的是一个空类型</li></ul><h3 id="_2-null-的类型" tabindex="-1"><a class="header-anchor" href="#_2-null-的类型" aria-hidden="true">#</a> 2, null 的类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\n\n <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// object</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token comment">// false</span>\n <span class="token comment">// null只有和undefined相等, 但是不是全等</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-判断两个对象是否相等" tabindex="-1"><a class="header-anchor" href="#_3-判断两个对象是否相等" aria-hidden="true">#</a> 3, 判断两个对象是否相等 ?</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token keyword">function</span> <span class="token function">compareObjects</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> keys1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys1<span class="token punctuation">)</span> <span class="token comment">// 获取所有的键名, 返回一个数组[&#39;a&#39;, &#39;b&#39;]</span>\n        <span class="token keyword">const</span> keys2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\n        <span class="token comment">// 判断长度</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>keys1<span class="token punctuation">.</span>length <span class="token operator">!==</span> keys2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> keys1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 遍历值是否相等</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n      <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compareObjects</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-函数和匿名函数" tabindex="-1"><a class="header-anchor" href="#_4-函数和匿名函数" aria-hidden="true">#</a> 4, 函数和匿名函数</h3><p>函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匿名函数表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匿名函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IIFE</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;IIFE executed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结</p><blockquote><p>无论是具名函数还是匿名函数，它们都可以在需要时被调用，可以接受参数，执行相应的任务，并返回结果。匿名函数通常用于临时的、一次性的场景，而具名函数则可以在代码中重复使用。</p></blockquote><h3 id="_5-i-和-i" tabindex="-1"><a class="header-anchor" href="#_5-i-和-i" aria-hidden="true">#</a> 5, i++ 和 ++i</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>++在前，整体是新值\n++在后，整体是旧值\ni的值都要加1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-a标签点击下载的方式" tabindex="-1"><a class="header-anchor" href="#_6-a标签点击下载的方式" aria-hidden="true">#</a> 6, a标签点击下载的方式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  1)a.download 当指定 a 标签的 download 属性时，点击该链接会直接保存为⽂件，⽂件名为download 属性\n  \n  2)通过对 a 标签指定的 URL 在服务器设置响应头 Content-Disposition: attachment;filename=&quot;filename.jpg&quot; 可直接下载 \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-preload和prefetch的应用场景" tabindex="-1"><a class="header-anchor" href="#_7-preload和prefetch的应用场景" aria-hidden="true">#</a> 7, preload和prefetch的应⽤场景？</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>webpack优化之preload和prefetch：\n1)单⻚⾯应⽤由于⻚⾯过多，可能会导致代码体积过⼤，从⽽使得⾸⻚打开速度过慢。所以切分代码，优化⾸屏打开速度尤为重要。\n2)但是所有的技术⼿段都不是完美的。当我们切割代码后，⾸屏的js⽂件体积减少了好多。但是也有⼀个突出的问题：\n3)那就是当跳转其他⻚⾯的时候，需要下载相应⻚⾯的js⽂件，这就导致体验极其不好，每⼀次点击访问新⻚⾯都要等待js⽂件下载，然后再去请求接⼝获取数据。频繁出现loading动画的体验真的不好\n4)所以如果我们在进⼊⾸⻚后，在浏览器的空闲时间提前下好⽤户可能会点击⻚⾯的js⽂件，这样⾸屏的js⽂件⼤⼩得到了控制，⽽且再点击新⻚⾯的时候，相关的js⽂件已经下载好了，就不再会出现loading动画。\n\n动态引⼊js⽂件，实现code-splitting，减少⾸屏打开时间\n1)按引⼊情况加载，只需添加注释即可\n2)代码分割注释：/webpackChunkName: &#39;mp-supports&#39;/\n3)prefetch注释：/* webpackPrefetch: true */\n4)更多的，可以查看 webpack 注释⿊魔法：https://webpack.js.org/api/module-methods/#magic-comments\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-dom-中-element-与-node-有何区别" tabindex="-1"><a class="header-anchor" href="#_8-dom-中-element-与-node-有何区别" aria-hidden="true">#</a> 8. DOM 中 Element 与 Node 有何区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Element 继承于 Node，具有 Node 的⽅法，同时⼜拓展了很多⾃⼰的特有⽅法。\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-this的绑定规则" tabindex="-1"><a class="header-anchor" href="#_9-this的绑定规则" aria-hidden="true">#</a> 9, this的绑定规则</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>默认绑定：独⽴函数调⽤，函数没有被绑定到某个对象上进⾏调⽤\n隐式绑定：通过某个对象发起的函数调⽤，在调⽤对象内部有⼀个对函数的引⽤。\n显式绑定：明确this指向的对象，第⼀个参数相同并要求传⼊⼀个对象。\nnew绑定：\n1）创建⼀个全新对象\n2）新对象被执⾏prototype链接\n3）新对象绑定到函数调⽤的this\n4）如果函数没有返回其他对象，表达式会返回这个对象\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-如何实现⻚面文本不可复制" tabindex="-1"><a class="header-anchor" href="#_11-如何实现⻚面文本不可复制" aria-hidden="true">#</a> 11. 如何实现⻚⾯⽂本不可复制</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>有 CSS 和 JS 两种⽅法，以下任选其⼀或结合使⽤\n1)使⽤ CSS 如下：user-select: none;\n2)使⽤ JS 如下，监听 selectstart 事件，禁⽌选中。当⽤户选中⼀⽚区域时，将触发 selectstart 事件，Selection API 将会选中⼀⽚区域。禁⽌选中区域即可实现⻚⾯⽂本不可复制。\n\ndocument.body.onselectstart = (e) =&gt; {  e.preventDefault(); };\ndocument.body.oncopy = (e) =&gt; {  e.preventDefault();};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-常用数组操作方法" tabindex="-1"><a class="header-anchor" href="#_12-常用数组操作方法" aria-hidden="true">#</a> 12, 常用数组操作方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>常见的数组操作方法：\n\npush()：向数组末尾添加一个或多个元素，并返回新数组的长度。\npop()：删除并返回数组的最后一个元素。\nshift()：删除并返回数组的第一个元素。\nunshift()：向数组开头添加一个或多个元素，并返回新数组的长度。\nconcat()：合并两个或多个数组，并返回一个新数组。\nslice()：从原数组中提取指定范围的元素，并返回一个新数组。\nsplice()：删除、替换或插入元素到数组的指定位置。\njoin()：将数组的所有元素连接成一个字符串。\nindexOf()：返回指定元素在数组中的第一个匹配位置的索引。\nlastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_16 + '" alt="image-20240106222126035"></p><blockquote><p>对于es5 和 es6 的方法至少清除五个以上</p></blockquote><p><strong>遍历和转换数组的方法</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用于遍历和转换数组的方法：\n\nforEach()：对数组的每个元素执行指定的操作。\nmap()：对数组的每个元素执行指定的操作，并返回一个新数组。\nfilter()：根据指定条件筛选数组的元素，并返回一个新数组。\nreduce()：对数组的每个元素执行指定的累积操作，返回一个累积结果。\nsort()：对数组的元素进行排序。\nreverse()：颠倒数组中元素的顺序。\nsome()：检测数组中是否至少有一个元素满足指定条件。\nevery()：检测数组中的所有元素是否都满足指定条件。\nfind()：返回数组中满足指定条件的第一个元素。\nfindIndex()：返回数组中满足指定条件的第一个元素的索引。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-说出对dom和document对象的理解" tabindex="-1"><a class="header-anchor" href="#_13-说出对dom和document对象的理解" aria-hidden="true">#</a> 13, 说出对DOM和document对象的理解</h3><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DOM:⽂档对象模型(Document Object Model)将⻚⾯所有的内容表示为可以修改的对象\n1)浏览器将我们编写在HTML中的每⼀个元素(Element)都抽象成了⼀个个对象\n2)所有这些对象都可以通过JavaScript来对其进⾏访问，那么我们就可以通过JavaScript来操作⻚⾯;\n3)所以，我们将这个抽象过程称之为 ⽂档对象模型(Document Object Model)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Document节点表示的整个载⼊的⽹⻚，它的实例是全局的document对象:\n1)对DOM的所有操作都是从 document 对象开始的\n2)它是DOM的⼊⼝点，可以从document开始去访问任何节点元素;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>DOM 文档对象模型</strong></p><blockquote><p>DOM是一种表示HTML或XML文档的树状结构。<strong>它将文档中的每个元素、属性、文本和其他内容都表示为对象</strong>，开发者可以使用这些对象来操作和修改文档的结构、内容和样式。</p></blockquote><p><code>document</code>对象<strong>是DOM的一部分</strong>，<strong>它代表整个文档</strong>。通过<code>document</code>对象，开发者可以访问和操作文档中的元素、属性、文本等内容。<code>document</code>对象提供了许多方法和属性，使开发者能够查询和修改文档的各个部分。</p><p><code>document</code>对象，您可以执行以下操作：</p><ul><li><strong>查询和选择元素</strong>：使用<code>document.getElementById()</code>、<code>document.getElementsByClassName()</code>、<code>document.getElementsByTagName()</code>等方法来获取文档中的特定元素。</li><li><strong>修改元素内容和属性</strong>：使用<code>document.createElement()</code>、<code>element.innerHTML</code>、<code>element.setAttribute()</code>等方法来创建、修改和删除元素的内容和属性。</li><li><strong>操作文档结构</strong>：使用<code>document.createElement()</code>、<code>element.appendChild()</code>、<code>element.removeChild()</code>等方法来创建、添加和删除元素。</li><li><strong>处理事件</strong>：使用<code>element.addEventListener()</code>方法来添加事件监听器，响应用户的交互行为。</li><li><strong>获取和修改文档信息</strong>：通过<code>document.title</code>、<code>document.URL</code>、<code>document.head</code>等属性来访问和修改文档的信息。</li></ul><p><strong>对 DOM 操作的理解</strong></p><p><strong>DOM 的常用操作方法</strong></p><p><img src="' + _imports_17 + '" alt="image-20240107231704539"></p><p>增加节点和删除节点</p><p><img src="' + _imports_18 + '" alt="image-20240107231714806"></p><p><img src="' + _imports_19 + '" alt="image-20240107231448297"></p><h3 id="_14-for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#_14-for-in-和-for-of-的区别" aria-hidden="true">#</a> 14, for in 和 for of 的区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在JavaScript中遍历数组通常是使⽤for...i循环，\n在ES5具有遍历数组功能的还有forEach、map、ﬁlter、some、every、reduce、reduceRight等。\nfor...in和for...of是两种增强型循环，\nfor...in是ES5标准，在ES6中新增了for...of的循环⽅式。\n\nfor...in ：遍历以任意顺序迭代⼀个对象的除Symbol以外的可枚举属性，包括继承的可枚举属性。\nfor...of：遍历在可迭代对象，包括 Array ， Map ， Set ， String ， TypedArray ，arguments 对象等等\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>区别：</strong></p><p>1）for...in可以遍历对象和数组，for...of不能遍历对象</p><p>2）for...in 循环不仅遍历对象的键名，还会遍历⼿动添加的其它键，甚⾄包括原型链上的键</p><p>3）for...in遍历的索引为字符串类型</p><p>4）for..of适⽤遍历数/数组对象/字符串/map/set等拥有迭代器对象的集合，但是不能遍历对象</p><p>5）for...of与forEach()不同的是，它可以正确响应break、continue和return语句</p><p>6）具有迭代器对象才可以使⽤for...of</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n      <span class="token comment">// ---------------------------</span>\n      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 0,1,2,3,4</span>\n      <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-纯函数是什么-如何写纯函数" tabindex="-1"><a class="header-anchor" href="#_15-纯函数是什么-如何写纯函数" aria-hidden="true">#</a> 15, 纯函数是什么? 如何写纯函数</h3><blockquote><p>React 中具有这个概念</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>纯函数：纯函数⼀般具有以下的特点：\n1）确定的输⼊⼀定会有确定的输出（外部环境的任何变化不会影响函数内部的操作产⽣的结果）\n2）纯函数的执⾏不会产⽣副作⽤。（函数内部的操作也不会对函数外部产⽣任何影响）\n\n纯函数在react和redux中应⽤⽐较多。编写纯函数：\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-什么是迭代器对象" tabindex="-1"><a class="header-anchor" href="#_16-什么是迭代器对象" aria-hidden="true">#</a> 16, 什么是迭代器对象</h3><blockquote><p>迭代器对象（Iterator object）是一种<strong>提供迭代（遍历）数据集合的机制的对象</strong>。它定义了一种方式来按顺序访问集合中的元素，逐个返回元素的值。</p></blockquote><p>迭代器对象通常包含两个重要的方法：</p><ol><li><code>next()</code> 方法：该方法返回一个包含两个属性的对象，即 <code>{ value, done }</code>。<code>value</code> 表示当前迭代的值，<code>done</code> 表示迭代器是否已经完成遍历，如果还有更多值可供迭代，则为 <code>false</code>，否则为 <code>true</code>。</li><li><code>Symbol.iterator</code> 方法：该方法返回迭代器对象本身。这使得迭代器对象可以通过 <code>for...of</code> 循环或使用 <code>...</code> 运算符进行迭代。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n      <span class="token comment">// 数组的 Symbol.iterator 方法获取迭代器对象</span>\n      <span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span>\n\n		  <span class="token comment">// next() 方法逐个访问数组的元素</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token comment">// 迭代完毕</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 最后一次调用 next() 返回的 done 属性为 true，表示迭代器已经完成遍历。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-js严格模式的理解" tabindex="-1"><a class="header-anchor" href="#_17-js严格模式的理解" aria-hidden="true">#</a> 17, JS严格模式的理解</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>严格模式是⼀种JavaScript的限制模式，因为种种历史原因，JavaScript语⾔在⾮严格模式下是⽐较松散的。在JavaScript不断优化和加⼊新特性的过程中，为了兼容早期的JavaScript，⼀些错误和不规范的写法也被保留了下来。这些错误也不会被抛出。在开启了严格模式后，js引擎会以⼀种更严格的规范执⾏JavaScript代码，⼀些不规范的写法和错误也会直接抛出。\n\n1)对⽂件开启：在⽂件的开头写上&quot;use strict&quot;\n2)对函数开启：在函数的开头写上&quot;use strict&quot;\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>严格模式下的语法限制：</p><blockquote><p>1)不允许意外创建全局变量（不写var、let、const这种声明变量的关键字） 2)会对静默失败的赋值操作抛出异常 3)试图删除不可删除的属性 4)不允许函数参数有相同的名称 5)不允许只有0开头的⼋进制语法 6)不允许使⽤with 7)⽆法获取eval中定义的变量 8)this绑定不会默认转成对象</p></blockquote><h3 id="_18-浏览器的内核" tabindex="-1"><a class="header-anchor" href="#_18-浏览器的内核" aria-hidden="true">#</a> 18, 浏览器的内核</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>浏览器内核⼜称浏览器渲染引擎，是浏览器的最核⼼部分。负责解析⽹⻚语法并渲染⽹⻚。\n\n常⻅的浏览器内核有：\n1)trident（三叉戟）---- IE浏览器、360安全浏览器、UC浏览器、搜狗⾼速浏览器、百度浏览器\n2)gecko（壁⻁） ---- Mozilla、Firefox\n3)pestro -&gt; Blink ---- Opera\n4)Webkit ---- Safari、360极速浏览器、搜狗⾼速浏览器、移动端浏览器\n5)Webkit -&gt; Blink ----Chrome、Edge\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-输入一个url到⻚面显示的过程" tabindex="-1"><a class="header-anchor" href="#_19-输入一个url到⻚面显示的过程" aria-hidden="true">#</a> 19, 输⼊⼀个URL到⻚⾯显示的过程</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>URL 输⼊:\n1)检查输⼊的内容是否是⼀个合法的 URL 链\n2)判断输⼊的 URL 是否完整, 如果不完整，浏览器可能会对域进⾏猜测，补全前缀或者后缀\n3)使⽤⽤户设置的默认搜索引擎来进⾏搜索\n\nDNS 解析:\n1)浏览器不能直接通过域名找到对应的服务器 IP 地址\n2)所以需要进⾏ DNS 解析，查找到对应的 IP 地址进⾏访问。\n\n建⽴ TCP 连接：\n1)三次握手\n\n发送 HTTP / HTTPS 请求（建⽴ TLS 连接）：\n1）向服务器 发起 TCP 连接请求\n2）当这个请求到达服务端后，通过 TCP 三次握⼿，建⽴ TCP 的连接。\n\n服务器响应请求：\n1）当浏览器到 web 服务器的连接建⽴后，浏览器会发送⼀个初始的 HTTP GET 请求，请求⽬标通常是⼀个 HTML ⽂件。服务器收到请求后，将发回⼀个 HTTP 响应报⽂，内容包括相关响应头和 HTML 正⽂。\n\n浏览器解析渲染⻚⾯：\n1）处理 HTML 标记并构建 DOM 树。\n2）处理 CSS 标记并构建 CSSOM 树。\n3）将 DOM 与 CSSOM 合并成⼀个渲染树\n4）根据渲染树来布局，以计算每个节点的⼏何信息。\n5）将各个节点绘制到屏幕上。\n\nHTTP 请求结束，断开 TCP 连接\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-进程和线程的区别和关系" tabindex="-1"><a class="header-anchor" href="#_20-进程和线程的区别和关系" aria-hidden="true">#</a> 20, 进程和线程的区别和关系</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>进程：\n1）是 cpu 分配资源的最⼩单位；（是能拥有资源和ᇿ⽴运⾏的最⼩单位）\n2）计算机已经运⾏的程序，是操作系统管理程序的⼀种⽅式 (官⽅说法)\n3）可以认为启动⼀个应⽤程序，就会默认启动⼀个进程（也可能是多个进程）(个⼈解释)\n4）也可以说进程是线程的容器\n\n线程：\n1）是 cpu 调度的最⼩单位；（线程是建⽴在进程的基础上的⼀次程序运⾏单位，⼀个进程中可以有多个线程）\n2）操作系统能够运⾏运算调度的最⼩单位，通常情况下它被包含在进程中 (官⽅说法)\n3）每⼀个进程中，都会启动⾄少⼀个线程⽤来执⾏程序中的代码，这个线程被称之为主线程\n\n操作系统如何做到同时让多个进程同时⼯作?\n1）因为 CPU 的运算速度⾮常快, 可以快速的在多个进程之间迅速的切换\n2）当进程中的线程获取到世间⽚时, 就可以快速执⾏我们编写的代码\n3）由于 CPU 执⾏速度过于变态, 对于⽤户来说是感受不到这种快速切换的\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-javascript为什么是单线程" tabindex="-1"><a class="header-anchor" href="#_21-javascript为什么是单线程" aria-hidden="true">#</a> 21, JavaScript为什么是单线程</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1）这主要和js的⽤途有关，js是作为浏览器的脚本语⾔，主要是实现⽤户与浏览器的交互，以及操作dom\n2）这决定了它只能是单线程，否则会带来很复杂的同步问题。\n3）⽐如js被设计了多线程，如果有⼀个线程要修改⼀个dom元素，另⼀个线程要删除这个dom元素，此时浏览器就会⼀脸茫然，不知所措。\n4）所以，为了避免复杂性，从⼀诞⽣，JavaScript就是单线程，这已经成了这⻔语⾔的核⼼特征，将来也不会改变\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-常见的节点属性" tabindex="-1"><a class="header-anchor" href="#_22-常见的节点属性" aria-hidden="true">#</a> 22, 常见的节点属性</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nodeType:\n1)获取节点的类型\n2)⽐如 注释节点8 ⽂本节点3 元素节点1\n\ntagName:\n1)获取元素的标签名词 仅适⽤于Element节点\n\nnodeName:\n1)获取元素的标签名词 适⽤于任何Node节点\n\ninnerHTML,textContent:\n1)前者将元素中的HTML获取为字符串属性 后者仅仅获取⽂本内容\n\nouterHTML:\n1)包含了完整的HTML\n2)相当于innerHTML加上元素本身\n\nnodeValue/data:\n1)获取⾮元素节点的⽂本内容\n\nhidden:\n1)⽤于设置元素隐藏(全局属性)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-说说load和domcontentloaded的区别" tabindex="-1"><a class="header-anchor" href="#_23-说说load和domcontentloaded的区别" aria-hidden="true">#</a> 23. 说说load和DOMContentLoaded的区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>load:\n1)浏览器加载完所有的HTML 还加载完所有的外部资源 样式 图⽚等\n\nDOMContentLoaded:\n1)HTML⽂档所有资源都加载完成 并构建了DOM树 但是⼀些外部资源还没有加载完成 如图⽚的src\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_24-浏览器是多进程的" tabindex="-1"><a class="header-anchor" href="#_24-浏览器是多进程的" aria-hidden="true">#</a> 24, 浏览器是多进程的?</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1）在浏览器中，每打开⼀个tab⻚⾯，其实就是新开了⼀个进程，在这个进程中，还有ui渲染线程，js引擎线程，http请求线程等。\n\n2）因此浏览器是⼀个多进程的。为了利⽤多核CPU的计算能⼒，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是⼦线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>浏览器是⼀个多进程, 但是 JS 仍然是单线程的</p></blockquote><h3 id="_25-解释重绘和重排-如何减少重排" tabindex="-1"><a class="header-anchor" href="#_25-解释重绘和重排-如何减少重排" aria-hidden="true">#</a> 25, 解释重绘和重排, 如何减少重排?</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>重排(Reﬂow)：\n1）元素的位置发⽣变动时发⽣重排，也叫回流。此时在关键渲染路径中的 Layout 阶段，计算每⼀个元素在设备视⼝内的确切位置和⼤⼩。当⼀个元素位置发⽣变化时，其⽗元素及其后边的元素位置都可能发⽣变化，代价极⾼。\n\n重绘(Repaint):\n1）元素的样式发⽣变动，但是位置没有改变。此时在关键渲染路径中的 Paint 阶段，将渲染树中的每个节点转换成屏幕上的实际像素，这⼀步通常称为绘制或栅格化\n\n另外，重排必定会造成重绘。以下是避免过多重排重绘的⽅法：\n1）使⽤ DocumentFragment 进⾏ DOM 操作，不过现在原⽣操作很少也基本上⽤不到\n2）CSS 样式尽量批量修改\n3）避免使⽤ table 布局\n4）为元素提前设置好⾼宽，不因多次渲染改变位置\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-json-的相关用法和应用场景" tabindex="-1"><a class="header-anchor" href="#_26-json-的相关用法和应用场景" aria-hidden="true">#</a> 26, JSON 的相关用法和应用场景</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>三种⽤法:\n1)简单值: 数字 字符串 布尔类型\n2)对象值 key value组成 必须添加双引号 value 可以是简单值 对象值 数组值\n3)数组值 内容可以是对象值 简单值 数组值\n\n应⽤场景:\n1)⽹络传输的JSON数据\n2)项⽬的某些配置⽂件\n3)⾮关系型数据库将JSON作为存储⽂件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_27-es6-增加了哪些知识点" tabindex="-1"><a class="header-anchor" href="#_27-es6-增加了哪些知识点" aria-hidden="true">#</a> 27, ES6 + 增加了哪些知识点</h3><h3 id="_28-说说事件冒泡和事件捕获的理解" tabindex="-1"><a class="header-anchor" href="#_28-说说事件冒泡和事件捕获的理解" aria-hidden="true">#</a> 28, 说说事件冒泡和事件捕获的理解?</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>事件冒泡:\n1)从最内层的元素向外依次传递的顺序, 默认是事件冒泡\n\n事件捕获:\n1)从外层到内层依次传递的顺序 ,可以通过addEventListener(&quot;click&quot;,fn,true) 监听事件捕获\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_29-说说什么是reflect和为什么需要使用它" tabindex="-1"><a class="header-anchor" href="#_29-说说什么是reflect和为什么需要使用它" aria-hidden="true">#</a> 29, 说说什么是Reﬂect和为什么需要使⽤它</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>什么是Reﬂect:\n1）Reﬂect是⼀个对象，提供了多种⽅法⽅便我们统⼀管理对象。\n2）Reﬂect 是⼀个内置的对象，它提供拦截 JavaScript 操作的⽅法。这些⽅法与proxy handlers (enUS)的⽅法相同。\n3）与⼤多数全局对象不同 Reflect 并⾮⼀个构造函数，所以不能通过new 运算符对其进⾏调⽤，或者将 Reflect 对象作为⼀个函数来调⽤。\n4）Reflect 的所有属性和⽅法都是静态的（就像 Math 对象）。\n\n为什么需要使⽤Reﬂect：\n1）在对对象进⾏操作时有些⽅法会有返回值，操作对象变的更加规范\n2）Object作为构造函数，操作对象的⽅法放在它身上不是很合适,早期的设计不规范导致的。\n3）在使⽤Proxy监听对象时，⽤Reﬂect来操作对象避免了对原对象的直接操作。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-介绍下set-和-map-的区别" tabindex="-1"><a class="header-anchor" href="#_30-介绍下set-和-map-的区别" aria-hidden="true">#</a> 30, 介绍下Set 和 Map 的区别</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Set\n    成员不能重复\n    只有键值没有键名，类似数组\n    可以遍历，方法有add, delete,has\nMap\n    本质上是健值对的集合，类似集合\n    可以遍历，可以跟各种数据格式转换\n\n应用场景：Set用于数据重组，Map用于数据储存\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-你对事件委托的理解" tabindex="-1"><a class="header-anchor" href="#_31-你对事件委托的理解" aria-hidden="true">#</a> 31, 你对事件委托的理解?</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>利⽤事件的冒泡机制，以及事件对象中可以准确获知触发事件的元素机制(e.target)，将⼦元素事件委托给⽗元素处理的现象。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_32-什么是事件委托" tabindex="-1"><a class="header-anchor" href="#_32-什么是事件委托" aria-hidden="true">#</a> 32, 什么是事件委托</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>事件委托，就是利用了事件冒泡的机制，在较上层位置的元素上添加一个事件监听函数，\n来管理该元素及其所有子孙元素上的某一类的所有事件。\n\n适用场景：在绑定大量事件的时候，可以选择事件委托\n\n事件委托可以减少事件注册数量，节省内存占⽤!\n当新增⼦元素时，⽆需再次做事件绑定，因此非常适合动态添加元素 (vue解析模板时, 会对新创建的元素, 额外进行绑定的)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_33-项目开发过程中-都使用到了哪些es6新特性" tabindex="-1"><a class="header-anchor" href="#_33-项目开发过程中-都使用到了哪些es6新特性" aria-hidden="true">#</a> 33. 项目开发过程中，都使用到了哪些ES6新特性？</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1, 项目中使用let或const\n2, 解构赋值，数组解构赋值，对象解构赋值，函数参数解构赋值，减少代码量\n3，展开运算符\n4，rest运算符\n5，箭头函数\n6，对象的中属性的简写，方法的简写\n7，Object.assign( )方法\n8，Symbol\n9，Proxy vue3中数据响应式的核心\n10，Set和Map集合\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_34-实现-a-1-a-2-a-3-为true" tabindex="-1"><a class="header-anchor" href="#_34-实现-a-1-a-2-a-3-为true" aria-hidden="true">#</a> 34, 实现(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)为true</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token comment">// var a = &quot;?&quot;;</span>\n    <span class="token comment">// valueOf方法</span>\n    <span class="token comment">// 解法一</span>\n    <span class="token comment">// let a = {</span>\n    <span class="token comment">//     i:0,</span>\n    <span class="token comment">//     valueOf(){</span>\n    <span class="token comment">//         return ++this.i</span>\n    <span class="token comment">//     }</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 解法二</span>\n    <span class="token comment">// let a = {</span>\n    <span class="token comment">//     i:0,</span>\n    <span class="token comment">//     toString(){</span>\n    <span class="token comment">//         return ++this.i</span>\n    <span class="token comment">//     }</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 解法三</span>\n    <span class="token comment">// let a = [1,2,3];</span>\n    <span class="token comment">// a.toString = a.shift;</span>\n    <span class="token comment">// 解法四</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// console.log(&quot;get...&quot;);</span>\n            <span class="token keyword">return</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;码路教育&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-如何给数组降维" tabindex="-1"><a class="header-anchor" href="#_35-如何给数组降维" aria-hidden="true">#</a> 35. 如何给数组降维</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n       <span class="token comment">// 利用Array.some方法判断数组中是否还存在数组，es6展开运算符连接数组</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 使用数组的concat方法</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// result = Array.prototype.concat.apply([], arr)</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// es6中的flat函数也可以实现数组的扁平化</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;中&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;⽂&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_36-闭包经典面试题" tabindex="-1"><a class="header-anchor" href="#_36-闭包经典面试题" aria-hidden="true">#</a> 36, 闭包经典面试题</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 下面代码是否可以，每隔1000MS依次输出 0 1 2 3 4 5 ? </span>\n    <span class="token comment">// 如果不可以，说明为啥？以及如何解决？</span>\n    <span class="token comment">// for循环是同步代码   定时器是异步代码</span>\n    <span class="token comment">// 同步代码执行完毕后，i的值已经变了6</span>\n    <span class="token comment">// for (var i = 0; i &lt; 6; i++) {</span>\n    <span class="token comment">//     setTimeout(function () {</span>\n    <span class="token comment">//         console.log(i);</span>\n    <span class="token comment">//     }, (i + 1) * 1000);</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 利用闭包解决</span>\n    <span class="token comment">// for (var i = 0; i &lt; 6; i++) {</span>\n    <span class="token comment">//     (function (i) {</span>\n    <span class="token comment">//         setTimeout(function () {</span>\n    <span class="token comment">//             console.log(i);</span>\n    <span class="token comment">//         }, (i + 1) * 1000);</span>\n    <span class="token comment">//     })(i)</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 利用块级作用域</span>\n    <span class="token comment">// let + {} 会形成块级作用域</span>\n    <span class="token comment">// for (let i = 0; i &lt; 6; i++) {</span>\n    <span class="token comment">//     setTimeout(function () {</span>\n    <span class="token comment">//         console.log(i);</span>\n    <span class="token comment">//     }, (i + 1) * 1000);</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 利用闭包解决</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_37-with-方法" tabindex="-1"><a class="header-anchor" href="#_37-with-方法" aria-hidden="true">#</a> 37, with 方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// with 方法</span>\n      <span class="token comment">// 允许您在一个特定的对象上设置一个临时的作用域</span>\n\n      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>\n\n      <span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 直接访问 obj.x，输出 10</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">// 直接访问 obj.y，输出 20</span>\n        z <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">// 如果属性不存在，会在全局作用域中创建新的变量</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 指向Window</span>\n      <span class="token punctuation">}</span>\n\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment">// 输出 undefined</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment">// 30</span>\n\n      <span class="token comment">// with 语句可以简化代码书写，但它也有一些潜在的问题和副作用。它会改变作用域链的解析方式，可能导致意外的结果和性能问题。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>with 语句创建了<strong>一个临时的作用域</strong>, 该作用域中的变量 <code>z</code> 被认为是<strong>全局作用域中的变量</strong>。所以, 当我们在 with方法中,输出this的时候, 这里的this的指向是 Window</p><p>另一种情况, 这个对象中存在变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span>\n\n      <span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 直接访问 obj.x，输出 10</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">// 直接访问 obj.y，输出 20</span>\n        z <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">// 如果属性不存在，会在全局作用域中创建新的变量</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 指向Window</span>\n        a <span class="token operator">=</span> <span class="token number">50</span> <span class="token comment">// 因为存在a这个变量, 所以等于重新赋值</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment">// 输出 undefined</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment">// 30</span>\n\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 50</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_38-防抖和节流" tabindex="-1"><a class="header-anchor" href="#_38-防抖和节流" aria-hidden="true">#</a> 38, 防抖和节流</h3><p><strong>概念理解</strong></p><p><strong>防抖</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>说说你对防抖、 节流的理解， 以及它们的区别和应用场景？\n防抖: 将多次执行函数变成最后⼀次执行 等待固定时间还没有事件触发时执行的函数\n应用场景:\n    按钮的点击\n    屏幕滚动时的复杂计算\n    输⼊ 框输⼊ 时进行搜索\n    用户缩放浏览器的resize事件\n简单的防抖函数实现:\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">myDebounce</span><span class="token punctuation">(</span><span class="token parameter">execFn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>\n\n        <span class="token keyword">function</span> <span class="token function">_debounce</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token function">execFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n                timer <span class="token operator">=</span> <span class="token keyword">null</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> _debounce\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>节流</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- \n    节流: 按照固定的时间频率(间隔)来执⾏对应的函数\n    应用场景:\n        监听页面的滚动事件 通过节流来降低事件调用的频率\n        ⿏标移动\n        用户频繁点击按钮的操作\n    简单实现:\n --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">myThrottle</span><span class="token punctuation">(</span><span class="token parameter">execFn<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> initTime <span class="token operator">=</span> <span class="token number">0</span>\n\n        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token keyword">const</span> waitTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> initTime<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">execFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n                initTime <span class="token operator">=</span> nowTime\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> throttle\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_39-数组的去重" tabindex="-1"><a class="header-anchor" href="#_39-数组的去重" aria-hidden="true">#</a> 39, 数组的去重</h3><p>new Set 实现数组去重</p><blockquote><ol><li><code>new Set(arr)</code>: 这里使用 <code>Set</code> 数据结构，它是一种集合，它的特点<strong>是不允许重复的值</strong>。通过将 <code>arr</code> 作为参数传递给 <code>Set</code> 构造函数，我们创建了一个包含 <code>arr</code> 中所有不重复元素的 <code>Set</code> 对象。</li><li><code>Array.from(...)</code>: 这是一个<strong>将类似数组或可迭代对象转换为真正的数组</strong>的方法。我们将之前创建的 <code>Set</code> 对象作为参数传递给 <code>Array.from</code>，这样就创建了一个包含 <code>Set</code> 中所有不重复元素的数组。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 数组去重</span>\n      arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n      <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用ES6 Set去重（ES6中最常用）</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {}, {}]</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用for嵌套for，然后splice去重（ES5中最常用）</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//第⼀个等同于第二个，splice方法删除第二个</span>\n                    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    j<span class="token operator">--</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// [1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, {…}, {…}]  //NaN和{}没有去重，两个null直接消失了</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用indexOf去重</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;type error!&#39;</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> array<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {… }] //NaN、{}没有去重</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用sort去重</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;type error!&#39;</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">var</span> arrry <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                arrry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> arrry<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, {…}, {…}, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined] // NaN、{}没有去重</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用includes</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;type error!&#39;</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//includes 检测数组是否有某个值</span>\n                array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> array\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span>\n    <span class="token comment">// {} 没有去重</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用filter</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//当前元素，在原始数组中的第⼀个索引==当前索引值，否则返回当前元素</span>\n            <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// 利用递归去重</span>\n    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> prev <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_40-js-的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_40-js-的垃圾回收机制" aria-hidden="true">#</a> 40, JS 的垃圾回收机制</h3><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉\n下面介绍两种常见的浏览器垃圾回收算法: 引用计数 和 标记清除法\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>核心: <strong>判断内存是否已经不再会被使用</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>IE采用的引用计数算法, 定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。\n如果没有任何变量指向它了，说明该对象已经不再需要了。\n\n但它却存在一个致命的问题：循环引用。\n如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>循环引用的问题</strong></p><blockquote><p>如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。</p></blockquote><h3 id="object-assign和扩展运算符有什么区别" tabindex="-1"><a class="header-anchor" href="#object-assign和扩展运算符有什么区别" aria-hidden="true">#</a> object.assign和扩展运算符有什么区别?</h3><p><code>Object.assign</code>和扩展运算符（<code>...</code>）都<strong>执行浅拷贝操作</strong>。</p><p>浅拷贝是指<strong>创建一个新对象或数组</strong>，<strong>并复制原始对象或数组的引用</strong>。这意味着新对象或数组与原始对象或数组<strong>共享相同的内部对象</strong>。如果修改了原始对象或数组中的内部对象，那么在浅拷贝的结果中也会反映出这些修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 扩展运算符</span>\n<span class="token keyword">let</span> outObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">inObj</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>outObj<span class="token punctuation">}</span>\nnewObj<span class="token punctuation">.</span>inObj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outObj<span class="token punctuation">)</span> <span class="token comment">// {inObj: {a: 2, b: 2}}</span>\n\n<span class="token comment">// Object.assign()</span>\n<span class="token keyword">let</span> outObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">inObj</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> outObj<span class="token punctuation">)</span>\nnewObj<span class="token punctuation">.</span>inObj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outObj<span class="token punctuation">)</span> <span class="token comment">// {inObj: {a: 2, b: 2}}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>target</code>是目标对象，<code>sources</code>是一个或多个源对象。<code>Object.assign</code>将源对象的属性复制到目标对象中，并返回目标对象。如果多个源对象具有相同的属性，后面的源对象将覆盖前面的源对象的属性。</p><p><strong>区别</strong>:</p><ol><li>语法：<code>Object.assign</code>是一个<strong>方法</strong>，而扩展运算符是一种<strong>语法</strong>。 <ul><li><code>Object.assign(target, ...sources)</code>：<code>Object.assign</code>接收一个目标对象和一个或多个源对象作为参数。它将源对象的属性复制到目标对象，并返回目标对象。</li><li><code>{ ...source }</code>：扩展运算符使用在对象或数组前面，将其展开为另一个对象或数组。</li></ul></li><li>处理重复属性：<code>Object.assign</code>和扩展运算符在处理重复属性时有一些差异。 <ul><li><code>Object.assign</code>：如果多个源对象具有相同的属性，后面的源对象将覆盖前面的源对象的属性。这意味着如果<strong>有重复属性</strong>，<strong>最后一个源对象的属性值将保留</strong>。</li><li>扩展运算符：如果多个源对象具有相同的属性，<strong>最后一个源对象的属性值将覆盖前面的源对象的属性值</strong>。</li></ul></li><li>可用性：<code>Object.assign</code>可以<strong>在较旧的环境中使用</strong>，而扩展运算符需要<strong>更高版本</strong>的JavaScript引擎支持。 <ul><li><code>Object.assign</code>：<code>Object.assign</code>是ES6引入的，但在ES6之前的环境中，可以使用<strong>polyfill</strong>或其他方式来模拟实现它。</li><li>扩展运算符：扩展运算符是ES6中引入的新语法，需要较新的JavaScript引擎支持。</li></ul></li></ol><h3 id="_41-js中常用的事件绑定" tabindex="-1"><a class="header-anchor" href="#_41-js中常用的事件绑定" aria-hidden="true">#</a> 41, JS中常用的事件绑定</h3><p>常见的三种事件绑定方式:</p><ol><li>HTML 属性 : 可以在HTML元素上直接使用事件属性来绑定事件处理程序。例如，使用<code>onclick</code>属性绑定<code>click</code>事件：</li><li>DOM 属性 : 可以通过JavaScript代码直接访问DOM元素，并使用其属性来绑定事件处理程序。例如，使用<code>addEventListener</code>方法绑定<code>click</code>事件：</li><li>on 属性 : 可以通过直接设置DOM元素的<code>on</code>属性来绑定事件处理程序。例如，使用<code>onclick</code>属性绑定<code>click</code>事件</li></ol><h3 id="_42-对作用域和作用域链的理解" tabindex="-1"><a class="header-anchor" href="#_42-对作用域和作用域链的理解" aria-hidden="true">#</a> 42, 对作用域和作用域链的理解</h3><p><img src="' + _imports_20 + '" alt="image-20240106222908754"></p><p><strong>作用域</strong></p><blockquote><p>定义了变量和函数在代码中的可见范围以及它们可以被访问的位置。在JavaScript中，<strong>作用域是基于函数的</strong>，<strong>每个函数都有自己的作用域</strong>。当声明变量时，它们会被存储在相应的作用域中，然后可以在该作用域内进行访问和使用。JavaScript采用了词法作用域（Lexical Scope）的规则，也称为<strong>静态作用域</strong>，<strong>它在函数定义时确定作用域</strong>，而不是在函数执行时。</p></blockquote><p><strong>作用域链</strong></p><blockquote><p>作用域链（Scope Chain）是一种由嵌套的作用域组成的结构，在查找变量时按照嵌套关系进行搜索。当访问一个变量时，<strong>JavaScript引擎首先在当前作用域中查找</strong>，如果找不到，就会<strong>沿着作用域链向上一级作用域查找</strong>，直到找到该变量或达到全局作用域 (直到最后查找的window)。这种作用域链的搜索方式确保了内部作用域可以访问外部作用域中的变量，但外部作用域无法访问内部作用域中的变量。</p></blockquote><p><strong>如何让外部作用域可以访问内部作用域?</strong></p><ol><li>返回值：内部函数可以通过返回值将数据传递给外部作用域。外部作用域可以通过调用内部函数并接收返回值来获取内部作用域中的数据。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>对象属性：可以使用对象属性来存储内部作用域中的数据，并将对象暴露给外部作用域。外部作用域可以通过访问对象属性来获取内部作用域中的数据。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    data<span class="token punctuation">.</span>result <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>全局变量：可以将需要在内部和外部作用域中共享的数据定义为全局变量。全局变量在任何作用域中都可以被访问和修改。但是全局变量应该谨慎使用，因为它们可能导致命名冲突和代码可维护性的问题。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_43-let-var-const的区别" tabindex="-1"><a class="header-anchor" href="#_43-let-var-const的区别" aria-hidden="true">#</a> 43, let var const的区别</h3><p><img src="' + _imports_21 + '" alt="image-20240106224006329"></p><p>注意:</p><ul><li><p>const 声明的是复合类型数据, 可以修改其属性</p><ul><li><p>使用<code>const</code>关键字可以声明复合类型的数据，包括数组和对象。当使用<code>const</code>声明复合类型数据时，变量本身不能被重新赋值，但是变量所指向的数据结构可以被修改。</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnumbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以向数组中添加元素</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 2, 3, 4]</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 可以修改对象的属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 { name: &quot;John&quot;, age: 31 }</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_44-原型和原型链是怎么理解的" tabindex="-1"><a class="header-anchor" href="#_44-原型和原型链是怎么理解的" aria-hidden="true">#</a> 44, 原型和原型链是怎么理解的?</h3><p>解释图</p><p><img src="' + _imports_22 + '" alt="image-20240107220247133"></p><p><strong>原型的概念:</strong></p><p>函数定义的时候, 自带的 prototype 对象就是<strong>原型</strong>, 分为显示原型和隐式原型</p><ul><li><p>显示原型: 函数的prototype 属性</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">隐式原型</span><span class="token operator">:</span> 实例对象都会有 __proto__ 属性\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>注意: constructor , 每个 prototype 原型都有一个 constructor 属性, 指向它关联的构造函数</p><p><strong>原型链的概念:</strong></p><p>每一个实例化对象都有一个 proto 属性, 而这个属性指向构造函数的原型对象, 原型对象上也有一个这样的属性, 就这样一层一层的向上查找的, 直到找到 Object.prototype , 就这样查找的过程称为原型链</p><blockquote><p><strong>注意</strong>: 一般我们继承相关的代码中, 比如jq 定义插件, 或者 Vue定义自定义指令等, 核心就是使用原型和原型链</p></blockquote><h3 id="_45-面向对象的理解" tabindex="-1"><a class="header-anchor" href="#_45-面向对象的理解" aria-hidden="true">#</a> 45, 面向对象的理解?</h3><p>概念</p><p>三大特征: 封装, 继承, 多态</p><p>优势</p><p><img src="' + _imports_23 + '" alt="image-20240107223400297"></p><p><strong>面向对象的实现</strong></p><p><img src="' + _imports_24 + '" alt="image-20240107223456603"></p><p><strong>设计模式</strong></p><p><img src="' + _imports_25 + '" alt="image-20240107223541258"></p><p><strong>es6中的面向对象</strong></p><ul><li>class 定义类</li><li>static 静态属性</li><li>constructor 方法, 通过new 命令生成对象实例时, 自动调用该方法</li><li>super 父类构造函数</li><li>extends 继承关键字</li></ul><h3 id="_46-对js-面向对象和设计模式的认识" tabindex="-1"><a class="header-anchor" href="#_46-对js-面向对象和设计模式的认识" aria-hidden="true">#</a> 46, 对JS 面向对象和设计模式的认识</h3><p>概念</p><p>前端常用的设计模式</p><ul><li>单例设计模式</li><li>工厂设计模式</li><li>观察者设计模式</li><li>(发布)订阅模式</li></ul><p><img src="' + _imports_26 + '" alt="image-20240107223951731"></p><p>目前一共有23中设计模式</p><h3 id="_47-对-js-面向对象中继承的认识" tabindex="-1"><a class="header-anchor" href="#_47-对-js-面向对象中继承的认识" aria-hidden="true">#</a> 47, 对 JS 面向对象中继承的认识</h3><p>使用场景: <strong>在框架编程中定义函数依赖会用到</strong></p><p><img src="' + _imports_27 + '" alt="image-20240107224334411"></p><p><strong>第二种继承方式</strong></p><p><img src="' + _imports_28 + '" alt="image-20240107224451459"></p><p><strong>第三种方式</strong></p><p><img src="' + _imports_29 + '" alt="image-20240107224601753"></p><p>代码演示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.原型链继承</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Parent&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Child&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Child&quot;</span>\n<span class="token comment">//  在这个例子中，`Child.prototype`被设置为`new Parent()`，这意味着`Child`实例的原型链上将包含`Parent`实例的属性和方法。</span>\n\n<span class="token comment">// 2.借用构造函数</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Parent&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Child&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Child&quot;</span>\n<span class="token comment">// 在这个例子中，`Parent.call(this)`将在`Child`构造函数中调用`Parent`构造函数，确保子类实例拥有父类的属性。</span>\n\n<span class="token comment">// 3.组合继承</span>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Parent&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Child&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>\n<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Child&quot;</span>\n<span class="token comment">// 在这个例子中，`Child.prototype = new Parent()`实现了原型链继承，而`Child.prototype.constructor = Child`确保了子类的构造函数指向正确。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_48-数组的遍历方法有哪些" tabindex="-1"><a class="header-anchor" href="#_48-数组的遍历方法有哪些" aria-hidden="true">#</a> 48, 数组的遍历方法有哪些</h3><ul><li>for 循环 forEach 循环</li><li>map 循环</li><li>filter 遍历</li><li>every 遍历 (每一个元素都满足条件, 返回true , 否则返回false)</li><li>some 遍历 (只要有一个以上满足条件就返回true , 否则返回false , 退出循环)</li><li>reduce 遍历 (对数组的每个元素执行一个回调函数, 将其结果返回值)</li></ul><h3 id="_49-对-js-事件和事件流的理解" tabindex="-1"><a class="header-anchor" href="#_49-对-js-事件和事件流的理解" aria-hidden="true">#</a> 49, 对 JS 事件和事件流的理解</h3><p>使用场景: 用户交互时</p><p>JS 事件流</p><ul><li>冒泡</li><li>捕获</li></ul><p><img src="' + _imports_30 + '" alt="image-20240107232224196"></p><p>事件代理的优点:</p><ul><li>减少事件的定义, 减少内存的消耗</li><li>可以为DOM操作的元素动态绑定事件</li></ul><h3 id="_50-浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#_50-浅拷贝和深拷贝" aria-hidden="true">#</a> 50, 浅拷贝和深拷贝</h3><p>理解</p><p><img src="' + _imports_31 + '" alt="image-20240107233825169"></p><p><strong>两者的区别</strong></p><p><img src="' + _imports_32 + '" alt="image-20240107233920175"></p><h2 id="二-进阶" tabindex="-1"><a class="header-anchor" href="#二-进阶" aria-hidden="true">#</a> 二, 进阶</h2><h3 id="_1-如何理解函数柯里化" tabindex="-1"><a class="header-anchor" href="#_1-如何理解函数柯里化" aria-hidden="true">#</a> 1, 如何理解函数柯里化?</h3><p>理解:</p><blockquote><p>函数柯里化（Currying）是一种<strong>将接受多个参数的函数转换为一系列接受单个参数的函数的技术</strong>。这种转换过程使得函数具有更高的灵活性和复用性。在柯里化中，原始函数的每个参数都对应一个新的函数，这些函数接受一个参数，并返回一个新的函数，直到最后一个参数被传递并执行原始函数。</p></blockquote><p>代码示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">/* \n      ƒ (y) {\n          return x + y\n        }\n*/</span>\n<span class="token keyword">const</span> add5 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个新函数，将参数 x 设置为 5</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add5</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 8</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数柯里化的好处之一是可以通过部分应用（Partial Application）来<strong>复用函数</strong>。部分应用是指在柯里化函数中只传递部分参数，生成一个新的函数，然后在需要时再传递剩余的参数。<strong>这种方式可以由一个通用函数生成一系列特定情况下的函数。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新函数，将参数 x 设置为 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数柯里化可以帮助我们<strong>将复杂的问题分解为更小的函数</strong>，提高代码的可读性和可维护性。它还可以用于实现函数式编程中的一些高阶函数，如 <code>map</code>、<code>filter</code> 和 <code>reduce</code> 等。</p><h3 id="_2-call-和-apply-的区别" tabindex="-1"><a class="header-anchor" href="#_2-call-和-apply-的区别" aria-hidden="true">#</a> 2, call 和 apply 的区别</h3><p>使用场景: JS中的构造函数继承和判断 {} [] 数据类型的时候用到</p><p><strong>相同点和不同点</strong></p><p><img src="' + _imports_33 + '" alt="image-20240107232544832"></p><blockquote><p><code>call</code>和<code>apply</code>都用于<strong>调用函数并指定函数内部的<code>this</code>值，并传递参数</strong>。</p></blockquote><p>代码演示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// call方法</span>\n<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello, Alice&quot;</span>\n\n<span class="token comment">// apply方法</span>\n<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello, Alice&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意 :</strong> 如果不关心<code>this</code>值，可以将<code>null</code>或<code>undefined</code>作为<code>call</code>或<code>apply</code>的第一个参数，让函数使用默认的<code>this</code>值（在非严格模式下是全局对象，在严格模式下是<code>undefined</code>）</p></blockquote><h1 id="vue-篇" tabindex="-1"><a class="header-anchor" href="#vue-篇" aria-hidden="true">#</a> Vue 篇</h1><hr><h3 id="_1-什么是渐进式框架" tabindex="-1"><a class="header-anchor" href="#_1-什么是渐进式框架" aria-hidden="true">#</a> 1, 什么是渐进式框架 ?</h3><ul><li>核心: 可以被逐步集成</li><li>根据需求场景, 用不同的方式使用Vue</li></ul><h3 id="_2-vue-有什么特点" tabindex="-1"><a class="header-anchor" href="#_2-vue-有什么特点" aria-hidden="true">#</a> 2, Vue 有什么特点 ?</h3><ul><li>易学易用, API设计简单, 上手快</li><li>性能出色, 底层的 proxy原理 , (精准更新) , diff算法</li><li>灵活多变 (丰富的可渐进式的生态系统)</li></ul><h3 id="_3-vue-3的响应式核心" tabindex="-1"><a class="header-anchor" href="#_3-vue-3的响应式核心" aria-hidden="true">#</a> 3, Vue 3的响应式核心</h3><ul><li>ref</li><li>reactive</li></ul><p>页面需要响应数据的变化, 核心就是ref 和 reactive</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> \n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">reactive</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">100</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对ref 定义的数据, 需要进行.value 来修改, 因为它本身实际上是一个对象,在改变时触发更新的对象被称为是响应式的</p><h1 id="vue-进阶篇" tabindex="-1"><a class="header-anchor" href="#vue-进阶篇" aria-hidden="true">#</a> Vue 进阶篇</h1><h3 id="_1-请讲解一下如何如何让组件的样式不受污染" tabindex="-1"><a class="header-anchor" href="#_1-请讲解一下如何如何让组件的样式不受污染" aria-hidden="true">#</a> 1, 请讲解一下如何如何让组件的样式不受污染</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;style scoped&gt;\n&lt;style/&gt; \n\n添加scoped属性, 让单个组件的样式成为一个局部作用样式, 从而不会影响其他页面的样式导致样式污染\n\n它的本质是 Vue 对每个样式生成独立的表示, 这个标识是 V-Data[hashxxxxx], 让每个样式保持唯一性\n\n当然, 有些场景让使用这个属性, 会导致我们修改样式不生效(Vue没有识别到) , 这个时候就会用到了Vue的 :deep()语法, 去深度监听我们所需要修改的样式, 当然也可以去掉这个属性\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 344);
const _hoisted_345 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_345);
}
const qianduanMianshi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "qianduan-mianshi.html.vue"]]);
export {
  qianduanMianshi_html as default
};
