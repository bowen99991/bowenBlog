import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-ad95db81.js";
const _imports_0 = "/bowenBlog/assets/image-20231223190620788-29fd6c08.png";
const _imports_1 = "/bowenBlog/assets/image-20231223190607832-b94db2ba.png";
const _imports_2 = "/bowenBlog/assets/image-20231223195421169-404abd5f.png";
const _imports_3 = "/bowenBlog/assets/image-20231223201550463-4204943f.png";
const _imports_4 = "/bowenBlog/assets/image-20231223201707381-09f7aeb1.png";
const _imports_5 = "/bowenBlog/assets/image-20231223202003763-a608c89d.png";
const _imports_6 = "/bowenBlog/assets/image-20231223202826370-7452eefb.png";
const _imports_7 = "/bowenBlog/assets/image-20231223202835905-55bc5a6f.png";
const _imports_8 = "/bowenBlog/assets/image-20231223202946764-df595b04.png";
const _imports_9 = "/bowenBlog/assets/image-20231223203630543-8b271f40.png";
const _imports_10 = "/bowenBlog/assets/image-20231223203659184-3b954d63.png";
const _imports_11 = "/bowenBlog/assets/image-20231223203706523-3f08cb47.png";
const _imports_12 = "/bowenBlog/assets/image-20231223203720780-9e2068ff.png";
const _imports_13 = "/bowenBlog/assets/image-20231223203731919-f9e5e347.png";
const _imports_14 = "/bowenBlog/assets/image-20231223203839719-0e071c96.png";
const _imports_15 = "/bowenBlog/assets/image-20231223203945575-b27c82b2.png";
const _imports_16 = "/bowenBlog/assets/image-20231223204036970-8cc78f84.png";
const _imports_17 = "/bowenBlog/assets/image-20231223204231147-29f8544b.png";
const _imports_18 = "/bowenBlog/assets/image-20231223204309330-36e92201.png";
const _imports_19 = "/bowenBlog/assets/image-20231223204317225-ee80e5b6.png";
const _imports_20 = "/bowenBlog/assets/image-20231223204327198-c1274ed7.png";
const _imports_21 = "/bowenBlog/assets/image-20231223204339838-2bee5679.png";
const _imports_22 = "/bowenBlog/assets/image-20231223204543491-d98b7551.png";
const _imports_23 = "/bowenBlog/assets/image-20231223204555668-67b28c76.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="一-初识react" tabindex="-1"><a class="header-anchor" href="#一-初识react" aria-hidden="true">#</a> 一, 初识React</h2><h3 id="_1-初识react" tabindex="-1"><a class="header-anchor" href="#_1-初识react" aria-hidden="true">#</a> 1, 初识React</h3><p>官网：https://react.docschina.org/</p><p>React 文档</p><p><img src="' + _imports_0 + '" alt="image-20231223190620788"></p><p><img src="' + _imports_1 + '" alt="image-20231223190607832"></p><p>在React文档中API大概就10个左右，vue能做的事，React都可以做。</p><h3 id="_2-使用官方的脚手架" tabindex="-1"><a class="header-anchor" href="#_2-使用官方的脚手架" aria-hidden="true">#</a> 2, 使用官方的脚手架</h3><h3 id="_3-配置-webpack-解决路径" tabindex="-1"><a class="header-anchor" href="#_3-配置-webpack-解决路径" aria-hidden="true">#</a> 3, 配置 webpack 解决路径</h3><blockquote><p>使用官方脚手架可以跳过此步骤</p></blockquote><h3 id="_4-类组件和函数组件" tabindex="-1"><a class="header-anchor" href="#_4-类组件和函数组件" aria-hidden="true">#</a> 4, 类组件和函数组件</h3><blockquote><p>React 中，有两种主要类型的组件：类组件（Class Components）和函数组件（Function Components）</p></blockquote><p><strong>类组件</strong></p><p>类组件是使用 ES6 类语法定义的组件。它们继承自 <code>React.Component</code> 类，并且必须实现 <code>render</code> 方法来定义组件的渲染逻辑。类组件可以维护状态（state）和生命周期方法（lifecycle methods），并且具有更多的功能和灵活性。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, I&#39;m a class component!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数组件</strong></p><blockquote><p>函数组件是使用 JavaScript 函数定义的组件。它们接收一个名为 <code>props</code> 的参数，并返回一个虚拟 DOM 元素作为组件的输出。函数组件通常用于只关注 UI 渲染的简单组件，它们没有自己的状态，也没有生命周期方法。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, I&#39;m a function component!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">FunctionComponentWithHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component mounted or count updated&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-基本使用" tabindex="-1"><a class="header-anchor" href="#_5-基本使用" aria-hidden="true">#</a> 5, 基本使用</h3><h3 id="_6-render-函数" tabindex="-1"><a class="header-anchor" href="#_6-render-函数" aria-hidden="true">#</a> 6, render 函数</h3><blockquote><p>在 React 中，<code>render</code> 函数是用于定义组件的渲染方法。每个 React 组件都必须实现 <code>render</code> 方法，它负责根据组件的当前状态和属性（props）生成组件的虚拟 DOM（Virtual DOM）结构。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token comment">// 返回组件的虚拟 DOM 结构</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a React component.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//	render 函数返回了一个包含 JSX 元素的表达式。当组件被渲染时，这些 JSX 元素将被转换为实际的 DOM 元素，并插入到页面中</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong></p><ul><li><code>render</code> 函数必须返回一个有效的 JSX 表达式。它可以是一个单独的元素，也可以是一个包含多个元素的片段（使用 <code>&lt;React.Fragment&gt;</code> 或简写的<strong>空标签</strong> <code>&lt;&gt;</code>）。</li><li><code>render</code> 函数内部可以包含任意的 JavaScript 逻辑，例如条件语句、循环等。这样可以根据组件的状态和属性来动态生成 JSX 内容。</li><li>在 JSX 表达式中可以引用组件的属性和状态，并将它们作为变量使用。这样可以根据组件的数据来动态生成 UI。</li><li>注意 JSX 中的标签命名规范，通常<strong>组件类名以大写字母开头</strong>，而 HTML 标签名以小写字母开头。</li></ul><h2 id="二-jsx-语法" tabindex="-1"><a class="header-anchor" href="#二-jsx-语法" aria-hidden="true">#</a> 二, JSX 语法</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><blockquote><p>jsx = javascript + xml，是facebooK发明的语法，浏览器是不认识这种语法的，需要利用babel编译成浏览器可以识别的语法。</p></blockquote><p>基本的使用步骤:</p><ul><li><p>引入 React 库</p></li><li><p>标签闭合：在 JSX 中，标签必须被正确闭合。自闭合标签需要在标签末尾添加一个斜杠 <code>/</code>。</p></li><li><p>类名和样式：在 JSX 中，<code>class</code> 属性需要写成 <code>className</code>，因为 <code>class</code> 是 JavaScript 的保留关键字</p></li><li></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDiv<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于内联样式，需要使用一个 JavaScript 对象来表示。例如：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>表达式和变量：在 JSX 中，可以使用花括号 <code>{}</code> 来包裹 JavaScript 表达式和变量。这允许在 JSX 中使用动态值。</p></li><li><p>注释：在 JSX 中，注释需要写在花括号内，并以大括号开头。</p></li><li><p>标签命名规范：在 JSX 中，标签名通常以大写字母开头，以便与普通的 HTML 标签区分开来。</p></li></ul><h3 id="创建-dom" tabindex="-1"><a class="header-anchor" href="#创建-dom" aria-hidden="true">#</a> 创建 DOM</h3><p>使用 JSX 语法实例, 创建 DOM 元素</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">let</span> box <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello React~</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 组件返回JSX元素</span>\n  <span class="token comment">// return box</span>\n\n  <span class="token comment">// 使用JSX语法</span>\n  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;box&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;haha&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// JSX语法创建元素</span>\n    <span class="token punctuation">[</span>\n      React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;我是span标签&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 键值是唯一的值</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;baidu&#39;</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> DemoC\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>官方推荐是使用jsx，jsx更加直观，浏览器是不能识别jsx，需要使用babel进行翻译，翻译成了React.createElement的形式。</p></blockquote><h3 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖" aria-hidden="true">#</a> 语法糖</h3><p>jsx 元素写法有两种：</p><ul><li>jsx的语法糖形式</li><li>React.createElement的形式</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// React必须写在前面, 是默认导出的类</span>\n<span class="token comment">// Component是React中的类, 需要解构</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token comment">// JSX 的两种写法</span>\n<span class="token keyword">let</span> el1 <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是div</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token keyword">let</span> el2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;我是一个div&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el1<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el2<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本质是对象" tabindex="-1"><a class="header-anchor" href="#本质是对象" aria-hidden="true">#</a> 本质是对象</h3><blockquote><p>jsx元素本质是一个对象，这个对象是不可变对象。</p></blockquote><p><img src="' + _imports_2 + '" alt="image-20231223195421169"></p><p><strong>为什么在设计jsx元素时，设计成不可变对象呢？</strong></p><p>答：你要知道jsx元素最终需要被渲染成真实DOM元素，所以不能直接操作&quot;原材料&quot;，只能使用它。</p><p><strong>什么是jsx元素，什么是组件</strong>？</p><ul><li>由class或function定义出来的叫组件，<strong>组件名必须大写</strong></li><li>由jsx语法或React.createElement返回的结果叫jsx元素，jsx元素充当组件的视图模板</li></ul><h3 id="插值" tabindex="-1"><a class="header-anchor" href="#插值" aria-hidden="true">#</a> 插值</h3><blockquote><p>在 JSX 中，使用一对花括号 <code>{}</code> 来表示插值，可以在 JSX 中嵌入 JavaScript 表达式或变量。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是函数式组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token keyword">function</span> <span class="token function">DemoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">函数式组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>el<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>&lt;Fragment&gt;</code> 标签可以被省略，而不影响代码的功能。</p><p>React 提供了一个简写方式来使用片段（Fragment），即空标签 <code>&lt;&gt;&lt;/&gt;</code>，也被称为 空片段（Empty Fragment）或 短语法（Short Syntax）。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">函数式组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>el<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套表达式" tabindex="-1"><a class="header-anchor" href="#嵌套表达式" aria-hidden="true">#</a> 嵌套表达式</h3><blockquote><p>在jsx元素中，你要嵌套表达式，必须使用{}包起来，也就是说，在jsx元素中，看到{}你要知道里面放的都是表达式。任何有值的内容都是表达式。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">学生姓名: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>student<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , 年龄: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>student<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Student</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token function">foo</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> DemoD\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可作为参数" tabindex="-1"><a class="header-anchor" href="#可作为参数" aria-hidden="true">#</a> 可作为参数</h3><blockquote><p>jsx也可以做了函数的入参，也就是在调用一个函数时，传递传递一个jsx元素，也可以做为函数的返回值，还可以用在if或for中</p></blockquote><p><img src="' + _imports_3 + '" alt="image-20231223201550463"></p><h3 id="变化的属性" tabindex="-1"><a class="header-anchor" href="#变化的属性" aria-hidden="true">#</a> 变化的属性</h3><p>jsx元素中有三个变化的属性：</p><ul><li>class 变成了 className</li><li>for 变成了 htmlFor</li><li>tabindex 变成了tabIndex</li></ul><h3 id="新增的三个属性" tabindex="-1"><a class="header-anchor" href="#新增的三个属性" aria-hidden="true">#</a> 新增的三个属性</h3><p>jsx元素中新增了三个属性：</p><ul><li>key 用于列表渲染</li><li>ref 方便DOM操作</li><li>dangerouslySetInnerHTML 用来渲染一片html字符串</li></ul><p><img src="' + _imports_4 + '" alt="image-20231223201707381"></p><p><img src="' + _imports_5 + '" alt="image-20231223202003763"></p><h3 id="唯一根标签" tabindex="-1"><a class="header-anchor" href="#唯一根标签" aria-hidden="true">#</a> 唯一根标签</h3><blockquote><p>JSX 元素在渲染时必须有一个根标签。这是因为 JSX 是一种类似 XML 的语法扩展，它要求在渲染时只能有一个顶层元素。</p><p>当你在函数式组件或类组件中返回 JSX 时，你必须将所有的 JSX 元素包裹在一个父元素中，以满足这个要求。这个父元素可以是一个标签，比如 <code>&lt;div&gt;</code> 或 <code>&lt;Fragment&gt;</code>，或者是一个空标签 <code>&lt;&gt;&lt;/&gt;</code>（空片段）。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 使用 &lt;div&gt; 包裹多个元素</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用 &lt;Fragment&gt; 包裹多个元素</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用空片段 &lt;&gt;&lt;/&gt; 包裹多个元素</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单标签写法" tabindex="-1"><a class="header-anchor" href="#单标签写法" aria-hidden="true">#</a> 单标签写法</h3><blockquote><p>在jsx元素，不仅组件可以使用单标签，任何html标签都可以使用单标签</p></blockquote><p><img src="' + _imports_6 + '" alt="image-20231223202826370"></p><p><img src="' + _imports_7 + '" alt="image-20231223202835905"></p><h3 id="行内样式" tabindex="-1"><a class="header-anchor" href="#行内样式" aria-hidden="true">#</a> 行内样式</h3><blockquote><p>在JSX中写行内样式，格式如下：</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token literal-property property">key1</span><span class="token operator">:</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">key2</span><span class="token operator">:</span><span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span><span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在JSX中，写class类名，格式如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token comment">// box是写死的</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;item1&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;item2&quot;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>a b<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_8 + '" alt="image-20231223202946764"></p><p>创建 css 文件写样式</p><p>可以创建一个独立的 CSS 文件，然后在组件中使用 <code>import</code> 导入该 CSS 文件。这样，你可以直接在 CSS 文件中编写样式规则，并通过给元素的 <code>className</code> 属性赋予对应的类名来应用样式。</p><p><strong>内联样式</strong></p><blockquote><p>可以使用内联样式的方式直接在 JSX 元素中定义样式。这可以通过给元素的 <code>style</code> 属性赋值一个包含样式属性的 JavaScript 对象来实现。属性名应该使用驼峰命名法，并且以字符串形式表示属性值。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// style 对象中的属性名对应 CSS 属性，属性值对应 CSS 属性值</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CSS-in-JS 库</strong></p><blockquote><p>一些流行的 CSS-in-JS 库， 如 styled-components、Emotion 等。这些库允许你在 JavaScript 或 TypeScript 中编写样式，并将其应用到组件中。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">&#39;styled-components&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> StyledDiv <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  color: red;\n  font-size: 16px;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledDiv</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledDiv</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件的命名" tabindex="-1"><a class="header-anchor" href="#组件的命名" aria-hidden="true">#</a> 组件的命名</h3><p>JSX中，所有React组件（由class或function定义）的名称必须以大写字母打头，如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dog</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dog</span><span class="token punctuation">&gt;</span></span> // 并不是组件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果以小写为命名的组件, 在浏览器中会报错，如下：</p><p><img src="' + _imports_9 + '" alt="image-20231223203630543"></p><h3 id="点语法" tabindex="-1"><a class="header-anchor" href="#点语法" aria-hidden="true">#</a> 点语法</h3><p>JSX语法中是支持点语法的，如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>React.Component\nReact.Fragment &lt;&gt;&lt;/&gt;\nMl.Button\nMl.Form\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_10 + '" alt="image-20231223203659184"></p><p><img src="' + _imports_11 + '" alt="image-20231223203706523"></p><p>首字母不能小写，如下：</p><p><img src="' + _imports_12 + '" alt="image-20231223203720780"></p><p>还可以解构，如下：</p><p><img src="' + _imports_13 + '" alt="image-20231223203731919"></p><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><blockquote><p>对于组件来说，props就是自定义属性，对于html标签来说，props是我们之前学习过的html标签的属性，props和vue一样，只能使用它，不要去修改它。</p></blockquote><p><img src="' + _imports_14 + '" alt="image-20231223203839719"></p><p>分析，传递了name, age, address，在子组件直接结构出name，age，address，在子组件的模板中使用name，age和address，如果名字都是一样的，可以简写，</p><p><img src="' + _imports_15 + '" alt="image-20231223203945575"></p><p><strong>可以给子传递多种数据类型</strong>，如下：</p><p><img src="' + _imports_16 + '" alt="image-20231223204036970"></p><p>子组件接收，还可以这样写，如下：</p><p><img src="' + _imports_17 + '" alt="image-20231223204231147"></p><h3 id="组件使用双标签" tabindex="-1"><a class="header-anchor" href="#组件使用双标签" aria-hidden="true">#</a> 组件使用双标签</h3><blockquote><p>在使用组件时，如果组件使用双标签，在双标签之间就可以写内容，在双标签之间写的内容是通过props.children来接收的，props.children可以是任意类型的数据，基本数据类型可以，引用数据类型也可以，也可以是函数。</p></blockquote><p><img src="' + _imports_18 + '" alt="image-20231223204309330"></p><p><img src="' + _imports_19 + '" alt="image-20231223204317225"></p><p>浏览器测试如下：</p><p><img src="' + _imports_20 + '" alt="image-20231223204327198"></p><p>可以传递一个jsx，也可以传递一个函数，函数返回一个jsx，书写这样的代码，如下：</p><p><img src="' + _imports_21 + '" alt="image-20231223204339838"></p><h3 id="jsx-直接渲染数组" tabindex="-1"><a class="header-anchor" href="#jsx-直接渲染数组" aria-hidden="true">#</a> JSX 直接渲染数组</h3><blockquote><p>在使用JSX时，如果是数组，可以直接渲染，</p></blockquote><p><img src="' + _imports_22 + '" alt="image-20231223204543491"></p><p>那在上面的数组中可以写哪些数据类型，如下：</p><p><img src="' + _imports_23 + '" alt="image-20231223204555668"></p><p>如果数组中有boolean值，有null，有und，会被直接忽略，也就是说不会生成对应的文本节点。</p><h2 id="三-状态" tabindex="-1"><a class="header-anchor" href="#三-状态" aria-hidden="true">#</a> 三, 状态</h2><hr>', 129);
const _hoisted_130 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_130);
}
const React_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "React.html.vue"]]);
export {
  React_html as default
};
