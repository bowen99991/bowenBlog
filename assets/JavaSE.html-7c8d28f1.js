import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-6cb60eb1.js";
const _imports_0 = "/bowenBlog/assets/image-20231213184502103-a79aee6a.png";
const _imports_1 = "/bowenBlog/assets/image-20231213175650092-65b8c422.png";
const _imports_2 = "/bowenBlog/assets/image-20231213175757343-7295d287.png";
const _imports_3 = "/bowenBlog/assets/image-20231213184613547-33bcff4e.png";
const _imports_4 = "/bowenBlog/assets/image-20231213184701841-36968733.png";
const _imports_5 = "/bowenBlog/assets/image-20231213183352489-467c2e19.png";
const _imports_6 = "/bowenBlog/assets/image-20231213184038362-0141147c.png";
const _imports_7 = "/bowenBlog/assets/image-20231213184729588-9220f946.png";
const _imports_8 = "/bowenBlog/assets/image-20231213191555684-4c4b7c5d.png";
const _imports_9 = "/bowenBlog/assets/image-20231214123059723-18ae60f7.png";
const _imports_10 = "/bowenBlog/assets/image-20231214123818829-013663b4.png";
const _imports_11 = "/bowenBlog/assets/image-20231214123024654-6c61a5a3.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="一-java" tabindex="-1"><a class="header-anchor" href="#一-java" aria-hidden="true">#</a> 一, Java</h2><hr><h3 id="_1-idea-设置" tabindex="-1"><a class="header-anchor" href="#_1-idea-设置" aria-hidden="true">#</a> 1, Idea 设置</h3><p>==开发工具配置==:</p><p><strong>代码自动补全不区分首字母大小写</strong></p><p><img src="' + _imports_0 + '" alt="image-20231213184502103"></p><p><strong>代码最大行数和自动换行处理</strong></p><p><img src="' + _imports_1 + '" alt="image-20231213175650092"></p><p><strong>自动导入包和自动删除未使用的包</strong></p><p><img src="' + _imports_2 + '" alt="image-20231213175757343"></p><p><strong>代码改变, 文件夹提示, Git 版本控制文件</strong></p><p><img src="' + _imports_3 + '" alt="image-20231213184613547"></p><p><strong>工具开启时可手动选择需要编辑的项目</strong></p><p><img src="' + _imports_4 + '" alt="image-20231213184701841"></p><p><strong>添加文件描述信息模板等</strong></p><p><img src="' + _imports_5 + '" alt="image-20231213183352489"></p><h3 id="_2-快捷键" tabindex="-1"><a class="header-anchor" href="#_2-快捷键" aria-hidden="true">#</a> 2, 快捷键</h3><p><strong>捕获异常</strong></p><p>ctrl + alt + t</p><p><img src="' + _imports_6 + '" alt="image-20231213184038362"></p><p><strong>快速换行</strong></p><p>shift + enter</p><p><strong>添加书签和书签管理</strong></p><p>shift + F11</p><p><img src="' + _imports_7 + '" alt="image-20231213184729588"></p><p><strong>打开本地 Git 仓库</strong></p><p>alt + F12</p><h3 id="_3-工具插件" tabindex="-1"><a class="header-anchor" href="#_3-工具插件" aria-hidden="true">#</a> 3, 工具插件</h3><p><img src="' + _imports_8 + '" alt="image-20231213191555684"></p><ul><li>Extra Icon 文件图标</li><li>Alibaba Java Coding 检测代码规范</li><li>SonarLint 优化代码检查</li><li>Tabnine Ai Code 代码提示</li><li>GenerateAllSetter 快速生成set 方法</li><li>GsonFormatPlus 快速将json 转换为类</li><li>Grep Console 控制台颜色</li><li>ignore 创建 ignore</li></ul><h3 id="_4-使用技巧" tabindex="-1"><a class="header-anchor" href="#_4-使用技巧" aria-hidden="true">#</a> 4, 使用技巧</h3><p>1 ,</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>写代码时用 Alt-Insert （ Code|Generate… ）可以创建类里面任何字段的 getter 与 setter 方法。&lt;?xml:namespace prefix = v ns = “urn:schemas-microsoft-com:vml” /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、右键点击断点标记（在文本的左边栏里）激活速查菜单，你可以快速设置 enable/disable 断点或者条件它的属性。</p><p>3 、 CodeCompletion （代码完成）属性里的一个特殊的变量是，激活 Ctrl-Alt-Space 可以完成在或不在当前文件里的类名。如果类没有引入则 import 标志会自动创建。</p><p>4 、使用 Ctrl-Shift-V 快捷键可以将最近使用的剪贴板内容选择插入到文本。使用时系统会弹出一个含有剪贴内容的对话框，从中你可以选择你要粘贴的部分。</p><p>5 、利用 CodeCompletion （代码完成）属性可以快速地在代码中完成各种不同地语句，方法是先键入一个类名地前几个字母然后再用 Ctrl-Space 完成全称。如果有多个选项，它们会列在速查列表里。</p><p>6 、用 Ctrl-/ 与 Ctrl-Shift-/ 来注释 / 反注释代码行与代码块。 -/ 用单行注释标记（“ //… ”）来注释 / 反注释当前行或者选择地代码块。而 Ctrl-Shift-/ 则可以用块注释标记（“ /…/ ”）把所选块包围起来。要反注释一个代码块就在块中任何一个地方按 Ctrl-Shift-/ 即可。</p><p>7 、按 Alt-Q （ View|Context Info ）可以不需要移动代码就能查看当前方法地声明。连续按两次会显示当前所编辑的类名。</p><p>8 、使用 Refactor|Copy Class… 可以创建一个所选择的类的“副本”。这一点很有用，比如，在你想要创建一个大部分内容都和已存在类相同的类时。</p><p>9 、在编辑器里 Ctrl-D 可以复制选择的块或者没有所选块是的当前行。</p><p>10 、 Ctrl-W （选择字）在编辑器里的功能是先选择脱字符处的单词，然后选择源代码的扩展区域。举例来说，先选择一个方法名，然后是调用这个方法的表达式，然后是整个语句，然后包容块，等等。</p><p>11 、如果你不想让指示事件细节的“亮球”图标在编辑器上显示，通过按 Alt-Enter 组合键打开所有事件列表然后用鼠标点击它就可以把这个事件文本附件的亮球置成非活动状态。 这样以后就不会有指示特殊事件的亮球出现了，但是你仍然可以用 Alt-Enter 快捷键使用它。</p><p>12 、在使用 CodeCompletion 时，可以用逗点（ . ）字符，逗号（，）分号（；），空格和其它字符输入弹出列表里的当前高亮部分。选择的名字会随着输入的字符自动输入到编辑器里。</p><p>13 、在任何工具窗口里使用 Escape 键都可以把焦点移到编辑器上。 Shift-Escape 不仅可以把焦点移到编辑器上而且还可以隐藏当前（或最后活动的）工具窗口。 F12 键把焦点从编辑器移到最近使用的工具窗口。</p><p>14 、在调试程序时查看任何表达式值的一个容易的方法就是在编辑器中选择文本（可以按几次 Ctrl-W 组合键更有效地执行这个操作）然后按 Alt-F8 。</p><p>15 、要打开编辑器脱字符处使用的类或者方法 Java 文档的浏览器，就按 Shift-F1 （右键菜单的 External JavaDoc ）。 要使用这个功能须要把加入浏览器的路径，在“ General ”选项中设置（ Options | IDE Settings ），另外还要把创建的 Java 文档加入到工程中（ File | Project Properties ）。</p><p>16 、用 Ctrl-F12 （ View | File Structure Popup ）键你可以在当前编辑的文件中快速导航。 这时它会显示当前类的成员列表。选中一个要导航的元素然后按 Enter 键或 F4 键。要轻松地定位到列表中的一个条目，只需键入它的名字即可。</p><p>17 、在代码中把光标置于标记符或者它的检查点上再按 Alt-F7 （右键菜单中的 Find Usages… ）会很快地查找到在整个工程中使用地某一个类、方法或者变量的位置。</p><p>18 、按 Ctrl-N （ Go to | Class… ）再键入类的名字可以快速地在编辑器里打开任何一个类。从显示出来的下拉列表里选择类。 同样的方法你可以通过使用 Ctrl-Shift-N （ Go to | File… ）打开工程中的非 Java 文件。</p><p>19 、要导航代码中一些地方使用到的类、方法或者变量的声明，把光标放在查看项上再按 Ctrl-B 即可。也可以通过按 Ctrl 键的同时在查看点上单击鼠标键调转到声明处。</p><p>20 、把光标放到查看点上再按 Ctrl-Alt-B 可以导航到一个抽象方法的实现代码。</p><p>21 、要看一个所选择的类的继承层次，按 Ctrl-H （ Browse Type Hierarchy ）即可。也可以激活编辑器中的继承关系视图查看当前编辑类的继承关系。22 、使用 Ctrl-Shift-F7 （ Search | Highlight Usages in File ）可以快速高亮显示当前文件中某一变量的使用地方。按 Escape 清除高亮显示。</p><p>23 、用 Alt-F3 （ Search | Incremental Search ）在编辑器中实现快速查查找功能。 在“ Search for: ”提示工具里输入字符，使用箭头键朝前和朝后搜索。按 Escape 退出。</p><p>24 、按 Ctrl-J 组合键来执行一些你记不起来的 Live Template 缩写。比如，键“ it ”然后按 Ctrl-J 看看有什么发生。</p><p>25 、 Introduce Variable 整合帮助你简化代码中复杂的声明。举个例子，在下面的代码片断里，在代码中选择一个表达式：然后按 Ctrl-Alt-V 。</p><p>26 、 Ctrl-Shift-J 快捷键把两行合成一行并把不必要的空格去掉以匹配你的代码格式。</p><p>27 、 Ctrl-Shift-Backspace （ Go to | Last Edit Location ）让你调转到代码中所做改变的最后一个地方。 多按几次 Ctrl-Shift-Backspace 查看更深的修改历史。</p><p>28 、用 Tools | Reformat Code… 根据你的代码样式参考（查看 Options | IDE Setting | Code Style ）格式化代码。 使用 Tools | Optimize Imports… 可以根据设置（查看 Options | IDE Setting | Code Style | Imports ）自动“优化” imports （清除无用的 imports 等）。</p><p>29 、使用 IDEA 的 Live Templates | Live Templates 让你在眨眼间创建许多典型代码。比如，在一个方法里键入。再按 Tab 键看有什么事情发生了。 用 Tab 键在不同的模板域内移动。查看 Options | Live Templates 获取更多的细节。</p><p>30 、要查看一个文件中修改的本地历史，激活右键菜单里的 Local VCS | Show History… 。也许你可以导航不同的文件版本，看看它们的不同之处再回滚到以前的任何一个版本吧。 使用同样的右键菜单条目还可以看到一个目录里修改的历史。有了这个特性你就不会丢失任何代码了。</p><p>31 、如果要了解主菜单里每一个条目的用途，把鼠标指针移到菜单条目上再应用程序框架的底部的状态栏里就会显示它们的一些简短描述，也许会对你有帮助。</p><p>32 、要在编辑器里显示方法间的分隔线，打开 Options | IDE Settings | Editor ，选中“ Show method separators ”检查盒（ checkbox ）。</p><p>33 、用 Alt-Up 和 Alt-Down 键可以在编辑器里不同的方法之间快速移动。</p><p>34 、用 F2/Shift-F2 键在高亮显示的语法错误间跳转。用 Ctrl-Alt-Down/Ctrl-Alt-Up 快捷键则可以在编译器错误信息或者查找操作结果间跳转。</p><p>35 、通过按 Ctrl-O （ Code | Override Methods… ）可以很容易地重载基本类地方法。要完成当前类 implements 的（或者抽象基本类的）接口的方法，就使用 Ctrl-I （ Code | Implement Methods… ）。</p><p>36 、如果光标置于一个方法调用的括号间，按 Ctrl-P 会显示一个可用参数的列表。</p><p>37 、要快速查看编辑器脱字符处使用的类或方法的 Java 文档，按 Ctrl-Q （在弹出菜单的 Show Quick JavaDoc 里）即可。</p><p>38 、像 Ctrl-Q （ Show Quick JavaDoc 显示简洁 Java 文档）， Ctrl-P （ Show Parameter Info 显示参数信息）， Ctrl-B （ Go to Declaration 跳转到声明）， Shift-F1 （ External JavaDoc 外部 Java 文档）以及其它一些快捷键不仅可以在编辑器里使用，也可以应用在代码完成右键列表里。</p><p>39 、 Ctrl-E （ View | Recent Files ）弹出最近访问的文件右键列表。选中文件按 Enter 键打开。</p><p>40 、在 IDEA 中可以很容易地对你的类，方法以及变量进行重命名并在所有使用到它们的地方自动更正。试一下，把编辑器脱字符置于任何一个变量名字上然后按 Shift-F6 （ Refactor | Rename… ）。在对话框里键入要显示地新名字再按 Enter 。你会浏览到使用这个变量地所有地方然后按“ Do Refactor ”按钮结束重命名操作。</p><p>41 、要在任何视图（ Project View 工程视图， Structure View 结构视图或者其它视图）里快速选择当前编辑地部分（类，文件，方法或者字段），按 Alt-F1 （ View | Select in… ）。</p><p>42 、在“ new ”字符后实例化一个已知类型对象时也许你会用到 SmartType 代码完成这个特性。比如，键入再按 Ctrl-Shift-Space ：</p><p>43 、通过使用 SmartType 代码完成，在 IDEA 中创建接口的整个匿名 implementation 也是非常容易的，比如，对于一些 listener （监听器），可以键入 Component component; component.addMouseListener( new );</p><p>然后再按 Ctrl-Shift-Space 看看有什么发生了。</p><p>44 、在你需要设置一个已知类型的表达式的值时用 SmartType 代码完成也很有帮助。比如，键入 String s = ( 再按 Ctrl-Shift-Space 看看会有什么出现。</p><p>45 、在所有视图里都提供了速查功能：在树里只需键入字符就可以快速定位到一个条目。</p><p>46 、当你想用代码片断捕捉异常时，在编辑器里选中这个片断，按 Ctrl-Alt-T （ Code | Surround with… ）然后选择“ try/catch ”。它会自动产生代码片断中抛出的所有异常的捕捉块。在 Options | File Templates | Code tab 中你还可以自己定制产生捕捉块的模板。 用列表中的其它项可以包围别的一些结构。</p><p>47 、在使用代码完成时，用 Tab 键可以输入弹出列表里的高亮显示部分。 不像用 Enter 键接受输入，这个选中的名字会覆盖掉脱字符右边名字的其它部分。这一点在用一个方法或者变量名替换另一个时特别有用。</p><p>48 、在声明一个变量时代码完成特性会给你显示一个建议名。比如，开始键入“ private FileOutputStream ”然后按 Ctrl-Space 在 Options | IDE Setting | Code Style 中还可以为本地变量，参数，实例及静态字段定制名字。</p><h3 id="_5-调试" tabindex="-1"><a class="header-anchor" href="#_5-调试" aria-hidden="true">#</a> 5, 调试</h3><ol><li>调试按钮解释</li></ol><p><img src="' + _imports_9 + '" alt="image-20231214123059723"></p><blockquote><p>注意：debug的过程中，也可以设置断点。</p></blockquote><ol start="2"><li>删除调试断点</li></ol><p><img src="' + _imports_10 + '" alt="image-20231214123818829"></p><ol start="3"><li>设置调试可以进入源码</li></ol><p><img src="' + _imports_11 + '" alt="image-20231214123024654"></p><h2 id="二-java-基础" tabindex="-1"><a class="header-anchor" href="#二-java-基础" aria-hidden="true">#</a> 二, Java 基础</h2><p><strong>int[] 和 ArrayList</strong></p><p>在Java中，int[] 和 ArrayList 是两种不同的数据结构，它们有以下区别：</p><blockquote><ol><li>类型：int[] 是一个原生的数组类型，而 ArrayList 是 Java 集合框架中的一个类。</li><li>大小：int[] 是一个固定大小的数组，一旦创建后，大小就无法改变。而 ArrayList 是一个可变大小的动态数组，可以根据需要自动调整大小。</li><li>泛型：int[] 只能存储 int 类型的元素，而 ArrayList 可以存储任意对象类型。ArrayList 使用泛型，可以指定存储的元素类型，例如 ArrayList <em>Integer</em> 只能存储 Integer 类型的对象。</li><li>功能：int[] 是基本的数组类型，提供了一些基本操作，如通过索引访问元素、修改元素值等。ArrayList 是一个类，提供了丰富的方法和功能，如添加元素、删除元素、查找元素、插入元素、排序等。</li><li>自动装箱和拆箱：int[] 中的元素是原生数据类型，没有自动装箱和拆箱的概念。而 ArrayList 中的元素是对象，当需要存储原生数据类型时，会自动进行装箱和拆箱操作。</li><li>内存占用：int[] 在内存中占用的空间比 ArrayList 小，因为 int[] 只存储原生数据类型的值，而 ArrayList 存储的是对象，并且还需要额外的内存来存储对象的引用。</li></ol></blockquote><p>2, 函数方法的重载</p>', 93);
const _hoisted_94 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_94);
}
const JavaSE_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JavaSE.html.vue"]]);
export {
  JavaSE_html as default
};
