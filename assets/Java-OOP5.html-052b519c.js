import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-830a5e72.js";
const _imports_0 = "/bowenBlog/assets/image-20231226161303413-a0a02718.png";
const _imports_1 = "/bowenBlog/assets/image-20231227093532656-ce55fd98.png";
const _imports_2 = "/bowenBlog/assets/image-20231227103555275-3819e05f.png";
const _imports_3 = "/bowenBlog/assets/image-20231227103604812-be77bf97.png";
const _imports_4 = "/bowenBlog/assets/image-20231227103616809-e0769992.png";
const _imports_5 = "/bowenBlog/assets/image-20231227103249055-d7224ff0.png";
const _imports_6 = "/bowenBlog/assets/image-20231227103304191-fe55e13c.png";
const _imports_7 = "/bowenBlog/assets/image-20231227120434174-e5c8230c.png";
const _imports_8 = "/bowenBlog/assets/image-20231227121451557-efdb8ba1.png";
const _imports_9 = "/bowenBlog/assets/image-20231227121804574-42556d75.png";
const _imports_10 = "/bowenBlog/assets/image-20231228091208045-54b25574.png";
const _imports_11 = "/bowenBlog/assets/image-20231228091223875-a6f0cbf5.png";
const _imports_12 = "/bowenBlog/assets/image-20231228091234074-c3cce63e.png";
const _imports_13 = "/bowenBlog/assets/image-20231228091355632-8707cb28.png";
const _imports_14 = "/bowenBlog/assets/image-20231228091437646-817075c7.png";
const _imports_15 = "/bowenBlog/assets/image-20231227164144719-e292d6e7.png";
const _imports_16 = "/bowenBlog/assets/image-20231227174555358-dcd0771c.png";
const _imports_17 = "/bowenBlog/assets/image-20231229091640589-8f0508e2.png";
const _imports_18 = "/bowenBlog/assets/image-20231229091823767-8d546776.png";
const _imports_19 = "/bowenBlog/assets/image-20231229171653406-5f495429.png";
const _imports_20 = "/bowenBlog/assets/image-20231229171758356-2314bc98.png";
const _imports_21 = "/bowenBlog/assets/image-20231228094808511-8cf333d1.png";
const _imports_22 = "/bowenBlog/assets/image-20231228095849288-4a4f2ff9.png";
const _imports_23 = "/bowenBlog/assets/image-20231228100356721-7e9c94ec.png";
const _imports_24 = "/bowenBlog/assets/image-20231228100218436-6d9f2a73.png";
const _imports_25 = "/bowenBlog/assets/image-20231228101807739-b9cb784b.png";
const _imports_26 = "/bowenBlog/assets/image-20231228104123221-ee5f656f.png";
const _imports_27 = "/bowenBlog/assets/image-20231228142746205-65f536e1.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="特殊文件与日志技术" tabindex="-1"><a class="header-anchor" href="#特殊文件与日志技术" aria-hidden="true">#</a> <strong>特殊文件与日志技术</strong></h1><h2 id="一-属性文件" tabindex="-1"><a class="header-anchor" href="#一-属性文件" aria-hidden="true">#</a> 一, 属性文件</h2><h3 id="_1-特殊文件" tabindex="-1"><a class="header-anchor" href="#_1-特殊文件" aria-hidden="true">#</a> 1, 特殊文件</h3><blockquote><p>两种特殊的文本文件，一种是properties文件，还有一种是 xml 文件。</p></blockquote><p>properties文件和xml文件介绍：</p><ul><li>后缀为 .properties 的文件，称之为属性文件，它可以很方便的存储一些类似于键值对的数据。经常当做软件的配置文件使用。</li><li>xml 文件能够表示更加复杂的数据关系，比如要表示多个用户的用户名、密码、家乡、性别等。在后面，也经常当做软件的配置文件使用。(早期的前后端通信也是用到了 xml 文件格式, 现在使用的是 json文件格式)</li></ul><p><strong>只需要把握三点：</strong></p><ul><li>特殊文件的特点和作用</li><li>如何读取它里面的数据</li><li>如何使用程序把数据写到特殊文件中</li></ul><h3 id="_2-properties属性文件" tabindex="-1"><a class="header-anchor" href="#_2-properties属性文件" aria-hidden="true">#</a> 2, Properties属性文件</h3><blockquote><p>属性文件（Properties file）是一种普遍用于存储配置数据的文本文件格式。它通常采用<code>.properties</code>作为文件扩展名，并使用键值对的形式来表示数据。</p></blockquote><p><strong>示例</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 注释</span>\n\n<span class="token comment"># 不能添加空格, 分号, 否则会被认为是值的一部分</span>\n<span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">ZhangSan</span>\n<span class="token key attr-name">age</span><span class="token punctuation">=</span><span class="token value attr-value">18</span>\n<span class="token key attr-name">admin</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>\n<span class="token key attr-name">pwd</span><span class="token punctuation">=</span><span class="token value attr-value">123</span>\n\n<span class="token comment"># 每一行包含一个键值对，使用等号（=）将键和值分隔开。键和值都可以是字符串，没有特定的数据类型限制。属性文件中可以包含任意数量的键值对，可以根据需要进行扩展和修改。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>属性文件的格式：</strong></p><ul><li>属性文件后缀以<code>.properties</code>结尾</li><li>属性文件里面的每一行都是一个键值对，键和值中间用=隔开。比如: <code>admin=123456</code></li><li><code>#</code>表示这样是注释信息，是用来解释这一行配置是什么意思。</li><li>每一行末尾不要习惯性加分号，以及空格等字符；不然会把分号，空格会当做值的一部分。</li><li>键不能重复，值可以重复</li></ul><p>示例属性文件的内容：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 示例属性文件</span>\n\n<span class="token comment"># 数据库配置</span>\n<span class="token key attr-name">db.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>\n<span class="token key attr-name">db.port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span>\n<span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>\n<span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">secretpassword</span>\n\n<span class="token comment"># 日志配置</span>\n<span class="token key attr-name">log.level</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span>\n<span class="token key attr-name">log.filepath</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/application.log</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在Java中，可以使用<code>java.util.Properties</code>类来读取和写入属性文件。该类提供了方法来加载属性文件、获取属性值，并支持将属性文件的内容存储回文件。</p></blockquote><p>读取属性文件中的数据，需要使用Properties，Properties是Map接口下面的一个实现类，所以Properties也是一种双列集合，用来存储键值对。但是一般不会把它当做集合来使用。Properties类的对象，用来表示属性文件，可以用来读取属性文件中的键值对。</p><p>使用Properties读取属性文件中的键值对，需要用到的方法如下：</p><p><img src="' + _imports_0 + '" alt="image-20231226161303413"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       	<span class="token comment">// 创建 Properties 对象，用于存储属性</span>\n        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;config.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          	<span class="token comment">// 加载属性文件到 Properties 对象</span>\n            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 获取属性值</span>\n            <span class="token class-name">String</span> dbHost <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> dbPort <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;db.password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          	<span class="token comment">// 输出获取的属性值</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Database Host: &quot;</span> <span class="token operator">+</span> dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Database Port: &quot;</span> <span class="token operator">+</span> dbPort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Username: &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Password: &quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 假设属性文件名为config.properties，通过FileInputStream将属性文件加载到Properties对象中。然后，使用getProperty()方法获取特定键的值。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-xml-文件" tabindex="-1"><a class="header-anchor" href="#二-xml-文件" aria-hidden="true">#</a> 二, XML 文件</h2><hr><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1, 介绍</h3><blockquote><p>XML（eXtensible Markup Language）是一种用于存储和传输数据的标记语言。它使用标签来描述数据的结构和含义，具有自我描述性和可扩展性，被广泛应用于数据交换和配置文件等领域。</p></blockquote><p>基本示例</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>\n<span class="token comment">&lt;!--文档声明, 版本, 解码类型--&gt;</span>\n\n<span class="token comment">&lt;!--唯一根标签, 根标签中的其他标签是双标签--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>zs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-xml-文件的基本特点" tabindex="-1"><a class="header-anchor" href="#_2-xml-文件的基本特点" aria-hidden="true">#</a> 2, XML 文件的基本特点</h3><ol><li><strong>标签结构</strong>：XML使用标签来标识数据的元素，标签由开始标记和结束标记组成，例如<code>&lt;book&gt;...&lt;/book&gt;</code>。标签可以嵌套形成层次结构，表示数据之间的关系。</li><li><strong>元素</strong>：XML的数据由元素组成，每个元素可以包含其他元素、文本内容或属性。元素是XML文档的基本单元，用于表示数据的逻辑单元。</li><li><strong>属性</strong>：XML的元素可以包含属性，属性用于提供关于元素的附加信息。属性由属性名和属性值组成，位于元素的开始标记中，例如<code>&lt;book id=&quot;123&quot;&gt;</code>。</li><li><strong>文本内容</strong>：XML的元素可以包含文本内容，用于存储实际的数据值。文本内容位于元素的开始标记和结束标记之间，例如<code>&lt;title&gt;XML Basics&lt;/title&gt;</code>。</li><li><strong>自定义结构</strong>：XML允许用户定义自己的标签和结构，以适应特定的数据和应用需求。这使得XML具有很高的灵活性和可扩展性。</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>library</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>XML Basics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Web Development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>Jane Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>library</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么放弃了 xml 文件作为前后端通信 ?</strong></p><p>在过去，XML是一种常见的前后端通信格式，特别是在Web服务中。然而，随着时间的推移，XML逐渐被其他格式所取代，例如JSON（JavaScript Object Notation）。</p><ol><li><strong>冗余和复杂性</strong>：XML的标签结构和自我描述性使得它的数据量相对较大，而且解析和处理XML需要更多的资源和时间。相比之下，JSON使用简洁的键值对结构，数据量更小，解析和处理效率更高。</li><li><strong>可读性</strong>：虽然XML对人类可读，但其冗长的标签结构和嵌套层次使得阅读和编写XML文档相对繁琐。相比之下，JSON使用简洁的语法，更易于理解和编辑。</li><li><strong>编码和解码的复杂性</strong>：XML的解析和处理需要使用XML解析器，并且需要编写复杂的代码来提取和操作数据。相比之下，JSON在大多数编程语言中都有内置的支持，解析和处理JSON数据更加简单和直观。</li><li><strong>前端开发趋势</strong>：随着前端开发的发展，JavaScript成为了广泛使用的语言，并且JSON与JavaScript的对象表示法非常相似，可以直接在前端进行解析和处理。这使得JSON成为前后端数据交互的首选格式。</li><li><strong>性能和网络开销</strong>：由于XML的冗长和复杂性，它需要更多的带宽和处理能力来传输和处理。相比之下，JSON的数据量更小，可以减少网络开销，并提高性能</li></ol><p>xml 文件现已通常用于 Java 项目的配置文件</p><blockquote><p>JSON已经成为了更流行和广泛接受的前后端通信格式。它简单、轻量、易于解析和处理，并且与现代的前端开发技术紧密集成</p></blockquote><h3 id="_3-xml-文件解析" tabindex="-1"><a class="header-anchor" href="#_3-xml-文件解析" aria-hidden="true">#</a> 3, XML 文件解析</h3><h3 id="_4-xml-文件写入" tabindex="-1"><a class="header-anchor" href="#_4-xml-文件写入" aria-hidden="true">#</a> 4, XML 文件写入</h3><h3 id="_5-xml-文件约束" tabindex="-1"><a class="header-anchor" href="#_5-xml-文件约束" aria-hidden="true">#</a> 5, XML 文件约束</h3><blockquote><p>XML文件约束是一种用于定义XML文件结构、元素和属性的规范。它可以帮助验证XML文档的正确性，确保文档符合特定的规则和要求。常见的XML文件约束包括DTD（文档类型定义）和XML Schema。</p></blockquote><p><strong>DTD</strong>（文档类型定义）： DTD是一种早期的XML文件约束规范，使用DTD可以定义XML文档的结构、元素、属性和实体。DTD使用一系列的规则和语法来描述XML文档的结构，包括元素的声明、属性的声明、实体定义等。DTD以独立的方式存在，可以通过在XML文档中引用DTD来验证文档的正确性。</p><div class="language-dtd line-numbers-mode" data-ext="dtd"><pre class="language-dtd"><code>&lt;!DOCTYPE document [\n  &lt;!ELEMENT document (title, content)&gt;\n  &lt;!ELEMENT title (#PCDATA)&gt;\n  &lt;!ELEMENT content (#PCDATA)&gt;\n]&gt;\n&lt;document&gt;\n  &lt;title&gt;XML Document&lt;/title&gt;\n  &lt;content&gt;This is the content of the document.&lt;/content&gt;\n&lt;/document&gt;\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>XML Schema</strong>： XML Schema是一种更为强大和灵活的XML文件约束语言。与DTD不同，XML Schema是用XML编写的，它提供了更丰富的语法和功能来定义XML文档的结构和约束。XML Schema支持数据类型定义、复杂类型、命名空间等高级特性，并且可以更精确地定义元素和属性的结构、约束和关系。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>document<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>schema</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>document</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>XML Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>content</span><span class="token punctuation">&gt;</span></span>This is the content of the document.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>content</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>document</span><span class="token punctuation">&gt;</span></span>\n```\n在上述示例中，使用XML Schema定义了一个名为`document`的元素，它包含了`title`和`content`两个子元素，并指定了它们的数据类型为字符串（`xs:string`）。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-日志技术" tabindex="-1"><a class="header-anchor" href="#三-日志技术" aria-hidden="true">#</a> 三，日志技术</h2><hr><h3 id="_1-日志概述" tabindex="-1"><a class="header-anchor" href="#_1-日志概述" aria-hidden="true">#</a> 1, 日志概述</h3><p>想搞清楚什么是日志，其实可以通过下面几个问题来了解的。</p><ul><li>系统系统能记住某些数据被谁操作，比如被谁删除了？</li><li>想分析用户浏览系统的具体情况，比如挖掘用户的具体喜好？</li><li>当系统在开发中或者上线后出现了Bug，崩溃了，该通过什么去分析，定位Bug?</li></ul><p>而日志就可以帮我们解决以上的问题。所以日志就好比生活中的日记，日记可以记录生活中的点点滴滴；而程序中的日志，通常就是一个文件，里面记录了程序运行过程中产生的各种数据。</p><p><strong>日志技术有如下好处</strong></p><ol><li>日志可以将系统执行的信息，方便的记录到指定位置，可以是控制台、可以是文件、可以是数据库中。</li><li>日志可以随时以开关的形式控制启停，无需侵入到源代码中去修改。</li></ol><p>日志输出到控制台示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hbnu<span class="token punctuation">.</span>code</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @Description:\n * @Author: Hu Bowen\n * @ProjectName: Java_code\n * @User: bowen\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LoggerExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;This is an information log message.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">&quot;This is a warning log message.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">severe</span><span class="token punctuation">(</span><span class="token string">&quot;This is a severe log message.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通常我们记录日志, 会有专门的日志文件来记录我们的操作</p></blockquote><h3 id="_2-日志体系" tabindex="-1"><a class="header-anchor" href="#_2-日志体系" aria-hidden="true">#</a> 2, 日志体系</h3><blockquote><p>在行内，其实有很多日志框架给开发者使用。所谓日志框架就是由一些牛人或者第三方公司已经做好的实现代码，后来者就可以直接拿过去使用。</p><p>日志框架有很多种，比如有JUL（java.util.logging）、Log4j、logback等。但是这些日志框架如果使用的API方法都不一样的话，使用者的学习成本就很高。为了降低程序员的学习压力，行内提供了一套日志接口，然后所有的日志框架都按照日志接口的API来实现就可以了。</p></blockquote><p><strong>日志框架和日志接口</strong></p><p><img src="' + _imports_1 + '" alt="image-20231227093532656"></p><p>推荐使用Logback日志框架，也在行业中最为广泛使用的。Logback日志分为哪几个模块：</p><ul><li>logback-core 基础模块，是其它两个模块依赖的基础，必须有</li><li>logback-classic 完整实现了slf4j API的模块，必须有</li><li>logback-access 与Tomcat和Jetty等Servlet容器集成，以提供Http访问的日志功能。后面会用到</li></ul><p>想使用Logback日志框架，至少需要在项目中整合三个模块：</p><ul><li>slf4j-api: 日志接口</li><li>logback-core</li><li>logback-classic</li></ul><h3 id="_3-logback快速入门" tabindex="-1"><a class="header-anchor" href="#_3-logback快速入门" aria-hidden="true">#</a> 3, Logback快速入门</h3><p>由于Logback是第三方提供的技术，所以首先需要啊将Jar包引入到项目中，具体步骤如下:</p><ol><li>在资料中找到<code>slftj-api.jar、logback-core.jar、logback-classes.jar</code> 这三个jar包，复制一下</li><li>在当前模块下面新建一个lib文件夹，把刚刚复制的三个jar包都粘贴到此处</li><li>从资料中找到<code>logback.xml</code>配置文件，将此文件复制粘贴到src目录下（必须是src目录）</li><li>然后就可以开始写代码了，在代码中创建一个日志记录日对象</li><li>开始记录日志，代码如下</li></ol><h3 id="_4-日志配置文件" tabindex="-1"><a class="header-anchor" href="#_4-日志配置文件" aria-hidden="true">#</a> 4, 日志配置文件</h3><p>Logback提供了一个核心配置文件logback.xml，日志框架在记录日志时会读取配置文件中的配置信息，从而记录日志的形式。具体可以做哪些配置呢？</p><ol><li>可以配置日志输出的位置是文件、还是控制台</li><li>可以配置日志输出的格式</li><li>还可以配置日志关闭和开启、以及哪些日志输出哪些日志不输出。</li></ol><p><img src="' + _imports_2 + '" alt="image-20231227103555275"></p><p>控制打开和关闭日志，如下：</p><p><img src="' + _imports_3 + '" alt="image-20231227103604812"></p><p>控制日志的输出的格式，日志格式是由一些特殊的符号组成，可以根据需要删减不想看到的部分。比如不想看到线程名那就不要[%thread]。但是不建议同学们更改这些格式，因为这些都是日志很基本的信息。</p><p><img src="' + _imports_4 + '" alt="image-20231227103616809"></p><h3 id="_5-日志配置级别" tabindex="-1"><a class="header-anchor" href="#_5-日志配置级别" aria-hidden="true">#</a> 5, 日志配置级别</h3><p>日志级别指的是日志信息的类型，日志都会分级别，常见的日志级别如下（优先级依次升高）：</p><p><img src="' + _imports_5 + '" alt="image-20231227103249055"></p><p>配置日志级别，如下：</p><p><img src="' + _imports_6 + '" alt="image-20231227103304191"></p><p>Logback 只输出大于或者等于核心配置文件配置的日志级别信息。小于配置级别的日志信息，不被记录。</p><ul><li>配置的是trace，则trace、debug、info、warn、error级别的日志都被输出</li><li>配置的是debug, 则debug、info、warn、error级别的日志被输出</li><li>配置的是info,则info、warn、error级别的日志被输出</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h1 id="java-多线程" tabindex="-1"><a class="header-anchor" href="#java-多线程" aria-hidden="true">#</a> <strong>Java 多线程</strong></h1><h2 id="一-线程的创建" tabindex="-1"><a class="header-anchor" href="#一-线程的创建" aria-hidden="true">#</a> 一, 线程的创建</h2><hr><p>之前写过的程序，其实都是单线程程序，代码都是从上下到执行。但有些程序是多线程程序，</p><p>如<strong>12306网站</strong>就是支持多线程的，因为同时可以有很多人一起进入网站购票，而且每一个人互不影响。再比如百度网盘，可以同时下载或者上传多个文件。这些程序中其实就有多条执行路径，每一条执行执行路径就是一条线程，所以这样的程序就是多线程程序。Java提供了几种创建线程的方式。</p><h3 id="_1-继承thread类" tabindex="-1"><a class="header-anchor" href="#_1-继承thread类" aria-hidden="true">#</a> 1, <strong>继承Thread类</strong></h3><p><strong>继承Thread类</strong></p><p>Java为开发者提供了一个类叫做Thread，此类的对象用来表示线程。创建线程并执行线程的步骤如下：</p><ol><li>定义一个子类继承Thread类，并重写run方法</li><li>创建Thread的子类对象</li><li>调用start方法启动线程（启动线程后，会自动执行run方法中的代码）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>\n    <span class="token comment">// 2、必须重写Thread类的run方法</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 描述线程的执行任务。</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程MyThread输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token comment">// main方法是由一条默认的主线程负责执行。</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 3、创建MyThread线程类的对象代表一个线程</span>\n        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 4、启动线程（自动执行run方法的）</span>\n        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程main输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>t.start() 表示启动线程, 而不是直接去调用 run方法, 会被程序认为是一个普通的类的实例对象的方法</p></blockquote><p>打印结果如下图所示，我们会发现MyThread和main线程在相互抢夺CPU的执行权（<strong>注意：哪一个线程先执行，哪一个线程后执行，目前我们是无法控制的，每次输出结果都会不一样</strong>）</p><p><img src="' + _imports_7 + '" alt="image-20231227120434174"></p><p><strong>最后我们还需要注意一点</strong>：不能直接去调用run方法，如果直接调用run方法就不认为是一条线程启动了，而是把Thread当做一个普通对象，此时run方法中的执行的代码会成为主线程的一部分。此时执行结果是这样的。</p><h3 id="_2-实现runnable接口" tabindex="-1"><a class="header-anchor" href="#_2-实现runnable接口" aria-hidden="true">#</a> 2, <strong>实现Runnable接口</strong></h3><p>Java为开发者提供了一个<strong>Runnable</strong>接口，该接口中只有一个run方法，意思就是通过Runnable接口的实现类对象专门来表示线程要执行的任务。具体步骤如下:</p><ol><li>先写一个Runnable接口的实现类，重写run方法(这里面就是线程要执行的代码)</li><li>再创建一个Runnable实现类的对象</li><li>创建一个Thread对象，把Runnable实现类的对象传递给Thread</li><li>调用Thread对象的start()方法启动线程（启动后会自动执行Runnable里面的run方法）</li></ol><blockquote><p>实现了这个接口 , 就可以创建一个任务类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 1、定义一个任务类，实现Runnable接口\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>\n    <span class="token comment">// 2、重写runnable的run方法</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 线程要执行的任务。</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程输出 ===》&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 3、创建任务对象。</span>\n        <span class="token class-name">Runnable</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 4、把任务对象交给一个线程对象处理。</span>\n        <span class="token comment">//  public Thread(Runnable target)</span>\n        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程main输出 ===》&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面代码，结果如下图所示（注意：也会出现下面交替执行的效果，也是正常的）:</p><p><img src="' + _imports_8 + '" alt="image-20231227121451557"></p><h3 id="_3-匿名内部类" tabindex="-1"><a class="header-anchor" href="#_3-匿名内部类" aria-hidden="true">#</a> 3, 匿名内部类</h3><p><strong>使用匿名内部类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 创建线程实例并启动</span>\n        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token comment">// 线程的实例</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> run <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程main输出 ==》&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token comment">// 启动线程</span>\n        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 主线程方法</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程main输出 ===》&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_9 + '" alt="image-20231227121804574"></p><h3 id="_4-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#_4-lambda-表达式" aria-hidden="true">#</a> 4, Lambda 表达式</h3><p>使用Java 8的Lambda表达式</p><blockquote><p>在Java 8及更高版本中，可以使用Lambda表达式来创建线程。通过将线程的执行逻辑作为Lambda表达式传递给<code>Thread</code>类的构造函数，可以简洁地创建线程。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建线程实例并启动</span>\n<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 线程的执行逻辑</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="callable接口" tabindex="-1"><a class="header-anchor" href="#callable接口" aria-hidden="true">#</a> <strong>Callable接口</strong></h3><blockquote><p>在Java中，<code>Callable</code>接口和<code>FutureTask</code>类是<strong>用于执行可返回结果的任务并获取任务结果的机制</strong>。</p></blockquote><p><code>Callable</code>接口是一个<strong>泛型接口</strong>，定义了一个<code>call()</code>方法，它可以在执行任务时返回一个结果，<strong>并且可以抛出异常</strong>。通常情况下，<code>Callable</code>接口与<code>ExecutorService</code>结合使用，以提交任务并获取任务结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 执行任务逻辑，并返回一个结果</span>\n        <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用ExecutorService提交任务并获取结果</span>\n<span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Integer</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;任务结果：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="futruetask类" tabindex="-1"><a class="header-anchor" href="#futruetask类" aria-hidden="true">#</a> <strong>FutrueTask类</strong></h3><p><code>FutureTask</code>类是<code>Future</code>接口的一个具体实现，它也实现了<code>Runnable</code>接口，因此可以作为一个可执行任务。<code>FutureTask</code>可以在构造时接受一个<code>Callable</code>对象，并提供了更多的方法来控制任务的状态和获取结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 执行任务逻辑，并返回一个结果</span>\n            <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Integer</span> result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;任务结果：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 调用futureTask.get()方法，我们可以获取任务的结果，同样地，如果任务还没有完成，get()方法将会阻塞当前线程直到任务完成并返回结果。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-线程的常用方法" tabindex="-1"><a class="header-anchor" href="#二-线程的常用方法" aria-hidden="true">#</a> 二, 线程的常用方法</h2><hr><p><strong>Java中线程的一些常用方法：</strong></p><ol><li><code>start()</code>: 启动线程，使其进入可运行状态，等待调度执行。</li><li><code>run()</code>: 线程执行的逻辑代码，需要在自定义的<code>Runnable</code>接口的实现类中重写该方法。</li><li><code>sleep(long millis)</code>: 使线程休眠指定的时间（以毫秒为单位）。</li><li><code>yield()</code>: 提示线程调度器当前线程愿意放弃当前的CPU执行时间，让其他线程先执行。</li><li><code>join()</code>: 等待该线程执行完毕，然后再继续执行当前线程。</li><li><code>interrupt()</code>: 中断线程，给线程发送中断信号。</li><li><code>isInterrupted()</code>: 判断线程是否被中断。</li><li><code>currentThread()</code>: 获取当前线程对象。</li><li><code>setName(String name)</code>: 设置线程的名称。</li><li><code>getName()</code>: 获取线程的名称。</li><li><code>isAlive()</code>: 判断线程是否处于活动状态。</li><li><code>setPriority(int priority)</code>: 设置线程的优先级，范围为1（最低）到10（最高）。</li><li><code>getPriority()</code>: 获取线程的优先级。</li></ol><h2 id="三-线程的安全问题" tabindex="-1"><a class="header-anchor" href="#三-线程的安全问题" aria-hidden="true">#</a> 三, 线程的安全问题</h2><hr><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1, 概述</h3><blockquote><p><strong>线程安全问题指的是，多个线程同时操作同一个共享资源的时候，可能会出现业务安全问题</strong>。下面通过一个取钱的案例给同学们演示一下。</p></blockquote><p>案例需求如下：</p><ul><li><strong>小明和小红是一对夫妻，他们有一个共享账户，余额是10万元</strong>，小红和小明同时来取钱，并且2人各自都在取钱10万元，可能出现什么问题呢？</li></ul><p><strong>小明和小红假设都是一个线程</strong>，本类每个线程都应该执行完三步操作，才算是完成的取钱的操作。但是真实执行过程可能是下面这样子的：</p><ul><li>小红线程只执行了判断余额是否足够（条件为true），然后CPU的执行权就被小红线程抢走了。</li><li>小红线程也执行了判断了余额是否足够（条件也是true）, 然后CPU执行权又被小明线程抢走了。</li><li>小明线程由于刚才已经判断余额是否足够了，直接执行第2步，吐出了10万元钱，此时共享账户月为0。然后CPU执行权又被小红线程抢走。</li><li>小红线程由于刚刚也已经判断余额是否足够了，直接执行第2步，吐出了10万元钱，此时共享账户月为-10万。</li><li>结果：<strong>2人都取了10万，银行亏了10万</strong>。</li></ul><p>这个取钱案例中，两个人把共享账户的钱都取了10万，但问题是只有10万块钱。这个取钱案例中的问题，就是线程安全问题的一种体现。</p><blockquote><p>核心问题, 在执行多线程的同一个方法操作的时候, 需要对这个方法实施限制, 来防止其他线程的并发操作, <strong>可以使用同步机制来实现。使用<code>synchronized</code>关键字可以创建同步方法或同步代码块</strong></p><ol><li>同步方法</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">synchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 方法体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>synchronized</code>关键字修饰方法，将整个方法声明为同步方法。当一个线程进入该方法执行时，会获得该方法所属对象的锁，其他线程将被阻塞，直到锁被释放。</p><ol start="2"><li>同步代码块</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 其他代码</span>\n    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 使用当前对象作为同步监视器</span>\n        <span class="token comment">// 需要限制的操作</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 其他代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>synchronized</code>关键字创建同步代码块。通过指定一个同步监视器（这里使用<code>this</code>表示当前对象），确保只有一个线程可以进入同步代码块执行。</p><p><strong>通过使用同步方法或同步代码块，可以限制多线程对同一方法的并发操作，保证线程安全性，避免数据竞争和并发问题。</strong></p></blockquote><h3 id="_2-线程安全问题示例" tabindex="-1"><a class="header-anchor" href="#_2-线程安全问题示例" aria-hidden="true">#</a> 2, 线程安全问题示例</h3><p>定义一个共享的账户类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> cardId<span class="token punctuation">;</span> <span class="token comment">// 卡号</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span> <span class="token comment">// 余额</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> cardId<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>cardId <span class="token operator">=</span> cardId<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// 取钱的一个方法 可能是小红和小明同时过来的</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 得到某个线程的名字，可能是小红，也可能是小明</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token operator">&gt;=</span>money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱&quot;</span><span class="token operator">+</span>money<span class="token operator">+</span><span class="token string">&quot;成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> money<span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱后，余额剩余：&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱：余额不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> cardId<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCardId</span><span class="token punctuation">(</span><span class="token class-name">String</span> cardId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>cardId <span class="token operator">=</span> cardId<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> money<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Account{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;cardId=&#39;&quot;</span> <span class="token operator">+</span> cardId <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, money=&quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个是取钱的线程类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义取线的线程类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Account</span> acc<span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token class-name">DrawThread</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acc<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> acc<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        acc<span class="token punctuation">.</span><span class="token function">drawMoney</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个测试类，在测试类中创建两个线程对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n        <span class="token class-name">Account</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">&quot;ICBC-110&quot;</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 创建两个线程，分别代表小红和小明，它前共享一个账户</span>\n        <span class="token keyword">new</span> <span class="token class-name">DrawThread</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">new</span> <span class="token class-name">DrawThread</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，执行效果如下。你会发现两个人都取了10万块钱，余额为-10完了。如下：</p><p><img src="' + _imports_10 + '" alt="image-20231228091208045"></p><h3 id="_3-线程同步解决方案" tabindex="-1"><a class="header-anchor" href="#_3-线程同步解决方案" aria-hidden="true">#</a> 3, 线程同步解决方案</h3><p>为了解决前面的线程安全问题，我们可以使用线程同步思想。同步最常见的方案就是加锁，意思是每次只允许一个线程加锁，加锁后才能进入访问，访问完毕后自动释放锁，然后其他线程才能再加锁进来。</p><p><img src="' + _imports_11 + '" alt="image-20231228091223875"></p><p>等小红线程执行完了，把余额改为0，出去了就会释放锁。这时小明线程就可以加锁进来执行，如下图所示。</p><p><img src="' + _imports_12 + '" alt="image-20231228091234074"></p><p><strong>采用加锁的方案</strong>，就可以解决前面两个线程都取10万块钱的问题。怎么加锁呢？Java提供了三种方案：</p><ul><li><strong>同步代码块</strong></li><li><strong>同步方法</strong></li><li><strong>Lock锁</strong></li></ul><h3 id="_4-同步代码块" tabindex="-1"><a class="header-anchor" href="#_4-同步代码块" aria-hidden="true">#</a> 4, 同步代码块</h3><p>同步代码块。<strong>它的作用就是把访问共享数据的代码锁起来，以此保证线程安全</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//锁对象：必须是一个唯一的对象（同一个地址）</span>\n<span class="token keyword">synchronized</span><span class="token punctuation">(</span>锁对象<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//...访问共享数据的代码...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用同步代码块，来解决前面代码里面的线程安全问题。我们只需要修改DrawThread 类中的代码即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 取钱的一个方法 可能是小红和小明同时过来的</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 得到某个线程的名字，可能是小红，也可能是小明</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 同步代码块，作用就是把访问共享数据的代码锁起来，保证线程安全</span>\n    <span class="token comment">// drawMoney是一个实例方法，建议使用this作为锁对象。不要将随便无关的对象当做锁对象</span>\n    <span class="token comment">// 实例方法，建议使用this当锁。静态方法，建议把类的字节码（类名.class）当做锁对象</span>\n    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token operator">&gt;=</span>money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱&quot;</span><span class="token operator">+</span>money<span class="token operator">+</span><span class="token string">&quot;成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> money<span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱后，余额剩余：&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱：余额不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试如下：</p><p><img src="' + _imports_13 + '" alt="image-20231228091355632"></p><p>锁对象如何选择：</p><ul><li>建议把共享资源作为锁对象, 不要将随便无关的对象当做锁对象</li><li>对于实例方法，建议使用this作为锁对象</li><li>对于静态方法，建议把类的字节码(类名.class)当做锁对象</li></ul><h3 id="_5-同步方法" tabindex="-1"><a class="header-anchor" href="#_5-同步方法" aria-hidden="true">#</a> 5, 同步方法</h3><p>同步方法，就是把整个方法给锁住，一个线程调用这个方法，另一个线程调用的时候就执行不了，只有等上一个线程调用结束，下一个线程调用才能继续执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 下面的方法就是一个同步方法，说白了，就是把整个方法锁住。</span>\n<span class="token comment">// 一个线程调用这个方法，另一个线程就调用不了。</span>\n<span class="token comment">// 只能等上一个线程调用完毕后，下一个线程才能执行。</span>\n<span class="token comment">// 同步方法，也是有锁对象的，只是不需要我们显示写出来</span>\n<span class="token comment">// 对于实例方法，锁对象是this</span>\n<span class="token comment">// 对于静态方法，锁对象是类的字节码对象  类名.class</span>\n<span class="token comment">// 对于同步代码块和同步方法相比。一个锁的范围大，一个锁的范围小。</span>\n<span class="token comment">// 同步方法是将方法中所有的代码都锁住</span>\n<span class="token comment">// 同步代码块是将方法中部分代码锁住</span>\n<span class="token comment">// 不存在哪一个好，哪一个不好</span>\n<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">drawMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token operator">&gt;=</span>money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱&quot;</span><span class="token operator">+</span>money<span class="token operator">+</span><span class="token string">&quot;成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> money<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱后，余额剩余：&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱：余额不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试如下：</p><p><img src="' + _imports_14 + '" alt="image-20231228091437646"></p><p>同步方法也是有锁对象，只不过这个锁对象没有显示的写出来而已。</p><ul><li>对于实例方法，锁对象其实是this（也就是方法的调用者）</li><li>对于静态方法，锁对象时类的字节码对象（类名.class）</li></ul><p>总结一下同步代码块和同步方法有什么区别</p><ul><li>不存在哪个好与不好，只是一个锁住的范围大，一个范围小</li><li>同步方法是将方法中所有的代码锁住</li><li>同步代码块是将方法中的部分代码锁住</li></ul><h3 id="_6-lock-锁" tabindex="-1"><a class="header-anchor" href="#_6-lock-锁" aria-hidden="true">#</a> 6, lock 锁</h3><p><strong>ReentrantLock</strong></p><blockquote><p>如果锁中的代码出现问题, 锁是无法解开的, 所以对于可能出现问题的代码, 可以使用try catch , 需要在 finally 中执行解锁操作</p></blockquote><p>Lock锁是 JDK5 版本专门提供的一种锁对象，通过这个锁对象的方法来达到加锁，和释放锁的目的，使用起来更加灵活。格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.首先在成员变量位子，需要创建一个Lock接口的实现类对象（这个对象就是锁对象）</span>\n<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2.在需要上锁的地方加入下面的代码</span>\nlk<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加锁</span>\n<span class="token comment">//...中间是被锁住的代码...</span>\nlk<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解锁</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Lock锁改写前面 DrawThread 中取钱的方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        lk<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加锁</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token operator">&gt;=</span>money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱&quot;</span><span class="token operator">+</span>money<span class="token operator">+</span><span class="token string">&quot;成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> money<span class="token punctuation">;</span>\n            <span class="token comment">// int a = 1/0</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱后，余额剩余：&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;来取钱：余额不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        lk<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解锁</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-线程通信" tabindex="-1"><a class="header-anchor" href="#四-线程通信" aria-hidden="true">#</a> 四, 线程通信</h2><hr><h3 id="_1-线程的生命周期" tabindex="-1"><a class="header-anchor" href="#_1-线程的生命周期" aria-hidden="true">#</a> 1, 线程的生命周期</h3><ul><li>New</li><li>Runnable</li><li>Running</li><li>Blocked</li><li>Waiting</li><li>Timed Waiting</li><li>Terminated</li></ul><ol><li>新建（New）：当创建一个Thread对象时，线程处于新建状态。此时线程尚未启动，还未执行任何代码。</li><li>可运行（Runnable）：调用线程对象的<code>start()</code>方法后，线程进入可运行状态。在可运行状态下，线程可能正在执行，也可能正在等待系统资源或其他条件，以便被调度执行。</li><li>运行（Running）：可运行状态的线程被系统调度执行，进入运行状态。线程在此状态下执行其线程体（<code>run()</code>方法）中的代码。</li><li>阻塞（Blocked）：线程在某些条件下会进入阻塞状态，例如等待某个锁的释放、等待用户输入等。在阻塞状态下，线程暂时停止执行，直到条件满足后转换为可运行状态。</li><li>等待（Waiting）：线程进入等待状态是因为调用了<code>Object</code>类的<code>wait()</code>、<code>Thread</code>类的<code>join()</code>或<code>LockSupport</code>类的<code>park()</code>方法，使线程等待某个条件的满足。等待状态的线程需要通过其他线程的通知或者等待时间到达才能被唤醒。</li><li>超时等待（Timed Waiting）：线程进入超时等待状态是因为调用了带有超时参数的等待方法，例如<code>Thread</code>类的<code>sleep()</code>、<code>wait(long timeout)</code>或<code>join(long timeout)</code>方法。线程会在指定的超时时间内等待，超时后自动转换为可运行状态。</li><li>终止（Terminated）：线程完成了它的任务或者因为异常而终止时，进入终止状态。一旦线程进入终止状态，它将不再被调度执行。</li></ol><h3 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例" aria-hidden="true">#</a> 2, 案例</h3><h2 id="五-线程池" tabindex="-1"><a class="header-anchor" href="#五-线程池" aria-hidden="true">#</a> 五, 线程池</h2><hr><h3 id="_1-线程池概述" tabindex="-1"><a class="header-anchor" href="#_1-线程池概述" aria-hidden="true">#</a> 1, 线程池概述</h3><blockquote><p>线程池就是一个<strong>可以复用线程的技术</strong>。要理解什么是线程复用技术，我们先得看一下不使用线程池会有什么问题，理解了这些问题之后，我们在解释线程复用同学们就好理解了。</p></blockquote><ul><li>假设：用户每次发起一个请求给后台，后台就创建一个新的线程来处理，下次新的任务过来肯定也会创建新的线程，如果用户量非常大，创建的线程也讲越来越多。然而，<strong>创建线程是开销很大的，并且请求过多时，会严重影响系统性能</strong>。</li></ul><p>而使用线程池，就可以解决上面的问题。如下图所示，线程池内部会有一个容器，存储几个核心线程，假设有3个核心线程，这3个核心线程可以处理3个任务。但是任务总有被执行完的时候，假设第1个线程的任务执行完了，那么第1个线程就空闲下来了，有新的任务时，空闲下来的第1个线程可以去执行其他任务。依此内推，这3个线程可以不断的复用，也可以执行很多个任务。</p><p><strong>为什么使用线程池?</strong></p><blockquote><p>使用线程池最大的原因就是可以根据系统的需求和硬件环境灵活的控制线程的数量,且可以对所有线程进行统一的管理和控制,从而提高系统的运行效率,降低系统运行运行压力;当然了,使用线程池的原因不仅仅只有这些,我们可以从线程池自身的优点上来进一步了解线程池的好处;</p></blockquote><p><strong>使用线程池的有哪些优势?</strong></p><ol><li>线程和任务分离,提升线程重用性;</li><li>控制线程并发数量,降低服务器压力,统一管理所有线程;</li><li>提升系统响应速度,假如创建线程用的时间为T1，执行任务用的时间为T2,销毁线程用的时间为T3，那么使用线程池就免去了T1和T3的时间；</li></ol><p><strong>大型应用场景如下</strong></p><ul><li>网购商品秒杀</li><li>云盘文件上传和下载</li><li>12306网上购票系统等</li></ul><blockquote><p><strong>总结一下</strong>, 只要有并发的地方、任务数量大或小、每个任务执行时间长或短的都可以使用线程池;</p></blockquote><h3 id="_2-创建线程池" tabindex="-1"><a class="header-anchor" href="#_2-创建线程池" aria-hidden="true">#</a> 2, 创建线程池</h3><blockquote><p>在JDK5版本中提供了代表线程池的接口ExecutorService，而这个接口下有一个实现类叫ThreadPoolExecutor类，使用ThreadPoolExecutor类就可以用来创建线程池对象。</p></blockquote><p><img src="' + _imports_15 + '" alt="image-20231227164144719"></p><p>接下来，用这7个参数的构造器来创建线程池的对象。代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>\n    <span class="token number">3</span><span class="token punctuation">,</span>	<span class="token comment">//核心线程数有3个</span>\n    <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span>\n    <span class="token number">8</span><span class="token punctuation">,</span>	<span class="token comment">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span>\n    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span><span class="token comment">//时间单位（秒）</span>\n    <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span>\n    <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//用于创建线程的工厂对象</span>\n    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//拒绝策略</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>临时线程什么时候创建？</p><ul><li>新任务提交时，发现核心线程都在忙、任务队列满了、并且还可以创建临时线程，此时会创建临时线程。</li></ul><p>什么时候开始拒绝新的任务？</p><ul><li>核心线程和临时线程都在忙、任务队列也满了、新任务过来时才会开始拒绝任务。</li></ul><h3 id="_3-线程池原理解析" tabindex="-1"><a class="header-anchor" href="#_3-线程池原理解析" aria-hidden="true">#</a> 3, 线程池原理解析</h3><p><strong>ThreadPoolExecutor 部分源码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>构造方法<span class="token operator">:</span>\n<span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment">//核心线程数量</span>\n          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment">//     最大线程数</span>\n          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment">//       最大空闲时间</span>\n          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>         <span class="token comment">//        时间单位</span>\n          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>   <span class="token comment">//   任务队列</span>\n          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>    <span class="token comment">// 线程工厂</span>\n          <span class="token class-name">RejectedExecutionHandler</span> handler  <span class="token comment">//  饱和处理机制</span>\n	<span class="token punctuation">)</span> \n<span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>线程池案例详细解释</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>我们可以通过下面的场景理解ThreadPoolExecutor中的各个参数;\n\na客户(任务)去银行(线程池)办理业务,但银行刚开始营业,窗口服务员还未就位(相当于线程池中初始线程数量为0),\n于是经理(线程池管理者)就安排1号工作人员(创建1号线程执行任务)接待a客户(创建线程);\n\n在a客户业务还没办完时,b客户(任务)又来了,于是经理(线程池管理者)就安排2号工作人员(创建2号线程执行任务)接待b客户(又创建了一个新的线程);\n\n假设该银行总共就2个窗口(核心线程数量是2);\n\n紧接着在a,b客户都没有结束的情况下c客户来了,于是经理(线程池管理者)就安排c客户先坐到银行大厅的座位上(空位相当于是任务队列)等候,\n并告知他: 如果1、2号工作人员空出,c就可以前去办理业务;\n\n此时d客户又到了银行,(工作人员都在忙,大厅座位也满了)于是经理赶紧安排临时工(新创建的线程)在大堂站着,手持pad设备给d客户办理业务;\n\n假如前面的业务都没有结束的时候,\ne客户又来了,此时正式工作人员都上了,临时工也上了,座位也满了(临时工加正式员工的总数量就是最大线程数),\n于是经理只能按《超出银行最大接待能力处理办法》(饱和处理机制)拒接接待e客户;\n\n最后,进来办业务的人少了,大厅的临时工空闲时间也超过了1个小时(最大空闲时间),经理就会让这部分空闲的员工人下班.(销毁线程)\n\n但是为了保证银行银行正常工作(有一个allowCoreThreadTimeout变量控制是否允许销毁核心线程,默认false),即使正式工闲着,也不得提前下班,所以1、2号工作人员继续待着(池内保持核心线程数量);\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_16 + '" alt="image-20231227174555358"></p><h3 id="_4-自定义线程池" tabindex="-1"><a class="header-anchor" href="#_4-自定义线程池" aria-hidden="true">#</a> 4, 自定义线程池</h3><p>4个参数的设计</p><ul><li><strong>核心线程数(corePoolSize)</strong></li><li><strong>任务队列长度(workQueue)</strong></li><li><strong>最大线程数(maximumPoolSize)</strong></li><li><strong>最大空闲时间(keepAliveTime)</strong></li></ul><p><strong>实现步骤</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1:编写任务类(MyTask),实现Runnable接口;\n2:编写线程类(MyWorker),用于执行任务,需要持有所有任务;\n3:编写线程池类(MyThreadPool),包含提交任务,执行任务的能力;\n4:编写测试类(MyTest),创建线程池对象,提交多个任务测试;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-案例-秒杀商品" tabindex="-1"><a class="header-anchor" href="#_5-案例-秒杀商品" aria-hidden="true">#</a> 5, 案例-秒杀商品</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>案例介绍:\n	假如某网上商城推出活动,新上架10部新手机免费送客户体验,要求所有参与活动的人员在规定的时间同时参与秒杀挣抢,假如有20人同时参与了该活动,请使用线程池模拟这个场景,保证前10人秒杀成功,后10人秒杀失败;\n	\n要求:\n	1:使用线程池创建线程\n	2:解决线程安全问题\n	\n思路提示:\n	1:既然商品总数量是10个,那么我们可以在创建线程池的时候初始化线程数是10个及以下,设计线程池最大数量为10个;\n	2:当某个线程执行完任务之后,可以让其他秒杀的人继续使用该线程参与秒杀;\n	3:使用synchronized控制线程安全,防止出现错误数据;\n	\n代码步骤:\n	1:编写任务类,主要是送出手机给秒杀成功的客户;\n	2:编写主程序类,创建20个任务(模拟20个客户);\n	3:创建线程池对象并接收20个任务,开始执行任务;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>任务类</strong></p><p>主要是送出手机给秒杀成功的客户</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo05</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n    任务类:\n        包含了商品数量,客户名称,送手机的行为;\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token comment">//设计一个变量,用于表示商品的数量</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token comment">//表示客户名称的变量</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token operator">+</span><span class="token string">&quot;正在使用&quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;参与秒杀任务...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 同步代码块</span>\n        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">MyTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token operator">+</span><span class="token string">&quot;使用&quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;秒杀:&quot;</span><span class="token operator">+</span>id<span class="token operator">--</span> <span class="token operator">+</span><span class="token string">&quot;号商品成功啦!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token operator">+</span><span class="token string">&quot;使用&quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;秒杀失败!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主程序类</p><p>创建20个任务(模拟20个客户) , 测试任务类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo05</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingQueue</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n    主程序类,测试任务类\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1:创建一个线程池对象</span>\n        <span class="token class-name">ThreadPoolExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//2:循环创建任务对象</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">20</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">MyTask</span> myTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">&quot;客户&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>myTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//3:关闭线程池</span>\n        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-其他" tabindex="-1"><a class="header-anchor" href="#六-其他" aria-hidden="true">#</a> 六, 其他</h2><hr><h3 id="_1-进程和线程" tabindex="-1"><a class="header-anchor" href="#_1-进程和线程" aria-hidden="true">#</a> 1, 进程和线程</h3><blockquote><p><strong>进程和线程是操作系统中用于执行任务的基本概念</strong>。它们在计算机系统中扮演不同的角色和功能。</p></blockquote><p><strong>进程</strong></p><p>进程（Process）是正在执行中的程序的实例。它是资源分配的基本单位，包括代码、数据和运行时状态。每个进程都有自己独立的内存空间和系统资源，它们之间是相互隔离的。进程之间通常通过进程间通信（IPC）来进行数据交换和通信。</p><p><strong>线程</strong></p><p>线程（Thread）是进程内的执行单元，是进程中的一个实体。一个进程可以包含多个线程。线程共享进程的内存空间和系统资源。线程之间可以直接访问进程的共享数据，因此线程之间的通信和数据共享相对容易和高效。</p><h3 id="_2-并发和并行" tabindex="-1"><a class="header-anchor" href="#_2-并发和并行" aria-hidden="true">#</a> 2, 并发和并行</h3><p><strong>并发</strong></p><p>并发是指多个任务在同一时间段内执行，它们之间可能是交替执行的。在并发中，任务之间的执行可以重叠，通过时间片轮转或者事件驱动等方式进行切换，给人一种同时执行的感觉。并发的目的是提高系统资源的利用率，增加任务的相应性和吞吐量。</p><p><strong>并行</strong></p><p>并行是指多个任务在同一时刻同时执行，它们可以在不同的处理器、核心或计算单元上并发执行。在并行中，任务之间可以并行地执行，各自独立运行，互不干扰。并行的目的是通过同时执行多个任务，加快整体计算速度，提高系统的处理能力。</p><p>简单总结:</p><blockquote><ul><li>并发是多个任务在时间上交替执行，共享计算资源，一段时间内只有一个任务在执行。</li><li>并行是多个任务在同一时刻同时执行，各自独立运行，每个任务有自己的计算资源。</li></ul></blockquote><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h2><h1 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程" aria-hidden="true">#</a> <strong>网络编程</strong></h1><h2 id="一-三要素" tabindex="-1"><a class="header-anchor" href="#一-三要素" aria-hidden="true">#</a> 一, 三要素</h2><p>网络编程三要素，分别是<strong>IP地址、端口号、通信协议</strong>。</p><ul><li>IP地址：表示设备在网络中的地址，是网络中设备的唯一标识</li><li>端口号：应用程序在设备中唯一的标识</li><li>协议：连接和数据在网络中传输的规则。</li></ul><h3 id="_1-ip-地址" tabindex="-1"><a class="header-anchor" href="#_1-ip-地址" aria-hidden="true">#</a> 1, IP 地址</h3><blockquote><p>IP（Ineternet Protocol）全称互联网协议地址，是分配给网络设备的唯一表示。IP地址分为：IPV4地址、IPV6地址。IPV4地址由32个比特位（4个字节）组成，如果下图所示，但是由于采用二进制太不容易阅读了，于是就将每8位看成一组，把每一组用十进制表示（叫做点分十进制表示法）。所以就有了我们经常看到的IP地址形式，如：192.168.1.66</p></blockquote><p><strong>IPV6</strong></p><p>经过不断的发展，现在越来越多的设备需要联网，IPV4地址已经不够用了，所以扩展出来了IPV6地址**。IPV6采用128位二进制数据来表示（16个字节）**，号称可以为地球上的每一粒沙子编一个IP地址，IPV6比较长，为了方便阅读，每16位编成一组，每组采用十六进制数据表示，然后用冒号隔开（称为冒分十六进制表示法）</p><p><strong>环回地址</strong></p><p>域名和IP其实是一一对应的，由运营商来管理域名和IP的对应关系。我们在浏览器上敲一个域名时，首先由运营商的域名解析服务，把域名转换为ip地址，再通过IP地址去访问对应的服务器设备。关于IP地址，还有一个特殊的地址需要我们记住一下。就是我们在学习阶段进行测试时，经常会自己给自己消息，需要用到一个本地回送地址：<code>127.0.0.1</code></p><h3 id="_2-inetaddress-类" tabindex="-1"><a class="header-anchor" href="#_2-inetaddress-类" aria-hidden="true">#</a> 2, InetAddress 类</h3><blockquote><p>IP地址。按照面向对象的设计思想，<strong>Java中也有一个类用来表IP地址</strong>，这个类是 <strong>InetAddress</strong> 类。我们在开发网络通信程序的时候，可能有时候<strong>会获取本机的IP地址，以及测试与其他地址是否连通</strong>，这个时候就可以使用InetAddress类来完成。下面学习几个InetAddress的方法。</p></blockquote><p><img src="' + _imports_17 + '" alt="image-20231229091640589"></p><p>代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InetAddressTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、获取本机IP地址对象的</span>\n        <span class="token class-name">InetAddress</span> ip1 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip1<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip1<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、获取指定IP或者域名的IP地址对象。</span>\n        <span class="token class-name">InetAddress</span> ip2 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip2<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip2<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// ping www.baidu.com</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip2<span class="token punctuation">.</span><span class="token function">isReachable</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-端口号" tabindex="-1"><a class="header-anchor" href="#_3-端口号" aria-hidden="true">#</a> 3, 端口号</h3><p>端口号：指的是计算机设备上运行的应用程序的标识，被规定为一个16位的二进制数据，范围（0~65535）</p><p>端口号分为一下几类（了解一下）</p><ul><li>系统端口：0~1023，被预先定义的知名应用程序占用（如：HTTP占用80，FTP占用21）</li><li>注册端口：1024~49151，分配给用户经常访问的应用程序或者某些应用程序</li><li>动态端口：49152~65536，之所以称为动态端口，是因为它一般不固定分配给某进程，而是动态分配的。</li></ul><h3 id="_4-协议" tabindex="-1"><a class="header-anchor" href="#_4-协议" aria-hidden="true">#</a> 4, 协议</h3><blockquote><p>前面我们已经学习了IP地址和端口号，但是想要完成数据通信还需要有通信协议。网络上通信的设备，事先规定的连接规则，以及传输数据的规则被称为网络通信协议。</p></blockquote><p>为了让世界上各种上网设备能够互联互通，肯定需要有一个组织出来，指定一个规则，大家都遵守这个规则，才能进行数据通信。开放式网络互联标准：OSI网络参考模型</p><ul><li>OSI网络参考模型：全球网络互联标准</li><li>TCP/IP网络模型：事实上的国际标准</li></ul><p><img src="' + _imports_18 + '" alt="image-20231229091823767"></p><p>只要按照OSI网络参考模型制造的设备，就可以在国际互联网上互联互通。其中传输层有两个协议，是我们今天会接触到的（UDP协议、TCP协议）</p><p><strong>UDP特点：</strong></p><ul><li>无连接，不可靠通信</li><li>不事先建立连接，数据按照包发，一包数据包含：自己的IP地址，程序端口，目的地IP，程序端口和数据等。</li><li>发送方不管对方是否在线，数据在中间丢失也不管，如果接收方收到数据也不返回确认，故是不可靠的。</li><li>通信效率高。场景：语音通话，视频直播。</li></ul><p><strong>TCP特点：</strong></p><ul><li>面向连接，可靠通信</li><li>TCP的最终目的：要保证在不可靠的信道上实现可靠的传输</li><li>TCP主要有三个步骤实现可靠传输：三次握手建立连接，传输数据进行确认，四次挥手断开连接。</li></ul><h2 id="二-udp-通信" tabindex="-1"><a class="header-anchor" href="#二-udp-通信" aria-hidden="true">#</a> 二, UDP 通信</h2><blockquote><p>**UDP是面向无连接的、不需要确认双方是否存在，所以它是不可靠的协议。**Java提供了一个类叫DatagramSocket来完成基于UDP协议的收发数据。使用DatagramSocket收发数据时，数据要以数据包的形式体现，一个数据包限制在64KB以内。</p></blockquote><h3 id="_1-udp通信入门" tabindex="-1"><a class="header-anchor" href="#_1-udp通信入门" aria-hidden="true">#</a> 1, UDP通信入门</h3><p>下面我们看一个案例，需要有两个程序，一个表示客户端程序，一个表示服务端程序。需求：客户端程序发一个字符串数据给服务端，服务端程序接收数据并打印。</p><p>客户端程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 目标：完成UDP通信快速入门：实现1发1收。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、创建客户端对象（发韭菜出去的人）</span>\n        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span>\n       <span class="token comment">/* public DatagramPacket(byte buf[], int length,\n             InetAddress address, int port)\n               参数一：封装要发出去的数据。\n               参数二：发送出去的数据大小（字节个数）\n               参数三：服务端的IP地址（找到服务端主机）\n               参数四：服务端程序的端口。\n             */</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">&quot;我是快乐的客户端，我爱你abc&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length\n                <span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3、开始正式发送这个数据包的数据出去了</span>\n        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端数据发送完毕~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放资源！</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----服务端启动----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span>\n        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 64KB.</span>\n        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3、开始正式使用数据包来接收客户端发来的数据</span>\n        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 4、从字节数组中，把接收到的数据直接打印出来</span>\n        <span class="token comment">// 接收多少就倒出多少</span>\n        <span class="token comment">// 获取本次数据包接收了多少数据。</span>\n        <span class="token keyword">int</span> len <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放资源</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-udp通信多发多收" tabindex="-1"><a class="header-anchor" href="#三-udp通信多发多收" aria-hidden="true">#</a> 三, UDP通信多发多收</h2><h3 id="_1-udp通信多发多收" tabindex="-1"><a class="header-anchor" href="#_1-udp通信多发多收" aria-hidden="true">#</a> 1, UDP通信多发多收</h3><p>刚才的案例，我们只能客户端发一次，服务端接收一次就结束了。下面我们想把这个代码改进一下，</p><p>需求：实现客户端不断的发数据，而服务端能不断的接收数据，客户端发送exit时客户端程序退出。</p><p>客户端程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 目标：完成UDP通信快速入门：实现客户端反复的发。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、创建客户端对象（发韭菜出去的人）</span>\n        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span>\n       <span class="token comment">/* public DatagramPacket(byte buf[], int length,\n             InetAddress address, int port)\n               参数一：封装要发出去的数据。\n               参数二：发送出去的数据大小（字节个数）\n               参数三：服务端的IP地址（找到服务端主机）\n               参数四：服务端程序的端口。\n             */</span>\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请说：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> msg <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 一旦发现用户输入的exit命令，就退出客户端</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎下次光临！退出成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放资源</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 跳出死循环</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length\n                    <span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 3、开始正式发送这个数据包的数据出去了</span>\n            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 目标：完成UDP通信快速入门-服务端反复的收\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----服务端启动----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span>\n        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 64KB.</span>\n        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 3、开始正式使用数据包来接收客户端发来的数据</span>\n            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 4、从字节数组中，把接收到的数据直接打印出来</span>\n            <span class="token comment">// 接收多少就倒出多少</span>\n            <span class="token comment">// 获取本次数据包接收了多少数据。</span>\n            <span class="token keyword">int</span> len <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">String</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-tcp-通信一发一收" tabindex="-1"><a class="header-anchor" href="#四-tcp-通信一发一收" aria-hidden="true">#</a> 四, TCP 通信一发一收</h2><h3 id="_1-tcp通信一发一收" tabindex="-1"><a class="header-anchor" href="#_1-tcp通信一发一收" aria-hidden="true">#</a> 1, TCP通信一发一收</h3><p>学习完UDP通信的代码编写之后，接下来我们学习TCP通信的代码如何编写。Java提供了一个java.net.Socket类来完成TCP通信。</p><p>我们先讲一下Socket完成TCP通信的流程，再讲代码怎么编写就很好理解了。如下图所示</p><ol><li>当创建Socket对象时，就会在客户端和服务端创建一个数据通信的管道，在客户端和服务端两边都会有一个Socket对象来访问这个通信管道。</li><li>现在假设客户端要发送一个“在一起”给服务端，客户端这边先需要通过Socket对象获取到一个字节输出流，通过字节输出流写数据到服务端</li><li>然后服务端这边通过Socket对象可以获取字节输入流，通过字节输入流就可以读取客户端写过来的数据，并对数据进行处理。</li><li>服务端处理完数据之后，假设需要把“没感觉”发给客户端端，那么服务端这边再通过Socket获取到一个字节输出流，将数据写给客户端</li><li>客户端这边再获取输入流，通过字节输入流来读取服务端写过来的数据。</li></ol><p><img src="' + _imports_19 + '" alt="image-20231229171653406"></p><p>下面我们写一个客户端，用来往服务端发数据。由于原始的字节流不是很好用，这里根据我的经验，我原始的OutputStream包装为DataOutputStream是比较好用的。客户端程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *  目标：完成TCP通信快速入门-客户端开发：实现1发1收。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、创建Socket对象，并同时请求与服务端程序的连接。</span>\n        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span>\n        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3、把低级的字节输出流包装成数据输出流</span>\n        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 4、开始写数据出去了</span>\n        dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">&quot;在一起，好吗？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放连接资源</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端用来接收客户端发过来的数据。如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *  目标：完成TCP通信快速入门-服务端开发：实现1发1收。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----服务端启动成功-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span>\n        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span>\n        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3、从socket通信管道中得到一个字节输入流。</span>\n        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 4、把原始的字节输入流包装成数据输入流</span>\n        <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 5、使用数据输入流读取客户端发送过来的消息</span>\n        <span class="token class-name">String</span> rs <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 其实我们也可以获取客户端的IP地址</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-tcp通信多发多收" tabindex="-1"><a class="header-anchor" href="#五-tcp通信多发多收" aria-hidden="true">#</a> 五，TCP通信多发多收</h2><h3 id="_1-tcp通信多发多收" tabindex="-1"><a class="header-anchor" href="#_1-tcp通信多发多收" aria-hidden="true">#</a> 1, TCP通信多发多收</h3><p>把客户端代码改写一下，采用键盘录入的方式发消息，为了让客户端能够一直发，我们只需要将发送消息的代码套一层循环就可以了，当用户输入exit时，客户端退出循环并结束客户端。</p><p>TCP客户端：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *  目标：完成TCP通信快速入门-客户端开发：实现客户端可以反复的发消息出去\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1、创建Socket对象，并同时请求与服务端程序的连接。</span>\n        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span>\n        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3、把低级的字节输出流包装成数据输出流</span>\n        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请说：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> msg <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 一旦用户输入了exit，就退出客户端程序</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎您下次光临！退出成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">// 4、开始写数据出去了</span>\n            dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让服务端能够一直接收客户端发过来的消息，服务端代码也得改写一下。我们只需要将读取数据的代码加一个循环就可以了。</p><p>但是需要我们注意的时，如果客户端Socket退出之后，就表示连接客户端与服务端的数据通道被关闭了，这时服务端就会出现异常。服务端可以通过出异常来判断客户端下线了，所以可以用try...catch把读取客户端数据的代码套一起来，catch捕获到异常后，打印客户端下线。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *  目标：完成TCP通信快速入门-服务端开发：实现服务端反复发消息\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----服务端启动成功-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span>\n        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span>\n        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3、从socket通信管道中得到一个字节输入流。</span>\n        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 4、把原始的字节输入流包装成数据输入流</span>\n        <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 5、使用数据输入流读取客户端发送过来的消息</span>\n                <span class="token class-name">String</span> rs <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;离线了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-tcp-通信多线程" tabindex="-1"><a class="header-anchor" href="#六-tcp-通信多线程" aria-hidden="true">#</a> 六, TCP 通信多线程</h2><h3 id="_1-tcp通信多线程改进" tabindex="-1"><a class="header-anchor" href="#_1-tcp通信多线程改进" aria-hidden="true">#</a> 1, TCP通信多线程改进</h3><p>上面案例中我们写的服务端程序只能和一个客户端通信，如果有多个客户端连接服务端，此时服务端是不支持的。</p><p>为了让服务端能够支持多个客户端通信，就需要用到多线程技术。具体的实现思路如下图所示：每当有一个客户端连接服务端，在服务端这边就为Socket开启一条线程取执行读取数据的操作，来多少个客户端，就有多少条线程。按照这样的设计，服务端就可以支持多个客户端连接了。</p><p><img src="' + _imports_20 + '" alt="image-20231229171758356"></p><p>写一个服务端的读取数据的线程类，代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerReaderThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">ServerReaderThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">String</span> msg <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有人下线了：&quot;</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改写服务端的主程序代码，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *  目标：完成TCP通信快速入门-服务端开发：要求实现与多个客户端同时通信。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----服务端启动成功-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span>\n        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span>\n            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有人上线了：&quot;</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span>\n            <span class="token keyword">new</span> <span class="token class-name">ServerReaderThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="单元测试-注解-反射-代理" tabindex="-1"><a class="header-anchor" href="#单元测试-注解-反射-代理" aria-hidden="true">#</a> <strong>单元测试-注解-反射-代理</strong></h1><h2 id="一-单元测试" tabindex="-1"><a class="header-anchor" href="#一-单元测试" aria-hidden="true">#</a> 一, 单元测试</h2><h3 id="_1-单元测试" tabindex="-1"><a class="header-anchor" href="#_1-单元测试" aria-hidden="true">#</a> 1, 单元测试</h3><blockquote><p>先引入下载 junit 单元测试 jar 包</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hbnu<span class="token punctuation">.</span>code</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtilTest</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 添加单元测试, 引入jar包</span>\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-单元测试断言" tabindex="-1"><a class="header-anchor" href="#_2-单元测试断言" aria-hidden="true">#</a> 2, 单元测试断言</h3><blockquote><p>所谓断言：意思是<strong>程序员可以预测程序的运行结果</strong>，检查程序的运行结果是否与预期一致。</p></blockquote><p>我们在StringUtil类中新增一个测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n     <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们在StringUtilTest类中写一个测试方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtilTest</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMaxIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getMaxIndex</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n       <span class="token keyword">int</span> index2 <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getMaxIndex</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">//断言机制：预测index2的结果</span>\n        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;方法内部有Bug&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>index2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行测试方法，结果如下图所示，表示我们预期值与实际值不一致，如下：</p><h3 id="_3-常用注解" tabindex="-1"><a class="header-anchor" href="#_3-常用注解" aria-hidden="true">#</a> 3, 常用注解</h3><blockquote><p>@Test注解，可以用来标记一个方法为测试方法，测试才能启动执行。除了@Test注解，还有一些其他的注解，我们要知道其他注解标记的方法什么时候执行，以及其他注解在什么场景下可以使用。</p></blockquote><p><img src="' + _imports_21 + '" alt="image-20231228094808511"></p><ul><li>被@BeforeClass标记的方法, 执行在<strong>所有方法之前</strong></li><li>被@AfterCalss标记的方法，执行在<strong>所有方法之后</strong></li><li>被@Before标记的方法，执行<strong>在每一个@Test方法之前</strong></li><li>被@After标记的方法，执行<strong>在每一个@Test方法之后</strong></li></ul><blockquote><p>前面的注解是基于Junit4版本的，<strong>在Junit5版本中对注解作了更新</strong>，但是作用是一样的。所以这里就不做演示了</p></blockquote><p><img src="' + _imports_22 + '" alt="image-20231228095849288"></p><h2 id="二-反射" tabindex="-1"><a class="header-anchor" href="#二-反射" aria-hidden="true">#</a> 二, 反射</h2><p>在API文档中对反射有详细的说明，我们去了解一下。在java.lang.reflect包中对反射的解释如下图所示</p><p><img src="' + _imports_23 + '" alt="image-20231228100356721"></p><p>翻译成人话就是**：反射技术，指的是加载类的字节码到内存，并以编程的方法解刨出类中的各个成分（成员变量、方法、构造器等）。**</p><p><strong>反射的解释</strong></p><p>反射是用来写框架用的，后面我们学习的SSM框架就大量使用到了反射。平时我们用IDEA开发程序时，用对象调用方法，IDEA会有代码提示，idea会将这个对象能调用的方法都给你列举出来，供你选择</p><p>对于Idea中的代码提示功能, 是底层使用了反射</p><p><img src="' + _imports_24 + '" alt="image-20231228100218436"></p><blockquote><p>问题是<strong>IDEA怎么知道这个对象有这些方法可以调用呢?</strong> 原因是对象能调用的方法全都来自于类，<strong>IDEA通过反射技术就可以获取到类中有哪些方法</strong>，<strong>并且把方法的名称以提示框的形式显示出来</strong>，所以你能看到这些提示了。那记事本写代码为什么没有提示呢? 因为技术本软件没有利用反射技术开发这种代码提示的功能。</p></blockquote><p>反射获取的是类的信息，那么反射的第一步首先获取到类才行。由于Java的设计原则是万物皆对象，获取到的类其实也是以对象的形式体现的，<strong>叫字节码对象</strong>，用Class类来表示。获取到字节码对象之后，再通过字节码对象就可以获取到类的组成成分了，这些组成成分其实也是对象，其中<strong>每一个成员变量用Field类的对象来表示</strong>、<strong>每一个成员方法用 Method类的对象来表示</strong>，<strong>每一个构造器用Constructor类的对象来表示</strong>。</p><ul><li>反射第一步：加载类，获取类的字节码（Class对象）</li><li>获取类的构造器：Constructor对象</li><li>获取类的成员变量：Field对象</li><li>获取类的成员方法：Method对象</li></ul><h3 id="反射机制" tabindex="-1"><a class="header-anchor" href="#反射机制" aria-hidden="true">#</a> 反射机制</h3><p><strong>什么是反射机制?</strong></p><blockquote><p>JAVA反射机制是<strong>在运行状态中</strong>，<strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；对于任意一个<strong>对象</strong>，<strong>都能够调用它的任意一个方法和属性</strong>；<strong>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</strong>。</p></blockquote><p><strong>静态编译和动态编译</strong></p><ul><li>**静态编译：**在编译时确定类型，绑定对象</li><li>**动态编译：**运行时确定类型，绑定对象</li></ul><p><strong>反射机制的优缺点</strong></p><ul><li><strong>优点</strong>： 运行期类型的判断，动态加载类，提高代码灵活度。</li><li><strong>缺点</strong>： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的java代码要慢很多。</li></ul><h3 id="_1-获取类的字节码" tabindex="-1"><a class="header-anchor" href="#_1-获取类的字节码" aria-hidden="true">#</a> 1, 获取类的字节码</h3><p>第一步, 将字节码加载到内存中, 获取字节码对象</p><p><img src="' + _imports_25 + '" alt="image-20231228101807739"></p><p>有一个Student类，获取Student类的字节码代码有三种写法。不管用哪一种方式，获取到的字节码对象其实是同一个。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1Class</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 方法一</span>\n        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取全类名</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取简单类名</span>\n        \n        <span class="token comment">// 方法二</span>\n        <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.ml.pojo.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n        \n        <span class="token comment">// 方法三</span>\n        <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2 <span class="token operator">==</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// 举例二</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// 1,获取类的字节码</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> s1 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2,</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> s2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.hbnu.code.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3,</span>\n        <span class="token class-name">Student</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-获取类的构造器" tabindex="-1"><a class="header-anchor" href="#_2-获取类的构造器" aria-hidden="true">#</a> 2, 获取类的构造器</h3><p>我们已经可以获取到类的字节码对象了。接下来，我们学习一下<strong>通过字节码对象获取构造器，并使用构造器创建对象</strong>。获取构造器，需要用到Class类提供的几个方法，如下</p><p><img src="' + _imports_26 + '" alt="image-20231228104123221"></p><p><strong>解释</strong>：</p><ul><li>get: 获取</li><li>Declared: 有这个单词表示可以获取任意一个，没有这个单词表示只能获取一个public修饰的</li><li>Constructor: 构造方法的意思</li><li>后缀s: 表示可以获取多个，没有后缀s只能获取一个</li></ul><p><strong>假设现在有一个Cat类，里面有几个构造方法</strong>，代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">private</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个测试方法，来测试获取类中所有的构造器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//1、反射第一步：必须先得到这个类的Class对象</span>\n        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">//2、获取类的全部构造器</span>\n        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//3、遍历数组中的每一个构造器对象。</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor<span class="token operator">:</span> constructors<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;---&gt; 参数个数：&quot;</span><span class="token operator">+</span>constructor<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-反射获取构造器的作用" tabindex="-1"><a class="header-anchor" href="#_3-反射获取构造器的作用" aria-hidden="true">#</a> 3, 反射获取构造器的作用</h3><h3 id="_4-反射获取成员变量-类型" tabindex="-1"><a class="header-anchor" href="#_4-反射获取成员变量-类型" aria-hidden="true">#</a> 4, 反射获取成员变量/ 类型</h3><h3 id="_5-反射获取成员方法" tabindex="-1"><a class="header-anchor" href="#_5-反射获取成员方法" aria-hidden="true">#</a> 5, 反射获取成员方法</h3><h3 id="_6-反射的应用" tabindex="-1"><a class="header-anchor" href="#_6-反射的应用" aria-hidden="true">#</a> 6, 反射的应用</h3><h2 id="三-注解" tabindex="-1"><a class="header-anchor" href="#三-注解" aria-hidden="true">#</a> 三, 注解</h2><h3 id="_1-认识注解" tabindex="-1"><a class="header-anchor" href="#_1-认识注解" aria-hidden="true">#</a> 1, 认识注解</h3><blockquote><p>在 Java 中，注解（Annotation）用于为代码元素（类、方法、字段等）提供元数据信息，以便在编译时、运行时或其他工具处理期间使用。注解可以帮助开发人员在代码中添加附加信息，从而影响编译器的行为、生成文档、执行单元测试等。</p></blockquote><p><strong>创建注解</strong></p><p><img src="' + _imports_27 + '" alt="image-20231228142746205"></p><p><strong>编写注解代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hbnu<span class="token punctuation">.</span>code</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token comment">// String属性名, aaa属性名</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-元注解" tabindex="-1"><a class="header-anchor" href="#_2-元注解" aria-hidden="true">#</a> 2, 元注解</h3><blockquote><p>元注解（Meta-Annotation）是用于注解其他注解的注解。在Java中，您可以使用元注解来自定义和配置注解的行为。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- @Retention	指定注解的保留策略，即注解在代码中的存活时间。\nRetentionPolicy.SOURCE：注解仅在源代码中存在，编译时会被丢弃。\nRetentionPolicy.CLASS：注解在编译时被保留，但不会加载到运行时环境。\nRetentionPolicy.RUNTIME：注解将在运行时保留，可以通过反射机制读取。\n\n- @Target   	指定注解可以应用的目标元素类型。\nElementType.TYPE：类、接口、枚举等。\nElementType.METHOD：方法。\nElementType.FIELD：字段。\nElementType.PARAMETER：方法参数。\n\n- @Documented	指定注解将包含在生成的文档中。\n\n- @Inherited	指定注解可以被继承。\n\n- @Repeatable	指定注解可以重复应用于同一目标元素。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-解析注解" tabindex="-1"><a class="header-anchor" href="#_3-解析注解" aria-hidden="true">#</a> 3, 解析注解</h3><h3 id="_4-注解的应用场景" tabindex="-1"><a class="header-anchor" href="#_4-注解的应用场景" aria-hidden="true">#</a> 4, 注解的应用场景</h3><h2 id="四-动态代理" tabindex="-1"><a class="header-anchor" href="#四-动态代理" aria-hidden="true">#</a> 四, 动态代理</h2><p>动态代理是一种在运行时动态生成代理类和代理对象的机制，它允许在不事先编写代理类的情况下，通过使用反射机制来创建代理对象，并将方法调用转发给实际对象。</p><p>Java中的动态代理主要通过<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口来实现。以下是使用动态代理的一般步骤：</p><ol><li>创建一个实现了<code>InvocationHandler</code>接口的代理处理器类。该类负责处理代理对象的方法调用，并可以在方法调用前后执行一些额外的逻辑。</li><li>在代理处理器类中，根据需要实现<code>invoke</code>方法。该方法在代理对象的方法调用时被调用，可以在该方法中实现具体的处理逻辑。</li><li>使用<code>Proxy.newProxyInstance()</code>方法创建代理对象。该方法接受三个参数：类加载器（ClassLoader）、要代理的接口（Interface）以及代理处理器（InvocationHandler）。</li><li>通过代理对象调用方法时，代理处理器的<code>invoke</code>方法会被调用，从而实现对实际对象的方法调用和额外逻辑的处理。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyRealObject</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Doing something in real object.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在方法调用前执行额外逻辑</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before method invocation.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 调用实际对象的方法</span>\n        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 在方法调用后执行额外逻辑</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;After method invocation.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MyRealObject</span> realObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRealObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">MyInvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>realObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 创建代理对象</span>\n        <span class="token class-name">MyInterface</span> proxyObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyInterface</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>\n                <span class="token class-name">MyInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">MyInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                invocationHandler\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 通过代理对象调用方法</span>\n        proxyObject<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-介绍-准备功能" tabindex="-1"><a class="header-anchor" href="#_1-介绍-准备功能" aria-hidden="true">#</a> 1, 介绍, 准备功能</h3><h3 id="_2-生成动态代理对象" tabindex="-1"><a class="header-anchor" href="#_2-生成动态代理对象" aria-hidden="true">#</a> 2, 生成动态代理对象</h3><h3 id="_3-动态代理应用" tabindex="-1"><a class="header-anchor" href="#_3-动态代理应用" aria-hidden="true">#</a> 3, 动态代理应用</h3><h3 id="proxy类" tabindex="-1"><a class="header-anchor" href="#proxy类" aria-hidden="true">#</a> <strong>Proxy类</strong></h3><blockquote><p>在Java中，Proxy类是一个内置类，位于java.lang.reflect包中。它是Java提供的一种动态代理机制，用于在运行时动态创建代理类和代理实例。</p><p><strong>Proxy类主要用于创建动态代理对象</strong>，这些代理对象可以代替实际的对象进行方法调用，并可以在方法调用前后执行一些额外的逻辑。<strong>使用Proxy类，可以在运行时生成代理类</strong>，而无需显式地编写代理类的代码。</p></blockquote>', 386);
const _hoisted_387 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_387);
}
const JavaOOP5_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Java-OOP5.html.vue"]]);
export {
  JavaOOP5_html as default
};
