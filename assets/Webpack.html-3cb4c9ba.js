import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-0934bf90.js";
const _imports_0 = "/bowenBlog/assets/image-20231206113043686-0a90505f.png";
const _imports_1 = "/bowenBlog/assets/image-20231206121343777-9c431567.png";
const _imports_2 = "/bowenBlog/assets/image-20231206124510639-ae463193.png";
const _imports_3 = "/bowenBlog/assets/image-20231206124445897-c6c480b3.png";
const _imports_4 = "/bowenBlog/assets/image-20231206125007080-2978b792.png";
const _imports_5 = "/bowenBlog/assets/image-20231206125433034-fafc06a3.png";
const _imports_6 = "/bowenBlog/assets/image-20231206125221174-5079e84e.png";
const _imports_7 = "/bowenBlog/assets/image-20231206125235119-0dbafeed.png";
const _imports_8 = "/bowenBlog/assets/image-20231206130414982-80144126.png";
const _imports_9 = "/bowenBlog/assets/image-20231206130730584-238a896f.png";
const _imports_10 = "/bowenBlog/assets/image-20231206130749035-1127a3ab.png";
const _imports_11 = "/bowenBlog/assets/image-20231206131436376-9a560b1a.png";
const _imports_12 = "/bowenBlog/assets/image-20231206131615252-66dab072.png";
const _imports_13 = "/bowenBlog/assets/image-20231206131836735-7b35c2c0.png";
const _imports_14 = "/bowenBlog/assets/image-20231206184148660-f38a0d53.png";
const _imports_15 = "/bowenBlog/assets/image-20231206185641421-e3d46a8c.png";
const _imports_16 = "/bowenBlog/assets/image-20231206185820991-3ad28d31.png";
const _imports_17 = "/bowenBlog/assets/image-20231206185841536-df951de8.png";
const _imports_18 = "/bowenBlog/assets/image-20231206190109843-eb5c96bd.png";
const _imports_19 = "/bowenBlog/assets/image-20231206194928536-dcd54c74.png";
const _imports_20 = "/bowenBlog/assets/image-20231206195940285-08c64ec1.png";
const _imports_21 = "/bowenBlog/assets/image-20231206195957043-16c77ca1.png";
const _imports_22 = "/bowenBlog/assets/image-20231206200018528-95e8fa6f.png";
const _imports_23 = "/bowenBlog/assets/image-20231206202133028-a1b526f4.png";
const _imports_24 = "/bowenBlog/assets/image-20231206202351414-a3ce8b6e.png";
const _imports_25 = "/bowenBlog/assets/image-20231206202412469-8e6a5817.png";
const _imports_26 = "/bowenBlog/assets/image-20231206203230844-a85f766f.png";
const _imports_27 = "/bowenBlog/assets/image-20231206203323043-19367054.png";
const _imports_28 = "/bowenBlog/assets/image-20231206203336623-10147526.png";
const _imports_29 = "/bowenBlog/assets/image-20231206203741596-b49d6681.png";
const _imports_30 = "/bowenBlog/assets/image-20231206204117408-5950b752.png";
const _imports_31 = "/bowenBlog/assets/image-20231206204143453-a40852ed.png";
const _imports_32 = "/bowenBlog/assets/image-20231206204448471-398b4585.png";
const _imports_33 = "/bowenBlog/assets/image-20231206204440922-e26abcda.png";
const _imports_34 = "/bowenBlog/assets/image-20231206205534853-41925ca0.png";
const _imports_35 = "/bowenBlog/assets/image-20231206210943435-feb9aa89.png";
const _imports_36 = "/bowenBlog/assets/image-20231206210953542-faa3d757.png";
const _imports_37 = "/bowenBlog/assets/image-20231206211106267-81fc163b.png";
const _imports_38 = "/bowenBlog/assets/image-20231206211138974-91712325.png";
const _imports_39 = "/bowenBlog/assets/image-20231206211154303-65544289.png";
const _imports_40 = "/bowenBlog/assets/image-20231206211220483-8fed0717.png";
const _imports_41 = "/bowenBlog/assets/image-20231206211226024-b0145582.png";
const _imports_42 = "/bowenBlog/assets/image-20231206211232476-f13ec30c.png";
const _imports_43 = "/bowenBlog/assets/image-20231206211255230-52cecb67.png";
const _imports_44 = "/bowenBlog/assets/image-20231206211307278-ac254804.png";
const _imports_45 = "/bowenBlog/assets/image-20231206211338144-8c091d56.png";
const _imports_46 = "/bowenBlog/assets/image-20231206211517094-021edf5d.png";
const _imports_47 = "/bowenBlog/assets/image-20231206211833694-2fe87dd4.png";
const _imports_48 = "/bowenBlog/assets/image-20231206211926858-dc09d80b.png";
const _imports_49 = "/bowenBlog/assets/image-20231206212119345-aaadee9d.png";
const _imports_50 = "/bowenBlog/assets/image-20231206212125460-2a5c7d7a.png";
const _imports_51 = "/bowenBlog/assets/image-20231206212205074-3594e66b.png";
const _imports_52 = "/bowenBlog/assets/image-20231206212216152-e2f089a6.png";
const _imports_53 = "/bowenBlog/assets/image-20231206212236839-704db103.png";
const _imports_54 = "/bowenBlog/assets/image-20231206212258296-74bd9706.png";
const _imports_55 = "/bowenBlog/assets/image-20231206212315261-80bfad31.png";
const _imports_56 = "/bowenBlog/assets/image-20231206212325517-fed5e636.png";
const _imports_57 = "/bowenBlog/assets/image-20231206212404447-6bbe86ce.png";
const _imports_58 = "/bowenBlog/assets/image-20231206212412602-9e3fabcf.png";
const _imports_59 = "/bowenBlog/assets/image-20231206212426268-b183b368.png";
const _imports_60 = "/bowenBlog/assets/image-20231206212436167-842ae3cb.png";
const _imports_61 = "/bowenBlog/assets/image-20231206212515592-6839f8b1.png";
const _imports_62 = "/bowenBlog/assets/image-20231206212529086-4b9ea0f8.png";
const _imports_63 = "/bowenBlog/assets/image-20231206212718549-5155ece2.png";
const _imports_64 = "/bowenBlog/assets/image-20231206212726444-50b37247.png";
const _imports_65 = "/bowenBlog/assets/image-20231206212743214-54e44c91.png";
const _imports_66 = "/bowenBlog/assets/image-20231207211217286-f640c4f0.png";
const _imports_67 = "/bowenBlog/assets/image-20231207211226175-ed603172.png";
const _imports_68 = "/bowenBlog/assets/image-20231207211232383-4b734520.png";
const _imports_69 = "/bowenBlog/assets/image-20231207211238161-48c7789c.png";
const _imports_70 = "/bowenBlog/assets/image-20231207211248538-49ffc11d.png";
const _imports_71 = "/bowenBlog/assets/image-20231207211258370-e0d88071.png";
const _imports_72 = "/bowenBlog/assets/image-20231207211314924-d5587492.png";
const _imports_73 = "/bowenBlog/assets/image-20231207211350130-1a31e73a.png";
const _imports_74 = "/bowenBlog/assets/image-20231207211431831-4cb80fc9.png";
const _imports_75 = "/bowenBlog/assets/image-20231207211449884-25491706.png";
const _imports_76 = "/bowenBlog/assets/image-20231207211503972-c0f53349.png";
const _imports_77 = "/bowenBlog/assets/image-20231207211521447-98a0668a.png";
const _imports_78 = "/bowenBlog/assets/image-20231207211613496-e84ceb71.png";
const _imports_79 = "/bowenBlog/assets/image-20231207211838670-590382f2.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p><strong>Webpack</strong></p><p>官网：https://webpack.js.org/</p><h3 id="_1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_1-基本介绍" aria-hidden="true">#</a> 1, 基本介绍</h3><blockquote><p>Webpack是一个现代的静态模块打包工具。它主要用于将前端应用程序的代码和资源文件打包成一个或多个静态资源文件，以便在浏览器中加载和运行。</p><p>Webpack的核心功能是将不同类型的模块（如JavaScript、CSS、图片等）视为依赖关系，并将它们打包成一个或多个输出文件。它通过一个称为“入口（entry）”的配置指定应用程序的起始点，然后根据模块之间的依赖关系，递归地构建一个依赖图，并生成最终的输出文件。</p></blockquote><p><strong>Webpack的一些重要概念和功能</strong>：</p><ol><li>入口（Entry）：指定Webpack开始构建依赖图的起始点。可以是一个或多个入口文件，Webpack将从这些文件开始分析和解析依赖关系。</li><li>输出（Output）：指定Webpack打包生成的输出文件的文件名和路径。可以配置为单个文件或多个文件，通常是JavaScript文件或其他静态资源文件。</li><li>Loader：Webpack使用Loader处理非JavaScript类型的文件。Loader可以将这些文件转换为JavaScript模块，以便在应用程序中使用。例如，可以使用Babel Loader将ES6或TypeScript转换为ES5 JavaScript。</li><li>插件（Plugins）：Webpack的插件用于执行更广泛的任务，例如代码优化、资源管理、环境变量注入等。插件可以扩展Webpack的功能，以满足特定的需求。</li><li>模式（Mode）：Webpack的模式用于指定构建的目标环境。可以是开发环境（development）、生产环境（production）或其他自定义环境。不同的模式会触发不同的内置优化。</li><li>代码分割（Code Splitting）：Webpack支持将代码拆分成多个块，以实现按需加载。这样可以减少初始加载时间，并在用户需要时动态加载额外的代码块。</li><li>模块热替换（Hot Module Replacement）：Webpack的模块热替换功能允许在开发过程中实时更新修改的模块，而无需完全刷新页面。这样可以提高开发效率。</li><li>优化（Optimization）：Webpack提供了各种优化功能，包括代码压缩、Tree Shaking（消除未使用的代码）、代码分块、缓存等，以提高应用程序的性能和加载速度。</li></ol><blockquote><p>我们之前写项目，使用的vue-element-admin也是基于webpack的，之前我们通过vue-cli创建的项目也是基于webpack的。今天我们需要自己去搭建开发环境，不使用官方提供的脚手架。</p><p><strong>总结：</strong></p><ul><li>webapck是一个构建工具，是基于node的，电脑上必须安装node，node版本需要大于16</li><li>打包器，是从入口开始，按照模块依赖进行打包，最终得到浏览器的可以识别的静态资源。</li><li>从某种程度来说，webpack代表的是一种架构能力。</li></ul></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 打包静态资源,   存储在硬盘中,   最后可以部署上线的资源文件\n<span class="token function">npm</span> run build \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-搭建环境" tabindex="-1"><a class="header-anchor" href="#_2-搭建环境" aria-hidden="true">#</a> 2, 搭建环境</h3><p>快速生成<code>package.json</code>文件</p><blockquote><p><code>package.json</code>是Node.js项目的配置文件，它包含了项目的名称、版本号、依赖项、脚本等信息。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>安装演示依赖</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-webpack&quot;</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@babel/core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.18.6&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;@babel/plugin-proposal-decorators&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.3&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;@babel/preset-env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.4&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;@babel/preset-react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.3&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;babel-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^9.1.2&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;css-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.8.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.41.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint-config-airbnb&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^19.0.4&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint-plugin-import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.27.5&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint-plugin-jsx-a11y&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.7.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint-plugin-react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.32.2&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint-plugin-react-hooks&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.6.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;eslint-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.0.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;file-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.2.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;html-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.5.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;mini-css-extract-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.7.6&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;sass&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.62.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;sass-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^13.3.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;style-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.3.3&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;url-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;vue-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^15.8.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;vue-style-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.3&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;vue-template-compiler&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.7.14&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.84.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;webpack-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.1.1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;webpack-dev-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.15.0&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^18.2.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;react-dom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^18.2.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.7.14&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;vue-loader-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.3.0&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;webpack-merge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.9.0&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>安装 webpack</strong></p><blockquote><p>现在，就安装webpack，webpack-cli。webpack是核心包，提供了很多的API，插件。后面我们要用到这些API和插件。webpack-cli提供了很多命令。</p><p>我们有两种安装方式，第一种，全局安装, (不推荐)，全局安装相当它把当成一个工具进行安装了。如下：</p><ul><li>cnpm i webpack -g （不需要操作）</li><li>cnpm i webpack-cli -g （不需要操作）</li></ul><p>第二种，就是在项目中安装（推荐，刚开始全局安装过了），如下：</p><ul><li>cnpm i webpack -D // -D表示开发依赖</li><li>cnpm i webpack-cli -D</li></ul></blockquote><p><strong>使用 npx 命令</strong></p><p>测试你的 webpack 是否安装成功</p><blockquote><p><code>npx</code>允许临时安装和运行命令，而不需要显式地进行全局或本地安装。这意味着你可以在不污染全局环境或项目依赖的情况下，临时运行Webpack相关的命令。对于使用Webpack的开发人员来说，这样可以更轻松地尝试不同的Webpack配置和插件，而无需手动安装和管理它们。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 查看版本\nnpx webpack <span class="token parameter variable">-v</span>\n\n-- 执行打包\nnpx webpack\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自行配置 webpack 文件</strong></p><p><img src="' + _imports_0 + '" alt="image-20231206113043686"></p><p>打包后生成了一个 dist 文件, 里面是打包后的代码, 名称就是我们的配置项名称 bundle.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 开发模式</span>\n  <span class="token comment">// 入口</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>  \n  <span class="token comment">// 出口</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span> <span class="token comment">// 打包后的文件名</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要webpack.config.js文件名变了，打包时，</p><p><strong>手动指定 webpack 打包配置的文件名</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">--config</span> xxx.congfig.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以配置一个脚本，如下：</p><p><img src="' + _imports_1 + '" alt="image-20231206121343777"></p><p>运行脚本，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cnpm run build\n<span class="token function">npm</span> run build\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要通过yarn，是不需要run，直接yarn build就OK。</p><h3 id="_3-入口和出口" tabindex="-1"><a class="header-anchor" href="#_3-入口和出口" aria-hidden="true">#</a> 3, 入口和出口</h3><p><strong>配置入口</strong></p><p>入口有三种写法，上面的是第一种写法，使用的是相对路径，也可以使用绝对路径，如下：</p><p><img src="' + _imports_2 + '" alt="image-20231206124510639"></p><p><code>.resolve</code>是Node.js中<code>path</code>模块提供的一个方法，用于解析路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> absolutePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span>   <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>absolutePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出：/Users/username/project/src/index.js</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n\n在上面的例子中，</span><span class="token template-punctuation string">`</span></span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span>   <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">将相对路径</span><span class="token template-punctuation string">`</span></span>src<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">和</span><span class="token template-punctuation string">`</span></span>index<span class="token punctuation">.</span>js<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">解析为了绝对路径</span><span class="token template-punctuation string">`</span></span><span class="token operator">/</span>Users<span class="token operator">/</span>username<span class="token operator">/</span>project<span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js`。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__dirname</code>是一个特殊的全局变量，用于获取当前模块的所在目录的绝对路径。</p><blockquote><p>在Node.js中，<code>__dirname</code>是一个固定的写法，它始终指向当前模块的所在目录的绝对路径。这个变量不需要引入任何模块，可以直接在模块中使用。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出：/Users/username/project/src</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置出口路径</strong></p><p>(出口路径必须是一个绝对路径)</p><p><img src="' + _imports_3 + '" alt="image-20231206124445897"></p><p>最好还是叫dist，有的地方，叫build，我们就叫dist。</p><p>filename可以指定一个格式化字符串，可以指定hash值，如下：</p><p><img src="' + _imports_4 + '" alt="image-20231206125007080"></p><p>说白了，输入的JS模块所依赖的源码发生了变化，打包时，hash值也会发生变化，用于解决浏览器缓存导致页面不刷新的问题。</p><h3 id="_4-配置开发服务器" tabindex="-1"><a class="header-anchor" href="#_4-配置开发服务器" aria-hidden="true">#</a> 4, 配置开发服务器</h3><p><img src="' + _imports_5 + '" alt="image-20231206125433034"></p><p>前面打包是把包打包到硬盘上的。在开发时，需要配置一个开发服务器，这个开发服务器可以直接让我们在内存中打包，速度是远远高于硬盘的。我们之前用的脚手架，都是在内存中打开。</p><p><img src="' + _imports_6 + '" alt="image-20231206125221174"></p><p>之前打包是使用webpack进行打包的，直接是在硬盘上的打包，现在我们需要使用内存打，如下：</p><p><img src="' + _imports_7 + '" alt="image-20231206125235119"></p><p>访问没有得到响应的页面, 需要配置脚本</p><p><img src="' + _imports_8 + '" alt="image-20231206130414982"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve --config webpack.config.js&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config webpack.config.js&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 npm run serve 查看页面可以访问成功</p><h3 id="_5-创建页面-把打包后的js插入页面" tabindex="-1"><a class="header-anchor" href="#_5-创建页面-把打包后的js插入页面" aria-hidden="true">#</a> 5, 创建页面，把打包后的js插入页面</h3><p>创建一个页面，如下：</p><p><img src="' + _imports_9 + '" alt="image-20231206130730584"></p><p>执行 npm run serve , 在内存中打包</p><p><img src="' + _imports_10 + '" alt="image-20231206130749035"></p><p>访问发现, 开发服务器会自动托管 public 目录</p><p>刚才是内存打包，在内存是有打包后的js文件的，能不能把打包的的js插入到上面的页面中呢 ?</p><p>结论，并没有把打包后的js文件，插入到页面中</p><p><strong>下载插件 html-webpack-plugin</strong></p><p><code>html-webpack-plugin</code>是一个Webpack插件，它的作用是简化在Webpack构建过程中生成HTML文件的操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次执行 npm run serve, 发现已经把 js 文件 挂载到 html 上了</p><p><img src="' + _imports_11 + '" alt="image-20231206131436376"></p><p>查看文件, script 标签多了一个 defer 属性</p><blockquote><p><code>async</code>和<code>defer</code>是<code>&lt;script&gt;</code>标签的两个属性，用于控制JavaScript脚本的加载和执行时机。</p><ol><li><code>async</code>属性：当给<code>&lt;script&gt;</code>标签添加<code>async</code>属性时，浏览器会异步加载脚本文件，并且不会阻塞页面的渲染。脚本文件在下载完成后立即执行，不会按照它们在文档中的顺序执行。多个带有<code>async</code>属性的脚本文件之间的执行顺序是不确定的。这适用于那些独立于其他脚本的、不依赖于其他脚本的代码。使用<code>async</code>属性时，脚本文件的加载和执行与页面的渲染是并行进行的。</li><li><code>defer</code>属性：当给<code>&lt;script&gt;</code>标签添加<code>defer</code>属性时，浏览器会异步加载脚本文件，但会确保脚本的执行在文档解析完成后、<code>DOMContentLoaded</code>事件之前进行。多个带有<code>defer</code>属性的脚本文件会按照它们在文档中的顺序执行。这适用于那些需要在文档解析完成后执行，并且可能依赖于其他脚本或DOM元素的代码。使用<code>defer</code>属性时，脚本文件的加载和执行与页面的渲染是并行进行的，但脚本的执行会在<code>DOMContentLoaded</code>事件之前。</li></ol></blockquote><p><img src="' + _imports_12 + '" alt="image-20231206131615252"></p><h3 id="_6-区分硬盘打包和内存打包" tabindex="-1"><a class="header-anchor" href="#_6-区分硬盘打包和内存打包" aria-hidden="true">#</a> 6, 区分硬盘打包和内存打包</h3><blockquote><p>打包分两种，一种是开发时的打包，一种是生产时的打包。不同的打包方式，是有不同的配置的，现在有两种打包方式，也就是说有两种配置，但是这两种配置中有一些公共的配置，把这些配置区分出来，创建如下的文件，如下：</p></blockquote><p><img src="' + _imports_13 + '" alt="image-20231206131836735"></p><p>不同生产模式, 分配不同的 mode</p><p>生产配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 生产配置</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>公共配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 公共配置</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">app</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>   <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span>   <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>   <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span>   <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  \n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;js/[name].[chunkhash:8].js&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 开发配置</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>  \n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置脚本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve --env production --config webpack.config.js&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>  \n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --env development --config webpack.config.js&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行查看打包环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="' + _imports_14 + '" alt="image-20231206184148660"></p><p>测试</p><p><img src="' + _imports_15 + '" alt="image-20231206185641421"></p><h3 id="_7-html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#_7-html-webpack-plugin" aria-hidden="true">#</a> 7, html-webpack-plugin</h3><p>之前，在硬盘上打包，都会生成dist，下一次打包还会生成dist，但是之前dist下面的文件并不会自动删除，如果你想每一次打包都删除上次dist下面的文件，配置如下：</p><p><img src="' + _imports_16 + '" alt="image-20231206185820991"></p><p>注意一点：如果源码没有变，打包后的app.xxxxxx.js也不会变，只有源码变了，才会生成新的文件。</p><p><strong>webpack-html-plugin</strong></p><p>接下来，讲webpack-html-plugin这个插件。看官网：</p><p><img src="' + _imports_17 + '" alt="image-20231206185841536"></p><p>上面配置了template，是用来指定页面的位置，可以使用绝对路径，如下：</p><p><img src="' + _imports_18 + '" alt="image-20231206190109843"></p><p>配置把js文件插入到body结束标签之前，如下：</p><p><img src="' + _imports_19 + '" alt="image-20231206194928536"></p><p><img src="' + _imports_20 + '" alt="image-20231206195940285"></p><p><img src="' + _imports_21 + '" alt="image-20231206195957043"></p><p>基本配置</p><p><img src="' + _imports_22 + '" alt="image-20231206200018528"></p><p>还需要在页面中title标签位置写如下代码：</p><p><img src="' + _imports_23 + '" alt="image-20231206202133028"></p><p>还可以配置一个小icon，制作一个icon</p><p><img src="' + _imports_24 + '" alt="image-20231206202351414"></p><h3 id="_8-progressplugin" tabindex="-1"><a class="header-anchor" href="#_8-progressplugin" aria-hidden="true">#</a> 8, ProgressPlugin</h3><p>在配置中使用</p><p><img src="' + _imports_25 + '" alt="image-20231206202412469"></p><p>配置hander，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 进度条</span>\n    <span class="token keyword">new</span> <span class="token class-name">ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">percentage<span class="token punctuation">,</span>   message<span class="token punctuation">,</span>   <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>percentage <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;100%打包成功&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>percentage <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">% 正在打包(编译...)</span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_26 + '" alt="image-20231206203230844"></p><p>​</p><h3 id="_9-babel" tabindex="-1"><a class="header-anchor" href="#_9-babel" aria-hidden="true">#</a> 9, babel</h3><blockquote><p>Babel是一个流行的JavaScript编译器，用于将新版本的JavaScript代码转译为向后兼容的旧版本。Babel插件是扩展Babel功能的模块，用于处理特定的语法或转换代码。</p></blockquote><p><strong>常见的Babel插件及其功能</strong>：</p><ol><li><code>@babel/preset-env</code>：这是一个预设（preset）插件，用于根据目标环境自动确定要使用的Babel插件和转换规则。它根据你指定的目标浏览器、Node.js版本或其他环境，自动选择并应用必要的转换规则。</li><li><code>@babel/preset-react</code>：这个预设插件用于处理React应用中的代码。它包含了针对React的特定转换规则，例如将JSX语法转换为普通的JavaScript函数调用。</li><li><code>@babel/preset-typescript</code>：这个预设插件用于处理TypeScript代码。它会将TypeScript语法转换为普通的JavaScript语法，以便在不支持TypeScript的环境中运行。</li><li><code>@babel/plugin-proposal-class-properties</code>：这个插件用于处理ES提案中的类属性语法。它允许你在类中直接声明类属性，而不需要将其放在构造函数中。</li><li><code>@babel/plugin-transform-arrow-functions</code>：这个插件用于将箭头函数转换为普通的函数表达式，以提供更广泛的浏览器兼容性。</li><li><code>@babel/plugin-transform-async-to-generator</code>：这个插件用于将<code>async/await</code>语法转换为使用生成器函数的形式，以便在不支持原生<code>async/await</code>的环境中运行。</li></ol><p>在入口中写一点ES6+的代码如下：</p><p><img src="' + _imports_27 + '" alt="image-20231206203323043"></p><p>?. (可选链操作符)</p><blockquote><p>JavaScript语言中的可选链操作符（Optional Chaining Operator），而不是ES标准中的语法。该操作符允许您在访问对象的属性或调用方法时，可以安全地处理可能为null或undefined的中间值，而不会引发错误。</p></blockquote><p><img src="' + _imports_28 + '" alt="image-20231206203336623"></p><p>在内存中打包，如果源码变了，会自动重新打包，</p><p><img src="' + _imports_29 + '" alt="image-20231206203741596"></p><p>也就是说，webapck对于ES6+中的一些语法，它也不能直接转化成ES5，不能转化成ES5，浏览器对ES5的兼容性是最好，我们需要使用loader，loader就是把webpack不能识别的模块，转化成webpack可以识别的模块。</p><p><strong>loader 加载</strong></p><blockquote><p>在Babel中，Loader是用于在Webpack构建过程中处理特定类型的文件的插件。Loader允许你在Webpack中引入并转换不同类型的文件，例如JavaScript、CSS、图片等。</p></blockquote><p>常见的Babel Loader及其功能：</p><ol><li><code>babel-loader</code>：这是用于处理JavaScript文件的Babel Loader。它会将指定的JavaScript文件传递给Babel编译器，以进行语法转换和代码转译。</li><li><code>css-loader</code>：这个Loader用于处理CSS文件。它允许你在JavaScript文件中引入CSS文件，并处理CSS文件中的依赖关系（例如<code>@import</code>和<code>url()</code>）。</li><li><code>style-loader</code>：这个Loader用于将CSS代码注入到HTML页面中的<code>&lt;style&gt;</code>标签中。它会将CSS模块的样式动态插入到页面中，使得样式生效。</li><li><code>file-loader</code>：这个Loader用于处理文件资源（例如图片、字体等）。它会将文件复制到输出目录，并返回文件的路径，以便在JavaScript中引用。</li><li><code>url-loader</code>：这个Loader与<code>file-loader</code>类似，但它可以根据文件大小将文件转换为DataURL，以减少HTTP请求。较小的文件会被转换为DataURL，而较大的文件会被保留为独立的文件。</li></ol><p><img src="' + _imports_30 + '" alt="image-20231206204117408"></p><p>JS模块中有高级语法，高级语法，如何转化成低级语法，让webpack识别呢？</p><p>安装babel，如下：</p><p><img src="' + _imports_31 + '" alt="image-20231206204143453"></p><p>配置</p><p><img src="' + _imports_32 + '" alt="image-20231206204448471"></p><p><img src="' + _imports_33 + '" alt="image-20231206204440922"></p><p>ES6中的语法，非常多，你要转化语法，需要安装对应插件，如你要把箭头函数转化成普通函数，那你就需要安装一个箭头函数转普通函数的插件，如你要把let转化成var，你需要安装一把let转成var的插件。也就说如果项目中用到了非常多的ES6语法，都需要转化，那就可以安装500个插件，babel给我们封装了很多预设，预设是插件集合，也就是集合中包含了很多的插件，如有一个预设，它可以把ES6中的大部分语法，转化成ES5，这个预设叫@babel/preset-env。预设并不是转化所有语法，仅仅是大部分的，个别语法转化不了，需要单独安装插件。</p><p><strong>preset 预设</strong></p><p><img src="' + _imports_34 + '" alt="image-20231206205534853"></p><p>后面我们需要学习一堆的loader，去转化不同的模块(使用loader来处理)。</p><ul><li>.js</li><li>.vue vue-loader</li><li>.jsx</li><li>.ts</li><li>.png</li><li>.less</li><li>.sass</li><li>.css</li><li>.json</li><li>.....</li></ul><p><strong>plugins</strong></p><p>预设无法识别的语法, 需要安装对应的插件</p><h3 id="_10-打包jsx模块" tabindex="-1"><a class="header-anchor" href="#_10-打包jsx模块" aria-hidden="true">#</a> 10, 打包JSX模块</h3><p>说明，webpack，默认情况下是不能处理jsx文件的，此时，就需要使用babel进行编译，说到babel就要想到预设和插件，此时，jsx就需要一个预设来处理</p><p>到此，打包jsx（react中的组件）就OK了，你可以尝试打包一下vue文件，你就创建一个App.vue，尝试打包，100%打包不成功。因为webpack压根不认识.vue文件，你需要安装对应的loader和预设，使用loader加载你的.vue文件，使用预设去翻译你的vue代码。</p><h3 id="_11-配置source-map" tabindex="-1"><a class="header-anchor" href="#_11-配置source-map" aria-hidden="true">#</a> 11, 配置source-map</h3><p><img src="' + _imports_35 + '" alt="image-20231206210943435"></p><p>这里的报错只是 webpack 打包后的错误位置, 错误位置信息并不准确, 这会影响到我们对错误的定位, 于是我们可以安装并配置, 让他报错的位置是我们打包前的代码错误位置信息</p><p><img src="' + _imports_36 + '" alt="image-20231206210953542"></p><p>如果想让代码的报错位置正确，需要配置一个devtool，如下：</p><p><img src="' + _imports_37 + '" alt="image-20231206211106267"></p><p>不同的配置代表的含义是不一样的。配置如下：</p><p><img src="' + _imports_38 + '" alt="image-20231206211138974"></p><p>在生产中，可以不去配置source-map，上线的也是打包后的代码，可以不配置，也可以配置</p><p><img src="' + _imports_39 + '" alt="image-20231206211154303"></p><p><img src="' + _imports_40 + '" alt="image-20231206211220483"></p><p><img src="' + _imports_41 + '" alt="image-20231206211226024"></p><p><img src="' + _imports_42 + '" alt="image-20231206211232476"></p><h3 id="_12-provideplugin" tabindex="-1"><a class="header-anchor" href="#_12-provideplugin" aria-hidden="true">#</a> 12, ProvidePlugin</h3><p>分析</p><p><img src="' + _imports_43 + '" alt="image-20231206211255230"></p><p><img src="' + _imports_44 + '" alt="image-20231206211307278"></p><p>如何把某些包放到全局中，此时需要使用ProvidePlugin，如下：</p><p><img src="' + _imports_45 + '" alt="image-20231206211338144"></p><p>动了配置文件，需要重新打包，再去访问</p><p>打包时，我们不希望webpack去打包node_module，配置如下：</p><p><img src="' + _imports_46 + '" alt="image-20231206211517094"></p><h3 id="_13-把第三方包抽离出来" tabindex="-1"><a class="header-anchor" href="#_13-把第三方包抽离出来" aria-hidden="true">#</a> 13, 把第三方包抽离出来</h3><p>现在尝试去打包，如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="' + _imports_47 + '" alt="image-20231206211833694"></p><p>现在就需要把第三方包抽离出来，如下：</p><p><img src="' + _imports_48 + '" alt="image-20231206211926858"></p><p>再次打包如下：</p><p><img src="' + _imports_49 + '" alt="image-20231206212119345"></p><p><img src="' + _imports_50 + '" alt="image-20231206212125460"></p><h3 id="_14-打包css和sass" tabindex="-1"><a class="header-anchor" href="#_14-打包css和sass" aria-hidden="true">#</a> 14, 打包css和sass</h3><p>写一点样式，如下：</p><p><img src="' + _imports_51 + '" alt="image-20231206212205074"></p><p>在入口文件中，引入css文件，如下：</p><p><img src="' + _imports_52 + '" alt="image-20231206212216152"></p><p>webpack肯定不能加载css文件，肯定是需要一个loader进行加载的，测试如下</p><p><img src="' + _imports_53 + '" alt="image-20231206212236839"></p><p>此时，就需要安装对应的loader</p><p><img src="' + _imports_54 + '" alt="image-20231206212258296"></p><p><img src="' + _imports_55 + '" alt="image-20231206212315261"></p><p>开始配置</p><p><img src="' + _imports_56 + '" alt="image-20231206212325517"></p><p>在内存中打包测试一下</p><p>在生产打包时，需要把css抽离出来，此时我们需要用到一个插件，这个插件中带了一个loader，安装一下：</p><p><img src="' + _imports_57 + '" alt="image-20231206212404447"></p><p><img src="' + _imports_58 + '" alt="image-20231206212412602"></p><p>配置如下</p><p><img src="' + _imports_59 + '" alt="image-20231206212426268"></p><p>打包如下</p><p><img src="' + _imports_60 + '" alt="image-20231206212436167"></p><p>测试</p><p>现在希望把打包后的样式放到css文件夹，并且加上hash值，解决缓存问题，如下</p><p><img src="' + _imports_61 + '" alt="image-20231206212515592"></p><p>打包测试</p><p><img src="' + _imports_62 + '" alt="image-20231206212529086"></p><p>也就是说，在开发时，样式，采用的是内部样式，在上线时，样式采用的是外部样式。</p><p><strong>Scss</strong></p><p>然后打包scss，创建scss文件，如下 ：</p><p><img src="' + _imports_63 + '" alt="image-20231206212718549"></p><p>此时，就需要使用sass-loader来加载编译scss代码</p><p><img src="' + _imports_64 + '" alt="image-20231206212726444"></p><p>配置如下</p><p><img src="' + _imports_65 + '" alt="image-20231206212743214"></p><p>看一下，是否可以处理scss代码，浏览器测试之</p><p>同理，如果是less也是一样的，需要使用less-loader来处理。</p><h3 id="_15-打包图片" tabindex="-1"><a class="header-anchor" href="#_15-打包图片" aria-hidden="true">#</a> 15, 打包图片</h3><p>在webpack眼中，一切都是模块，图片当然也是模块。准备一张图片，如下：</p><h3 id="_16-eslint" tabindex="-1"><a class="header-anchor" href="#_16-eslint" aria-hidden="true">#</a> 16, ESlint</h3><blockquote><p><strong>介绍</strong></p><p>ESLint是一个用于JavaScript代码的静态分析工具，可以帮助开发人员发现和修复代码中的常见问题和潜在错误。它可以通过定义一组规则来检查代码，并根据这些规则提供有关代码质量和风格的建议和警告。</p><p><strong>原理</strong></p><p>ESLint的工作原理是通过解析代码并创建抽象语法树（AST）来分析代码。然后，它会遍历AST并应用定义的规则来检查代码中的问题。规则可以检查代码的各个方面，包括变量声明、函数调用、语法错误、代码风格和最佳实践等。</p><p><strong>功能</strong></p><p>ESLint具有广泛的可配置性，可以根据项目的需求和团队的偏好来自定义规则。您可以选择使用ESLint的默认规则集，也可以根据需要添加、修改或禁用规则。此外，ESLint还支持使用插件，这些插件提供了扩展的规则集，用于检查特定的库、框架或语言特性。</p><p><strong>用途</strong></p><p>ESLint可以作为开发工具的一部分，集成到各种编辑器和集成开发环境（IDE）中。它可以在开发过程中实时检查代码，并提供即时的反馈和建议。这有助于提高代码质量、减少错误和维护一致的代码风格。</p></blockquote><p>ESLint可以带来以下好处：</p><ol><li>提高代码质量：ESLint可以检测潜在的错误、常见的问题和不良的代码习惯，帮助您编写更健壮、可靠的代码。</li><li>统一的代码风格：通过定义一致的规则并强制执行，ESLint可以确保团队成员遵循相同的代码风格和最佳实践。</li><li>提高开发效率：ESLint可以在开发过程中即时提供反馈和建议，帮助您及早发现和解决问题，减少调试时间。</li><li>可扩展性：ESLint支持插件和自定义规则，使您能够根据项目的需求进行扩展和定制。</li></ol><p><strong>安装 eslint 插件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev\n或者\n<span class="token function">yarn</span> <span class="token function">add</span> eslint <span class="token parameter variable">--dev</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化ESLint配置</strong>：在项目目录下运行以下命令，它将生成一个初始的ESLint配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx eslint <span class="token parameter variable">--init</span>\n\n运行上述命令后，您将被要求回答一些问题，以确定您希望如何配置ESLint。这些问题包括：\n- 如何使用ESLint（选择<span class="token string">&quot;Use a popular style guide&quot;</span>或者<span class="token string">&quot;Answer questions about your style&quot;</span>）\n- 选择一个风格指南（如果选择了上一步中的<span class="token string">&quot;Use a popular style guide&quot;</span>）\n- 是否使用ES6+语法（选择<span class="token string">&quot;Yes&quot;</span>或者<span class="token string">&quot;No&quot;</span>）\n- 是否使用模块（选择<span class="token string">&quot;None of these&quot;</span>、<span class="token string">&quot;CommonJS&quot;</span>或者<span class="token string">&quot;ES Modules&quot;</span>）\n- 是否启用React	（选择<span class="token string">&quot;Yes&quot;</span>或者<span class="token string">&quot;No&quot;</span>）\n- 是否使用TypeScript（选择<span class="token string">&quot;Yes&quot;</span>或者<span class="token string">&quot;No&quot;</span>）\n- 配置文件的格式（选择<span class="token string">&quot;JavaScript&quot;</span>或者<span class="token string">&quot;YAML&quot;</span>）\n\n回答完这些问题后，ESLint将根据您的回答为您生成一个初始的配置文件（通常是<span class="token variable"><span class="token variable">`</span>.eslintrc.js<span class="token variable">`</span></span>或<span class="token variable"><span class="token variable">`</span>.eslintrc.json<span class="token variable">`</span></span>）。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置规则</strong>：根据您的需求和团队的偏好，您可以编辑生成的配置文件以添加、修改或禁用规则。在配置文件中，您可以定义规则的严重级别（如&quot;error&quot;、&quot;warn&quot;或&quot;off&quot;）以及其他选项。可以通过参考ESLint的文档来查找可用的规则和配置选项。</p><p><strong>配置编辑器</strong>：为了在编辑器中实时检查代码并获得即时反馈，您需要在编辑器中配置ESLint插件。根据您使用的编辑器，可以找到相应的ESLint插件，并按照插件的说明进行安装和配置。一些常见的编辑器插件包括ESLint for Visual Studio Code、ESLint for Sublime Text等。</p><p>在 .eslintrc.js 文件中配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">es6</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 使用 ESLint 推荐的规则</span>\n    <span class="token string">&#39;plugin:react/recommended&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 使用 React 相关的规则</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2021</span><span class="token punctuation">,</span> <span class="token comment">// 指定 ECMAScript 版本</span>\n    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 允许使用 import/export 语法</span>\n    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用 JSX</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 配置自定义规则</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在这里添加/修改规则</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-vue-脚手架中的-eslint" tabindex="-1"><a class="header-anchor" href="#_17-vue-脚手架中的-eslint" aria-hidden="true">#</a> 17, Vue 脚手架中的 eslint</h3><p>创建vue脚手架创建项目，如下：</p><p><img src="' + _imports_66 + '" alt="image-20231207211217286"></p><p><img src="' + _imports_67 + '" alt="image-20231207211226175"></p><p><img src="' + _imports_68 + '" alt="image-20231207211232383"></p><p><img src="' + _imports_69 + '" alt="image-20231207211238161"></p><p><img src="' + _imports_70 + '" alt="image-20231207211248538"></p><p>弹出vue脚手架中webpack的配置，如下：</p><p><img src="' + _imports_71 + '" alt="image-20231207211258370"></p><h3 id="_18-配置路径相关" tabindex="-1"><a class="header-anchor" href="#_18-配置路径相关" aria-hidden="true">#</a> 18, 配置路径相关</h3><p><img src="' + _imports_72 + '" alt="image-20231207211314924"></p><p>使用之，如下：</p><p><img src="' + _imports_73 + '" alt="image-20231207211350130"></p><h3 id="_19-搭建vue的开发环境" tabindex="-1"><a class="header-anchor" href="#_19-搭建vue的开发环境" aria-hidden="true">#</a> 19，搭建Vue的开发环境</h3><p>参考地址：https://blog.csdn.net/qq_40412456/article/details/122334286</p><p>安装依赖：</p><p><img src="' + _imports_74 + '" alt="image-20231207211431831"></p><p><img src="' + _imports_75 + '" alt="image-20231207211449884"></p><p>配置如下：</p><p><img src="' + _imports_76 + '" alt="image-20231207211503972"></p><p><img src="' + _imports_77 + '" alt="image-20231207211521447"></p><p>打包测试 npm run build</p><h3 id="_20-打包less" tabindex="-1"><a class="header-anchor" href="#_20-打包less" aria-hidden="true">#</a> 20，打包less</h3><h3 id="_21-打包字体图标" tabindex="-1"><a class="header-anchor" href="#_21-打包字体图标" aria-hidden="true">#</a> 21，打包字体图标</h3><h3 id="_22-打包主流程" tabindex="-1"><a class="header-anchor" href="#_22-打包主流程" aria-hidden="true">#</a> 22，==打包主流程==</h3><p>流程图</p><p><img src="' + _imports_78 + '" alt="image-20231207211613496"></p><p>Webpack <strong>首先</strong>需要根据输入配置(<code>entry/context</code>) 找到项目入口文件；<strong>之后</strong>根据按模块处理(<code>module/resolve/externals</code> 等) 所配置的规则逐一处理模块文件，处理过程包括转译、依赖分析等；模块处理完毕后，最后<strong>再根据</strong>后处理相关配置项(<code>optimization/target</code> 等)合并模块资源、注入运行时依赖、优化产物结构等。</p><p><strong>输入</strong>：</p><ul><li>从文件系统读入代码文件；</li></ul><p>模块递归处理：</p><ul><li>调用 Loader 转译 Module 内容，并将结果转换为 AST，从中分析出模块依赖关系，进一步递归调用模块处理过程，直到所有依赖文件都处理完毕；</li></ul><p><strong>后处理</strong>：</p><ul><li>所有模块递归处理完毕后开始执行后处理，包括模块合并、注入运行时、产物优化等，最终输出 Chunk 集合；</li></ul><p><strong>输出</strong>：</p><ul><li>将 Chunk 写出到外部文件系统；</li></ul><h3 id="_23-配置分类" tabindex="-1"><a class="header-anchor" href="#_23-配置分类" aria-hidden="true">#</a> 23，配置分类</h3><p>从上述打包流程角度，Webpack 配置项大体上可分为两类：</p><ul><li>流程类：作用于打包流程某个或若干个环节，直接影响编译打包效果的配置项</li><li>工具类：打包主流程之外，提供更多工程化工具的配置项</li></ul><h3 id="_24-主流程类配置" tabindex="-1"><a class="header-anchor" href="#_24-主流程类配置" aria-hidden="true">#</a> 24，主流程类配置</h3><p>流程类的配置：</p><ul><li>输入输出 <ul><li><code>entry</code>：用于定义项目入口文件，Webpack 会从这些入口文件开始按图索骥找出所有项目文件；</li><li><code>output</code>：配置产物输出路径、名称等；</li><li><code>context</code>：项目执行上下文路径；</li></ul></li><li>模块处理： <ul><li><code>resolve</code>：用于配置模块路径解析规则，可用于帮助 Webpack 更精确、高效地找到指定模块</li><li><code>module</code>：用于配置模块加载规则，例如针对什么类型的资源需要使用哪些 Loader 进行处理</li><li><code>externals</code>：用于声明外部资源，Webpack 会直接忽略这部分资源，跳过这些资源的解析、打包操作</li></ul></li><li>后处理 <ul><li><code>mode</code>：编译模式短语，支持 <code>development</code>、<code>production</code> 等值，可以理解为一种声明环境的短语</li><li><code>target</code>：用于配置编译产物的目标运行环境，支持 web、node、electron 等值，不同值最终产物会有所差异</li><li><code>optimization</code>：用于控制如何优化产物包体积，内置 Dead Code Elimination、Scope Hoisting、代码混淆、代码压缩等功能</li></ul></li></ul><h3 id="_25-工具类配置" tabindex="-1"><a class="header-anchor" href="#_25-工具类配置" aria-hidden="true">#</a> 25，工具类配置</h3><p>工具类的配置（除了核心的打包功能之外，Webpack 还提供了一系列用于提升研发效率的工具）。提升开发效率的配置：</p><ul><li><code>devServer</code>：用于配置与 HMR 强相关的开发服务器功能</li><li><code>devtool</code>：用于配置产物 Sourcemap 生成规则</li><li><code>watch</code>：用于配置持续监听文件变化，持续构建</li></ul><p>性能优化化的配置：</p><ul><li><code>cache</code>：Webpack 5 之后，该项用于控制如何缓存编译过程信息与编译结果</li><li><code>performance</code>：用于配置当产物大小超过阈值时，如何通知开发者</li></ul><p>日志类的配置：</p><ul><li><code>stats</code>：用于精确地控制编译过程的日志内容，在做比较细致的性能调试时非常有用</li><li><code>infrastructureLogging</code>：用于控制日志输出方式，例如可以通过该配置将日志输出到磁盘文件</li></ul><p><img src="' + _imports_79 + '" alt="image-20231207211838670"></p><p>Webpack 提供了上百项复杂配置，但大体上都可以归类为流程类配置或工具类配置，对于流程类配置应该多关注它们对编译主流程的影响；而工具类则更加内聚，基本上一种配置项解决一种工程化问题。</p>', 281);
const _hoisted_282 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_282);
}
const Webpack_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Webpack.html.vue"]]);
export {
  Webpack_html as default
};
