import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-12e56767.js";
const _imports_0 = "/bowenBlog/assets/image-20231223190620788-29fd6c08.png";
const _imports_1 = "/bowenBlog/assets/image-20231223190607832-b94db2ba.png";
const _imports_2 = "/bowenBlog/assets/image-20231225194317720-2ef3131c.png";
const _imports_3 = "/bowenBlog/assets/image-20231223195421169-404abd5f.png";
const _imports_4 = "/bowenBlog/assets/image-20231223201550463-4204943f.png";
const _imports_5 = "/bowenBlog/assets/image-20231223201707381-09f7aeb1.png";
const _imports_6 = "/bowenBlog/assets/image-20231223202003763-a608c89d.png";
const _imports_7 = "/bowenBlog/assets/image-20231223202826370-7452eefb.png";
const _imports_8 = "/bowenBlog/assets/image-20231223202835905-55bc5a6f.png";
const _imports_9 = "/bowenBlog/assets/image-20231223202946764-df595b04.png";
const _imports_10 = "/bowenBlog/assets/image-20231223203630543-8b271f40.png";
const _imports_11 = "/bowenBlog/assets/image-20231223203659184-3b954d63.png";
const _imports_12 = "/bowenBlog/assets/image-20231223203706523-3f08cb47.png";
const _imports_13 = "/bowenBlog/assets/image-20231223203720780-9e2068ff.png";
const _imports_14 = "/bowenBlog/assets/image-20231223203731919-f9e5e347.png";
const _imports_15 = "/bowenBlog/assets/image-20231223203839719-0e071c96.png";
const _imports_16 = "/bowenBlog/assets/image-20231223203945575-b27c82b2.png";
const _imports_17 = "/bowenBlog/assets/image-20231223204036970-8cc78f84.png";
const _imports_18 = "/bowenBlog/assets/image-20231223204231147-29f8544b.png";
const _imports_19 = "/bowenBlog/assets/image-20231223204309330-36e92201.png";
const _imports_20 = "/bowenBlog/assets/image-20231223204317225-ee80e5b6.png";
const _imports_21 = "/bowenBlog/assets/image-20231223204327198-c1274ed7.png";
const _imports_22 = "/bowenBlog/assets/image-20231223204339838-2bee5679.png";
const _imports_23 = "/bowenBlog/assets/image-20231223204543491-d98b7551.png";
const _imports_24 = "/bowenBlog/assets/image-20231223204555668-67b28c76.png";
const _imports_25 = "/bowenBlog/assets/image-20231225194655559-e024cf93.png";
const _imports_26 = "/bowenBlog/assets/image-20231225195613559-8789a399.png";
const _imports_27 = "/bowenBlog/assets/image-20231225195935642-e15b4a8e.png";
const _imports_28 = "/bowenBlog/assets/image-20231225202007756-14dfdab6.png";
const _imports_29 = "/bowenBlog/assets/image-20231225203329229-a803c7e5.png";
const _imports_30 = "/bowenBlog/assets/image-20231225203345962-10082d9b.png";
const _imports_31 = "/bowenBlog/assets/image-20231225203509596-e88a30b2.png";
const _imports_32 = "/bowenBlog/assets/image-20231225203602987-cca45644.png";
const _imports_33 = "/bowenBlog/assets/image-20231225203732776-91672ee3.png";
const _imports_34 = "/bowenBlog/assets/image-20231225203742847-0b54dc49.png";
const _imports_35 = "/bowenBlog/assets/image-20231225203847079-1046aef7.png";
const _imports_36 = "/bowenBlog/assets/image-20231225205322305-d7958498.png";
const _imports_37 = "/bowenBlog/assets/image-20231225205647317-c43402c1.png";
const _imports_38 = "/bowenBlog/assets/image-20231225213315720-9a980cf3.png";
const _imports_39 = "/bowenBlog/assets/image-20231225213326110-87866e47.png";
const _imports_40 = "/bowenBlog/assets/image-20231225213337221-05edae7d.png";
const _imports_41 = "/bowenBlog/assets/image-20231225213358578-ec25c869.png";
const _imports_42 = "/bowenBlog/assets/image-20231225213412745-68e081ff.png";
const _imports_43 = "/bowenBlog/assets/image-20231225214931020-70d42882.png";
const _imports_44 = "/bowenBlog/assets/image-20231225214947578-38654449.png";
const _imports_45 = "/bowenBlog/assets/image-20231225214957018-b0959700.png";
const _imports_46 = "/bowenBlog/assets/image-20231225215038177-9fa10381.png";
const _imports_47 = "/bowenBlog/assets/image-20231225220751212-1d3e7a8d.png";
const _imports_48 = "/bowenBlog/assets/image-20231225220818728-9c0c07db.png";
const _imports_49 = "/bowenBlog/assets/image-20231225220901361-277d4255.png";
const _imports_50 = "/bowenBlog/assets/image-20231225220953437-d4e0c9b7.png";
const _imports_51 = "/bowenBlog/assets/image-20231225221059738-9b4b5bb9.png";
const _imports_52 = "/bowenBlog/assets/image-20231225221309279-b56e7dc9.png";
const _imports_53 = "/bowenBlog/assets/image-20231225221446539-a4d6f2df.png";
const _imports_54 = "/bowenBlog/assets/image-20231225223142896-23dfb61b.png";
const _imports_55 = "/bowenBlog/assets/image-20231226193941778-24d1d08f.png";
const _imports_56 = "/bowenBlog/assets/image-20231226195037692-6b2bbf68.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="一-初识react" tabindex="-1"><a class="header-anchor" href="#一-初识react" aria-hidden="true">#</a> 一, 初识React</h2><hr><h3 id="_1-初识react" tabindex="-1"><a class="header-anchor" href="#_1-初识react" aria-hidden="true">#</a> 1, 初识React</h3><p>官网：https://react.docschina.org/</p><p>React 文档</p><p><img src="' + _imports_0 + '" alt="image-20231223190620788"></p><p><img src="' + _imports_1 + '" alt="image-20231223190607832"></p><p>在React文档中API大概就10个左右，vue能做的事，React都可以做。</p><h3 id="_2-使用官方的脚手架" tabindex="-1"><a class="header-anchor" href="#_2-使用官方的脚手架" aria-hidden="true">#</a> 2, 使用官方的脚手架</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx create-react-app my-app <span class="token comment"># 创建react项目, 项目命名</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="' + _imports_2 + '" alt="image-20231225194317720"></p><p>快速开始 React 项目工程</p><h3 id="_3-配置-webpack-解决路径" tabindex="-1"><a class="header-anchor" href="#_3-配置-webpack-解决路径" aria-hidden="true">#</a> 3, 配置 webpack 解决路径</h3><blockquote><p>使用官方脚手架可以跳过此步骤</p></blockquote><h3 id="_4-类组件和函数组件" tabindex="-1"><a class="header-anchor" href="#_4-类组件和函数组件" aria-hidden="true">#</a> 4, 类组件和函数组件</h3><blockquote><p>React 中，有两种主要类型的组件：类组件（Class Components）和函数组件（Function Components）</p></blockquote><p><strong>类组件</strong></p><p>类组件是使用 ES6 类语法定义的组件。它们继承自 <code>React.Component</code> 类，并且必须实现 <code>render</code> 方法来定义组件的渲染逻辑。类组件可以维护状态（state）和生命周期方法（lifecycle methods），并且具有更多的功能和灵活性。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, I&#39;m a class component!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数组件</strong></p><blockquote><p>函数组件是使用 JavaScript 函数定义的组件。它们接收一个名为 <code>props</code> 的参数，并返回一个虚拟 DOM 元素作为组件的输出。函数组件通常用于只关注 UI 渲染的简单组件，它们没有自己的状态，也没有生命周期方法。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, I&#39;m a function component!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">FunctionComponentWithHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component mounted or count updated&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-基本使用" tabindex="-1"><a class="header-anchor" href="#_5-基本使用" aria-hidden="true">#</a> 5, 基本使用</h3><h3 id="_6-render-函数" tabindex="-1"><a class="header-anchor" href="#_6-render-函数" aria-hidden="true">#</a> 6, render 函数</h3><blockquote><p>在 React 中，<code>render</code> 函数是用于定义组件的渲染方法。每个 React 组件都必须实现 <code>render</code> 方法，它负责根据组件的当前状态和属性（props）生成组件的虚拟 DOM（Virtual DOM）结构。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token comment">// 返回组件的虚拟 DOM 结构</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a React component.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//	render 函数返回了一个包含 JSX 元素的表达式。当组件被渲染时，这些 JSX 元素将被转换为实际的 DOM 元素，并插入到页面中</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-严格模式" tabindex="-1"><a class="header-anchor" href="#_7-严格模式" aria-hidden="true">#</a> 7, 严格模式</h3><p>React的一个特殊组件，用于启用严格模式。严格模式会进行一些额外的检查，帮助开发者发现潜在的问题，比如未定义的组件、意外的生命周期方法调用等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom/client&#39;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span>\n\n<span class="token comment">// 获取根实例</span>\n<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 根组件渲染</span>\nroot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong></p><ul><li><code>render</code> 函数必须返回一个有效的 JSX 表达式。它可以是一个单独的元素，也可以是一个包含多个元素的片段（使用 <code>&lt;React.Fragment&gt;</code> 或简写的<strong>空标签</strong> <code>&lt;&gt;</code>）。</li><li><code>render</code> 函数内部可以包含任意的 JavaScript 逻辑，例如条件语句、循环等。这样可以根据组件的状态和属性来动态生成 JSX 内容。</li><li>在 JSX 表达式中可以引用组件的属性和状态，并将它们作为变量使用。这样可以根据组件的数据来动态生成 UI。</li><li>注意 JSX 中的标签命名规范，通常<strong>组件类名以大写字母开头</strong>，而 HTML 标签名以小写字母开头。</li></ul><h2 id="二-jsx-语法" tabindex="-1"><a class="header-anchor" href="#二-jsx-语法" aria-hidden="true">#</a> 二, JSX 语法</h2><hr><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><blockquote><p>jsx = javascript + xml，是facebooK发明的语法，浏览器是不认识这种语法的，需要利用babel编译成浏览器可以识别的语法。</p></blockquote><p>基本的使用步骤:</p><ul><li><p>引入 React 库</p></li><li><p>标签闭合：在 JSX 中，标签必须被正确闭合。自闭合标签需要在标签末尾添加一个斜杠 <code>/</code>。</p></li><li><p>类名和样式：在 JSX 中，<code>class</code> 属性需要写成 <code>className</code>，因为 <code>class</code> 是 JavaScript 的保留关键字</p></li><li></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDiv<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于内联样式，需要使用一个 JavaScript 对象来表示。例如：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>表达式和变量：在 JSX 中，可以使用花括号 <code>{}</code> 来包裹 JavaScript 表达式和变量。这允许在 JSX 中使用动态值。</p></li><li><p>注释：在 JSX 中，注释需要写在花括号内，并以大括号开头。</p></li><li><p>标签命名规范：在 JSX 中，标签名通常以大写字母开头，以便与普通的 HTML 标签区分开来。</p></li></ul><h3 id="创建-dom" tabindex="-1"><a class="header-anchor" href="#创建-dom" aria-hidden="true">#</a> 创建 DOM</h3><p>使用 JSX 语法实例, 创建 DOM 元素</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">let</span> box <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello React~</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 组件返回JSX元素</span>\n  <span class="token comment">// return box</span>\n\n  <span class="token comment">// 使用JSX语法</span>\n  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;box&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;haha&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// JSX语法创建元素</span>\n    <span class="token punctuation">[</span>\n      React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;我是span标签&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 键值是唯一的值</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;baidu&#39;</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> DemoC\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>官方推荐是使用jsx，jsx更加直观，浏览器是不能识别jsx，需要使用babel进行翻译，翻译成了React.createElement的形式。</p></blockquote><h3 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖" aria-hidden="true">#</a> 语法糖</h3><p>jsx 元素写法有两种：</p><ul><li>jsx的语法糖形式</li><li>React.createElement的形式</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// React必须写在前面, 是默认导出的类</span>\n<span class="token comment">// Component是React中的类, 需要解构</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token comment">// JSX 的两种写法</span>\n<span class="token keyword">let</span> el1 <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是div</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token keyword">let</span> el2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;我是一个div&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el1<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el2<span class="token punctuation">)</span>\n\n\n<span class="token comment">// JSX 的一个独特功能是它能够直接嵌套组件</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>  \n<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本质是对象" tabindex="-1"><a class="header-anchor" href="#本质是对象" aria-hidden="true">#</a> 本质是对象</h3><blockquote><p>jsx元素本质是一个对象，这个对象是不可变对象。</p></blockquote><p><img src="' + _imports_3 + '" alt="image-20231223195421169"></p><p><strong>为什么在设计jsx元素时，设计成不可变对象呢？</strong></p><p>答：你要知道jsx元素最终需要被渲染成真实DOM元素，所以不能直接操作&quot;原材料&quot;，只能使用它。</p><p><strong>什么是jsx元素，什么是组件</strong>？</p><ul><li>由class或function定义出来的叫组件，<strong>组件名必须大写</strong></li><li>由jsx语法或React.createElement返回的结果叫jsx元素，jsx元素充当组件的视图模板</li></ul><h3 id="插值" tabindex="-1"><a class="header-anchor" href="#插值" aria-hidden="true">#</a> 插值</h3><blockquote><p>在 JSX 中，使用一对花括号 <code>{}</code> 来表示插值，可以在 JSX 中嵌入 JavaScript 表达式或变量。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是函数式组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token keyword">function</span> <span class="token function">DemoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">函数式组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>el<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>&lt;Fragment&gt;</code> 标签可以被省略，而不影响代码的功能。</p><p>React 提供了一个简写方式来使用片段（Fragment），即空标签 <code>&lt;&gt;&lt;/&gt;</code>，也被称为 空片段（Empty Fragment）或 短语法（Short Syntax）。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">函数式组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>el<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套表达式" tabindex="-1"><a class="header-anchor" href="#嵌套表达式" aria-hidden="true">#</a> 嵌套表达式</h3><blockquote><p>在jsx元素中，你要嵌套表达式，必须使用{}包起来，也就是说，在jsx元素中，看到{}你要知道里面放的都是表达式。任何有值的内容都是表达式。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">学生姓名: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>student<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , 年龄: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>student<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Student</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token function">foo</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> DemoD\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可作为参数" tabindex="-1"><a class="header-anchor" href="#可作为参数" aria-hidden="true">#</a> 可作为参数</h3><blockquote><p>jsx也可以做了函数的入参，也就是在调用一个函数时，传递传递一个jsx元素，也可以做为函数的返回值，还可以用在if或for中</p></blockquote><p><img src="' + _imports_4 + '" alt="image-20231223201550463"></p><h3 id="变化的属性" tabindex="-1"><a class="header-anchor" href="#变化的属性" aria-hidden="true">#</a> 变化的属性</h3><p>jsx元素中有三个变化的属性：</p><ul><li>class 变成了 className</li><li>for 变成了 htmlFor</li><li>tabindex 变成了tabIndex</li></ul><h3 id="新增的三个属性" tabindex="-1"><a class="header-anchor" href="#新增的三个属性" aria-hidden="true">#</a> 新增的三个属性</h3><p>jsx元素中新增了三个属性：</p><ul><li>key 用于列表渲染</li><li>ref 方便DOM操作</li><li>dangerouslySetInnerHTML 用来渲染一片html字符串</li></ul><p><img src="' + _imports_5 + '" alt="image-20231223201707381"></p><p><img src="' + _imports_6 + '" alt="image-20231223202003763"></p><h3 id="唯一根标签" tabindex="-1"><a class="header-anchor" href="#唯一根标签" aria-hidden="true">#</a> 唯一根标签</h3><blockquote><p>JSX 元素在渲染时必须有一个根标签。这是因为 JSX 是一种类似 XML 的语法扩展，它要求在渲染时只能有一个顶层元素。</p><p>当你在函数式组件或类组件中返回 JSX 时，你必须将所有的 JSX 元素包裹在一个父元素中，以满足这个要求。这个父元素可以是一个标签，比如 <code>&lt;div&gt;</code> 或 <code>&lt;Fragment&gt;</code>，或者是一个空标签 <code>&lt;&gt;&lt;/&gt;</code>（空片段）。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 使用 &lt;div&gt; 包裹多个元素</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用 &lt;Fragment&gt; 包裹多个元素</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用空片段 &lt;&gt;&lt;/&gt; 包裹多个元素</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单标签写法" tabindex="-1"><a class="header-anchor" href="#单标签写法" aria-hidden="true">#</a> 单标签写法</h3><blockquote><p>在jsx元素，不仅组件可以使用单标签，任何html标签都可以使用单标签</p></blockquote><p><img src="' + _imports_7 + '" alt="image-20231223202826370"></p><p><img src="' + _imports_8 + '" alt="image-20231223202835905"></p><h3 id="行内样式" tabindex="-1"><a class="header-anchor" href="#行内样式" aria-hidden="true">#</a> 行内样式</h3><blockquote><p>在JSX中写行内样式，格式如下：</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token literal-property property">key1</span><span class="token operator">:</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">key2</span><span class="token operator">:</span><span class="token string">&#39;value2&#39;</span><span class="token punctuation">,</span><span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在JSX中，写class类名，格式如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token comment">// box是写死的</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;item1&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;item2&quot;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>a b<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_9 + '" alt="image-20231223202946764"></p><p>创建 css 文件写样式</p><p>可以创建一个独立的 CSS 文件，然后在组件中使用 <code>import</code> 导入该 CSS 文件。这样，你可以直接在 CSS 文件中编写样式规则，并通过给元素的 <code>className</code> 属性赋予对应的类名来应用样式。</p><p><strong>内联样式</strong></p><blockquote><p>可以使用内联样式的方式直接在 JSX 元素中定义样式。这可以通过给元素的 <code>style</code> 属性赋值一个包含样式属性的 JavaScript 对象来实现。属性名应该使用驼峰命名法，并且以字符串形式表示属性值。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// style 对象中的属性名对应 CSS 属性，属性值对应 CSS 属性值</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CSS-in-JS 库</strong></p><blockquote><p>一些流行的 CSS-in-JS 库， 如 styled-components、Emotion 等。这些库允许你在 JavaScript 或 TypeScript 中编写样式，并将其应用到组件中。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">&#39;styled-components&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> StyledDiv <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  color: red;\n  font-size: 16px;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledDiv</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledDiv</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件的命名" tabindex="-1"><a class="header-anchor" href="#组件的命名" aria-hidden="true">#</a> 组件的命名</h3><p>JSX中，所有React组件（由class或function定义）的名称必须以大写字母打头，如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dog</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dog</span><span class="token punctuation">&gt;</span></span> // 并不是组件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果以小写为命名的组件, 在浏览器中会报错，如下：</p><p><img src="' + _imports_10 + '" alt="image-20231223203630543"></p><h3 id="点语法" tabindex="-1"><a class="header-anchor" href="#点语法" aria-hidden="true">#</a> 点语法</h3><p>JSX语法中是支持点语法的，如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>React.Component\nReact.Fragment &lt;&gt;&lt;/&gt;\nMl.Button\nMl.Form\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_11 + '" alt="image-20231223203659184"></p><p><img src="' + _imports_12 + '" alt="image-20231223203706523"></p><p>首字母不能小写，如下：</p><p><img src="' + _imports_13 + '" alt="image-20231223203720780"></p><p>还可以解构，如下：</p><p><img src="' + _imports_14 + '" alt="image-20231223203731919"></p><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><blockquote><p>对于组件来说，props就是自定义属性，对于html标签来说，props是我们之前学习过的html标签的属性，props和vue一样，只能使用它，不要去修改它。</p></blockquote><p><img src="' + _imports_15 + '" alt="image-20231223203839719"></p><p>分析，传递了name, age, address，在子组件直接结构出name，age，address，在子组件的模板中使用name，age和address，如果名字都是一样的，可以简写，</p><p><img src="' + _imports_16 + '" alt="image-20231223203945575"></p><p><strong>可以给子传递多种数据类型</strong>，如下：</p><p><img src="' + _imports_17 + '" alt="image-20231223204036970"></p><p>子组件接收，还可以这样写，如下：</p><p><img src="' + _imports_18 + '" alt="image-20231223204231147"></p><h3 id="组件使用双标签" tabindex="-1"><a class="header-anchor" href="#组件使用双标签" aria-hidden="true">#</a> 组件使用双标签</h3><blockquote><p>在使用组件时，如果组件使用双标签，在双标签之间就可以写内容，在双标签之间写的内容是通过props.children来接收的，props.children可以是任意类型的数据，基本数据类型可以，引用数据类型也可以，也可以是函数。</p></blockquote><p><img src="' + _imports_19 + '" alt="image-20231223204309330"></p><p><img src="' + _imports_20 + '" alt="image-20231223204317225"></p><p>浏览器测试如下：</p><p><img src="' + _imports_21 + '" alt="image-20231223204327198"></p><p>可以传递一个jsx，也可以传递一个函数，函数返回一个jsx，书写这样的代码，如下：</p><p><img src="' + _imports_22 + '" alt="image-20231223204339838"></p><h3 id="jsx-直接渲染数组" tabindex="-1"><a class="header-anchor" href="#jsx-直接渲染数组" aria-hidden="true">#</a> JSX 直接渲染数组</h3><blockquote><p>在使用JSX时，如果是数组，可以直接渲染，</p></blockquote><p><img src="' + _imports_23 + '" alt="image-20231223204543491"></p><p>那在上面的数组中可以写哪些数据类型，如下：</p><p><img src="' + _imports_24 + '" alt="image-20231223204555668"></p><p>如果数组中有boolean值，有null，有und，会被直接忽略，也就是说不会生成对应的文本节点。</p><h2 id="三-状态" tabindex="-1"><a class="header-anchor" href="#三-状态" aria-hidden="true">#</a> 三, 状态</h2><hr><h3 id="_1-状态在类组件中的使用" tabindex="-1"><a class="header-anchor" href="#_1-状态在类组件中的使用" aria-hidden="true">#</a> 1, 状态在类组件中的使用</h3><p>前面我们定义的数据，都是普通变量，并不是状态，现在我们开始学习state。</p><p><strong>安装 React 调试插件</strong></p><blockquote><p>在浏览器中, 与 Vue 调试工具相同, 需要安装一个 React tools 工具插件, 用于调试 React 项目</p></blockquote><p>调试工具</p><p><img src="' + _imports_25 + '" alt="image-20231225194655559"></p><blockquote><p>直接修改状态 state , 状态是可以直接修改的, render 函数是不会重新执行</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    <span class="token comment">// 定义状态</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token operator">++</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> num <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">类组件 State</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">num+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Demo01\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_26 + '" alt="image-20231225195613559"></p><p>当我们点击 num+1 时，报错了，如下：</p><p><img src="' + _imports_27 + '" alt="image-20231225195935642"></p><p>此时，就需要显示绑定this，如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">类组件 State</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token comment">/* bind(this) 表示组件实例 */</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">num+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>直接修改状态，不推荐</strong>，因为修改状态的目的还需要让模板刷新，有个专属API，叫setState，是专门来用来修改状态的，如下 ：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 虽然++在前是OK的，但是不推荐，原因是修改了两次num，一次是直接修改，一次是间接修改。</span>\n      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是:</p><ul><li>避免直接修改状态, (只使用老状态, 不修改老状态)</li><li>新状态是由老状态计算出来的, 两者有关系</li></ul><h3 id="this-setstate" tabindex="-1"><a class="header-anchor" href="#this-setstate" aria-hidden="true">#</a> this.setState</h3><blockquote><p><code>this.setState</code> 是在React组件中用于更新组件状态（state）的方法。它是React组件类的实例方法，用于告诉React更新组件的状态，并触发组件的重新渲染。</p><p>使用方法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>updater<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>this.setState是异步的，<strong>在React18中，永远是异步的</strong>，<strong>在React18之前，有可能是同步，有可能是异步</strong>，测试如下：</p><p><img src="' + _imports_28 + '" alt="image-20231225202007756"></p><p>上面的修改状态的写法，还不是很优雅，比较优雅的写法，如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">num</span><span class="token operator">:</span> state <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以简写</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 形参变量名可以使用_ _表示老状态</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span> _<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试功能正常, 实现 +1 计数器效果</p><p><strong>this.setState有两种写法</strong>：</p><ul><li>this.setState({}, callback) 在修改状态时，当新值与旧值无关时，推荐使用这种写法，callback表示当状态修改后，自动执行，当状态修完后，有一些业务逻辑放到callback中。</li><li>this.setState((state, props)=&gt;({}), callback) 当新值与旧值有关时，新值由旧值计算而来，形参state永远表示旧值，建议使用这种写法。callback表示当状态修改后，自动执行，当状态修完后，有一些业务逻辑放到callback中。</li></ul><p><strong>==注意点==</strong></p><p><code>this.setState</code> 是一个异步方法，React会对多个 <code>setState</code> 调用进行批处理，然后一次性更新组件的状态。因此，不能直接依赖于 <code>this.state</code> 获取最新的状态值。如果需要在更新状态后执行相关操作，应该使用回调函数或在 <code>componentDidUpdate</code> 生命周期方法中进行处理。</p><h3 id="合成事件" tabindex="-1"><a class="header-anchor" href="#合成事件" aria-hidden="true">#</a> 合成事件</h3><p><em>在React中，有许多合成事件可用于处理不同的用户交互。</em></p><blockquote><p><strong>概念</strong>: 在React中，合成事件（SyntheticEvent）是React封装的浏览器原生事件的跨浏览器包装器。它提供了一种统一的方式来处理浏览器事件，无论在不同的浏览器中，事件对象的兼容性和行为都是一致的。</p><p><strong>理解</strong></p><p>在 React 中, 绑定时间以 on开头, 这种事件称为 React 中的合成事件, 类似的 onClick</p></blockquote><p><strong>举例如下:</strong></p><ol><li><code>onClick</code>：处理元素的点击事件。</li><li><code>onChange</code>：处理表单元素（如输入框、复选框、单选框等）的值变化事件。</li><li><code>onSubmit</code>：处理表单元素的提交事件。</li><li><code>onKeyDown</code>：处理键盘按键按下事件。</li><li><code>onKeyUp</code>：处理键盘按键释放事件。</li><li><code>onFocus</code>：处理元素获取焦点事件。</li><li><code>onBlur</code>：处理元素失去焦点事件。</li><li><code>onMouseOver</code>：处理鼠标指针悬停在元素上方事件。</li><li><code>onMouseOut</code>：处理鼠标指针离开元素事件。</li><li><code>onScroll</code>：处理元素滚动事件。</li><li><code>onDragStart</code>：处理拖拽操作开始事件。</li><li><code>onDragEnd</code>：处理拖拽操作结束事件。</li></ol><p>.........</p><h3 id="_2-修改状态的同步和异步问题" tabindex="-1"><a class="header-anchor" href="#_2-修改状态的同步和异步问题" aria-hidden="true">#</a> 2, 修改状态的同步和异步问题</h3><blockquote><p>在React18之前，React16和React17，this.setState在合成事件中，是异步的。在宏任务（定时器），Promise.then中是同步的。所谓的<strong>React合成事件是指on*系列事件，生命周期函数</strong>。</p></blockquote><p>在React18中，this.setState任务时候都是异步的。代码如下：</p><p><img src="' + _imports_29 + '" alt="image-20231225203329229"></p><p><img src="' + _imports_30 + '" alt="image-20231225203345962"></p><p>总结：</p><ul><li>在React18之前，setState写在宏任务中，或Promise.then中，它是同步的。</li><li>在React18之前，setSteate写在合成事件中，是异步的。</li><li><strong>在React18中，不管setState写在哪里，永远都是异步的。</strong></li></ul><p>在V18中，setState一定是异步的，如下：</p><p><img src="' + _imports_31 + '" alt="image-20231225203509596"></p><p>如果放在定时器，如下：</p><p><img src="' + _imports_32 + '" alt="image-20231225203602987"></p><p>要想看一下修改后状态的结果，如下：</p><p><img src="' + _imports_33 + '" alt="image-20231225203732776"></p><p>看一下如下代码，分析结果，如下：</p><p><img src="' + _imports_34 + '" alt="image-20231225203742847"></p><p><strong>为什么是V18版本中，把this.setState设计成异步的？</strong></p><p>答：为了性能优化。在V18中，无论this.setState在哪里，都是异步的，这种特性，叫”<strong>并发模式</strong>“</p><p>this.setState会自动合并，如下：</p><p><img src="' + _imports_35 + '" alt="image-20231225203847079"></p><blockquote><p>为了减少没有必要的 Diff 运算, 称为协调运算</p></blockquote><p>看如下代码：</p><p><img src="' + _imports_36 + '" alt="image-20231225205322305"></p><blockquote><p>当我们点击更新按钮, render 方法只会执行一次</p></blockquote><h3 id="_3-识事件绑定" tabindex="-1"><a class="header-anchor" href="#_3-识事件绑定" aria-hidden="true">#</a> 3, 识事件绑定</h3><p>看如下事件绑定：</p><p><img src="' + _imports_37 + '" alt="image-20231225205647317"></p><p>上面的写法，不完美，因为在监听器中不能获取到this。this是undefined。解决办法有两种：</p><ul><li><strong>利用ES5中的bind中手动绑定this</strong></li><li><strong>利用ES6中的箭头函数自动绑定this</strong></li></ul><p>ES5绑定代码如下：</p><p><img src="' + _imports_38 + '" alt="image-20231225213315720"></p><p>浏览器测试如下：</p><p><img src="' + _imports_39 + '" alt="image-20231225213326110"></p><p>使用ES6中的箭头函数自动绑定this，代码如下</p><p><img src="' + _imports_40 + '" alt="image-20231225213337221"></p><p><img src="' + _imports_41 + '" alt="image-20231225213358578"></p><p>想获取事件对象，如下：</p><p><img src="' + _imports_42 + '" alt="image-20231225213412745"></p><h3 id="_4-状态在函数组件中的使用" tabindex="-1"><a class="header-anchor" href="#_4-状态在函数组件中的使用" aria-hidden="true">#</a> 4, 状态在函数组件中的使用</h3><p>函数组件中是不能定义状态，但是配合hook可以定义状态，<strong>hook类似于vue3中的组合式API (Compositon API )</strong>，在React16.8中就有了，React16.8有三四年，hook也有三四年，只不过，最近两年hook才火起来了。</p><p><img src="' + _imports_43 + '" alt="image-20231225214931020"></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> react<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">Demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 参数1表示状态, 参数2表示修改状态</span>\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">函数组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>add<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Demo02\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下面的写法，有没有问题：</p><p><img src="' + _imports_44 + '" alt="image-20231225214947578"></p><p>setNum是同步还是异步，如下：</p><p><img src="' + _imports_45 + '" alt="image-20231225214957018"></p><p>setNum是同步还是异步，在不同的版本中是不一样的，总结如下：</p><ul><li><strong>在V18之前，在合成事件中是异步的，在宏任务和promise.then中是同步的。</strong></li><li><strong>在V18中，无论在哪里都是异步的。</strong></li></ul><p>setNum中，是没有callback。setNum还有一种写法，如下：</p><p><img src="' + _imports_46 + '" alt="image-20231225215038177"></p><blockquote><p>直接使用 _ 表示旧值</p></blockquote><h2 id="四-条件渲染" tabindex="-1"><a class="header-anchor" href="#四-条件渲染" aria-hidden="true">#</a> 四, 条件渲染</h2><h3 id="_1-类组件中实现条件渲染" tabindex="-1"><a class="header-anchor" href="#_1-类组件中实现条件渲染" aria-hidden="true">#</a> 1, 类组件中实现条件渲染</h3><p>条件渲染，在vue中实现方案：</p><ul><li>v-if</li><li>v-if v-else</li><li>v-if v-else-if v-else</li><li>v-show</li><li>动态组件</li></ul><p>在React中，没有指令，使用原生JS来实现。先学习一下单一元素的条件渲染。就是一个元素要么渲染，要么不渲染，通过一个状态来控制，语法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>\n    flag <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span> jsx <span class="token operator">/</span> <span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码示例</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> flag <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">类组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n              <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token operator">!</span>_<span class="token punctuation">.</span>flag\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          显示/隐藏\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token comment">/* 通过条件 flag 控制渲染 */</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>flag <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是条件渲染控制的..</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Demo01\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jsx元素中标签比较多，如下：</p><p><img src="' + _imports_47 + '" alt="image-20231225220751212"></p><p>如果是两个元素，实现条件渲染，类似于vue中的v-if和v-else，代码如下：</p><p><img src="' + _imports_48 + '" alt="image-20231225220818728"></p><blockquote><p>这种三元表达式的写法, 直接嵌套在 jsx 语法中</p></blockquote><p>如果是多个元素的条件渲染，建议封装成一个自定义的渲染函数，如下：</p><p><img src="' + _imports_49 + '" alt="image-20231225220901361"></p><p>在vue中有一个v-show，是通过display控制显示与隐藏的，使用react实现之，如下：</p><p><img src="' + _imports_50 + '" alt="image-20231225220953437"></p><h3 id="_2-函数组件中实现条件渲染" tabindex="-1"><a class="header-anchor" href="#_2-函数组件中实现条件渲染" aria-hidden="true">#</a> 2, 函数组件中实现条件渲染</h3><p>在函数组件中， 我们就玩一下多元素的条件渲染，如下：</p><p><img src="' + _imports_51 + '" alt="image-20231225221059738"></p><h2 id="五-表单绑定-列表渲染" tabindex="-1"><a class="header-anchor" href="#五-表单绑定-列表渲染" aria-hidden="true">#</a> 五, 表单绑定, 列表渲染</h2><p>关于表单绑定和列表渲染，我们集成到todolist中讲解。</p><h3 id="_1-类组件实现todolist" tabindex="-1"><a class="header-anchor" href="#_1-类组件实现todolist" aria-hidden="true">#</a> 1, 类组件实现todolist</h3><p>把表单变成受控表单，收集表单中的数据，如下：</p><p><img src="' + _imports_52 + '" alt="image-20231225221309279"></p><p>此时，我们就可以收集表单的数据，如下：</p><p><img src="' + _imports_53 + '" alt="image-20231225221446539"></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 获取表单数据</span>\n  <span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">todo</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n      <span class="token string">&#39;🚀 ~ file: TodoList.jsx:14 ~ TodoList ~ todo =&gt;&#39;</span><span class="token punctuation">,</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todo\n    <span class="token punctuation">)</span>\n    <span class="token comment">// 在React中，setState 是一个异步操作，因此在调用 this.setState({ todo: e.target.value }) 后，console.log 语句的执行并不会立即更新 this.state.todo 的值。而是在稍后的某个时间点进行更新。</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token comment">/* 输入框中的数据, 需要靠状态来控制, 这样的输入框称为受控表单, 默认不受控 */</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>\n          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span>\n          <span class="token comment">// v-model:  :value + @input (在Vue中)</span>\n          <span class="token attr-name">onInput</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">todo列表</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在我使用 onInput 合成事件时, 会发现我在输入输入的数据最后在控制台输出会慢一步, 举例, 我输入 123, 最后输出的是 12</p><p>那么, 这个时候又回到了以上的问题, setState 是一个异步的函数, 因此调用这个方法结束后, 并不会立即更新, 而是在稍后的某个时间点更新</p></blockquote><p>所以, 根据 React 的建议, 换成onChange，如下：</p><blockquote><p><strong>为什么使用 onChange 呢?</strong> (核心就在于性能问题)</p><p>在React中，<code>onChange</code> 事件和<code>onInput</code> 事件都可以用于处理输入框的值变化。然而，它们在触发时机和行为上有一些差异，因此根据具体的使用场景可以选择适合的事件。</p><p><code>onChange</code> 事件在输入框的值发生变化并失去焦点时触发。它适用于大多数情况，特别是在处理表单输入时。例如，在用户输入完全一个单词或句子后，再触发相应的处理逻辑。<strong><code>onChange</code> 事件的触发时机较为稳定，可以保证在用户完成输入后进行处理。</strong></p><p><code>onInput</code> 事件在输入框的值发生任何变化时都会触发，包括每次按键输入、复制粘贴和剪切等操作。它适用于需要实时响应用户输入的场景，比如实时搜索和实时字符计数等。然而，<strong>由于触发频率较高，使用<code>onInput</code> 事件可能会导致性能问题，因为每次输入都会触发回调函数。</strong></p><p>你只需要在用户完成输入后处理输入框的值，使用<code>onChange</code> 事件更为合适，它能够提供更好的用户体验和性能表现。而如果你需要实时响应用户的输入，并且性能要求较高，可以考虑使用<code>onInput</code> 事件，但需要注意性能问题。</p></blockquote><p><img src="' + _imports_54 + '" alt="image-20231225223142896"></p><p>当点击添加按钮，就需要把收集到的todo存起来，如下：</p><h3 id="添加功能" tabindex="-1"><a class="header-anchor" href="#添加功能" aria-hidden="true">#</a> 添加功能</h3><p><strong>以下为完整实现基本的 TodoList 的代码</strong></p><p><img src="' + _imports_55 + '" alt="image-20231226193941778"></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 获取表单数据</span>\n  <span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">todo</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;🚀 todo =&gt;&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todo<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 点击添加表单数据</span>\n  <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log(this.state.todo)</span>\n    <span class="token comment">// 不能使用push, 会改变旧值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todo<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;不能为空&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">task</span><span class="token operator">:</span> state<span class="token punctuation">.</span>todo <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token comment">// 清空todo内容</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 按下回车</span>\n  <span class="token function">EnterUp</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> todo<span class="token punctuation">,</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token comment">/* 输入框中的数据, 需要靠状态来控制, 这样的输入框称为受控表单, 默认不受控 */</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>\n          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span>\n          <span class="token comment">// 相似于Vue指令中的v-model:  :value + @input (在Vue中)</span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">onKeyUp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">EnterUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span><span class="token comment">/* 在vue中通过v-for，在react中，渲染数据，99%都通过map方法 */</span><span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-- </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>task<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是,</p><ol><li>在 React 中, 不能使用 push 这个方法来直接操作数组, 而是要通过 map 的方法实现返回一个新的数组, 实现对状态的更新</li><li>对于监听回车按下事件, 执行监听当前事件的回调参数, 判断是否按下的键是回车按键相应的代码</li></ol><h3 id="删除功能" tabindex="-1"><a class="header-anchor" href="#删除功能" aria-hidden="true">#</a> 删除功能</h3><p><img src="' + _imports_56 + '" alt="image-20231226195037692"></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 获取表单数据</span>\n  <span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">todo</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;🚀 todo =&gt;&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todo<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 点击添加表单数据</span>\n  <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log(this.state.todo)</span>\n    <span class="token comment">// 不能使用push, 会改变旧值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todo<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;不能为空&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">task</span><span class="token operator">:</span> state<span class="token punctuation">.</span>todo <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token comment">// 清空todo内容</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 按下回车</span>\n  <span class="token function">enterUp</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 删除todo</span>\n  <span class="token function">delList</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 删除==过滤出不等于当前id的数据</span>\n      <span class="token literal-property property">list</span><span class="token operator">:</span> state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> todo<span class="token punctuation">,</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token comment">/* 输入框中的数据, 需要靠状态来控制, 这样的输入框称为受控表单, 默认不受控 */</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>\n          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span>\n          <span class="token comment">// 相似于Vue指令中的v-model:  :value + @input (在Vue中)</span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">onKeyUp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enterUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span><span class="token comment">/* 在vue中通过v-for，在react中，渲染数据，99%都通过map方法 */</span><span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-- </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>task<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token punctuation">{</span><span class="token comment">/* 删除功能 */</span><span class="token punctuation">}</span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delList</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n                删除\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>受控表单：一个表单的value或checked由state来决定，通过控制state就可以修改表单数据，这样的表单叫受控表单。</li><li>受控组件：一个组件的自定义属性由状态来控制，只有这个状态发生变化，组件才能更新。后面讲。</li><li>列表渲染：在React中，通过map方法实现。因为map方法，可以对数据进行加工，返回新的数据（jsx）;</li></ul><h3 id="_2-函数式组件实现-todolist" tabindex="-1"><a class="header-anchor" href="#_2-函数式组件实现-todolist" aria-hidden="true">#</a> 2, 函数式组件实现 todolist</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">DemoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建state</span>\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>todo<span class="token punctuation">,</span> setTodo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token comment">// 添加todo</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">confirm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>todo<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;no null&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setList</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">task</span><span class="token operator">:</span> todo <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token function">setTodo</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 删除</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">delTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ele<span class="token punctuation">.</span>id <span class="token operator">!=</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// enter</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">addByEnter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span><span class="token comment">/* 输入框 */</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>\n          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTodo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">onKeyUp</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">addByEnter</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>confirm<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span><span class="token comment">/* 新增todolist */</span><span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">--</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>task<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">delTodo</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">X</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> DemoA\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jsx元素本质是一个对象，是React.createElement调用的返回值，这个返回值是一个对象，JSX对象可以叫做”fiber单元&quot;，很多很多的嵌套的”fiber单元&quot;就会构成”fiber树&quot;。</p><h2 id="六-类组件的生命周期" tabindex="-1"><a class="header-anchor" href="#六-类组件的生命周期" aria-hidden="true">#</a> 六, 类组件的生命周期</h2>', 271);
const _hoisted_272 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_272);
}
const React_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "React.html.vue"]]);
export {
  React_html as default
};
