import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-1c59ab53.js";
const _imports_0 = "/bowenBlog/assets/image-20230831091901893-f1b16ed7.png";
const _imports_1 = "/bowenBlog/assets/image-20230831155711089-82991b61.png";
const _imports_2 = "/bowenBlog/assets/image-20230831160720805-40fdab6a.png";
const _imports_3 = "/bowenBlog/assets/image-20230831162948474-5e3579f8.png";
const _imports_4 = "/bowenBlog/assets/image-20230901091827981-f6e3067f.png";
const _imports_5 = "/bowenBlog/assets/image-20230901160806324-fc159162.png";
const _imports_6 = "/bowenBlog/assets/image-20230901160830195-b0be495a.png";
const _imports_7 = "/bowenBlog/assets/image-20230901160905814-e2580102.png";
const _imports_8 = "/bowenBlog/assets/image-20230901160918855-93796e46.png";
const _imports_9 = "/bowenBlog/assets/image-20230901161350088-a48d4775.png";
const _imports_10 = "/bowenBlog/assets/image-20230901161707056-876596fc.png";
const _imports_11 = "/bowenBlog/assets/image-20230901161718026-b6ea6d68.png";
const _imports_12 = "/bowenBlog/assets/image-20230901102922575-8cd78cdf.png";
const _imports_13 = "/bowenBlog/assets/image-20230904092514232-d1fca97b.png";
const _imports_14 = "/bowenBlog/assets/image-20230905111752686-683ada67.png";
const _imports_15 = "/bowenBlog/assets/image-20230902211643043-38a567ce.png";
const _imports_16 = "/bowenBlog/assets/image-20230905111658090-2c83ba0f.png";
const _imports_17 = "/bowenBlog/assets/image-20230904145523209-04307913.png";
const _imports_18 = "/bowenBlog/assets/image-20230904150000634-996a0483.png";
const _imports_19 = "/bowenBlog/assets/image-20230905171241352-a174c75d.png";
const _imports_20 = "/bowenBlog/assets/image-20230905142355809-9b4fb867.png";
const _imports_21 = "/bowenBlog/assets/image-20230905171542428-16a3e561.png";
const _imports_22 = "/bowenBlog/assets/image-20230905171620942-42c1172f.png";
const _imports_23 = "/bowenBlog/assets/image-20230905171932623-f554ed95.png";
const _imports_24 = "/bowenBlog/assets/image-20230906222329612-b327aa3c.png";
const _imports_25 = "/bowenBlog/assets/image-20230906222338096-6763eb0c.png";
const _imports_26 = "/bowenBlog/assets/image-20230906222518002-d5dad593.png";
const _imports_27 = "/bowenBlog/assets/image-20230906113257295-abaa9e9c.png";
const _imports_28 = "/bowenBlog/assets/image-20230906222723456-2308388a.png";
const _imports_29 = "/bowenBlog/assets/image-20230906222955971-c5899afc.png";
const _imports_30 = "/bowenBlog/assets/image-20230906223026745-0be53cce.png";
const _imports_31 = "/bowenBlog/assets/image-20230906223037850-a1d01244.png";
const _imports_32 = "/bowenBlog/assets/image-20230907105306497-35dd2da1.png";
const _imports_33 = "/bowenBlog/assets/image-20230907105550208-f3e0b9e3.png";
const _imports_34 = "/bowenBlog/assets/image-20230911140207146-7b91c6dc.png";
const _imports_35 = "/bowenBlog/assets/image-20230911141421800-20e054db.png";
const _imports_36 = "/bowenBlog/assets/image-20230911142420348-bf334b8b.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="一-计算机组件" tabindex="-1"><a class="header-anchor" href="#一-计算机组件" aria-hidden="true">#</a> 一，计算机组件</h1><hr><h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1，基本概念</h2><p><strong>计算机组成</strong></p><p><img src="' + _imports_0 + '" alt="image-20230831091901893"></p><p><strong>操作系统</strong></p><p>mac windows linux</p><p><strong>应用软件</strong></p><p><strong>编程语言</strong></p><p>Java JavaScript Go php C C# Python C++</p><p><strong>编译器和解释器</strong></p><p>js----解释器</p><p>go---编译器</p><p>低级语言和高级语言：</p><ul><li>低级编程语言 -- 计算机可以直接识别的语言</li><li>汇编语言</li></ul><h1 id="二-javascript介绍" tabindex="-1"><a class="header-anchor" href="#二-javascript介绍" aria-hidden="true">#</a> 二，JavaScript介绍</h1><hr><h2 id="_1-js介绍" tabindex="-1"><a class="header-anchor" href="#_1-js介绍" aria-hidden="true">#</a> 1，JS介绍</h2><p>脚本语言</p><p><strong>JS作用：</strong></p><ul><li>web开发</li><li>服务端开发 nodeJS</li><li>桌面程序</li><li>App</li><li>控制硬件</li><li>游戏</li></ul><p>JS组成：</p><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><p>ECMAScript版本：</p><p>2015-es6</p><h2 id="_2-书写js的三种方式" tabindex="-1"><a class="header-anchor" href="#_2-书写js的三种方式" aria-hidden="true">#</a> 2，书写JS的三种方式</h2><ol><li>行内写法，目前不推荐</li><li>内部写法</li><li>外联写法</li></ol><p>总结<strong>行内写法</strong>的特点：</p><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>特殊情况下使用</li></ul><p>总结<strong>内部写法</strong>的特点：</p><ul><li>可以把多行JS代码写在script标签中</li><li>学习时，为了方便，直接把JS代码写在scirpt标签</li><li>推荐将JavaScript代码和编写位置放在body子元素的最后一行；</li></ul><p>最后一种写法，是外部写法，需要单独创建一个JS文件，通过script标签引入这个文件，如下：</p><p>总结<strong>外部写法</strong>的特点：</p><ul><li>需要通过script元素的src属性来引入JavaScript文件</li><li>在写项目时，通常都会使用外部写法，把JS代码放在一个单独的文件中，在页面中引入。</li><li>使用外部写法，script标签中就不能写其它代码了，写了也白了</li><li>script标签不能写成单标签</li><li>推荐将JavaScript代码和编写位置放在body子元素的最后一行</li></ul><h2 id="_3-js的输出与输入" tabindex="-1"><a class="header-anchor" href="#_3-js的输出与输入" aria-hidden="true">#</a> 3，JS的输出与输入</h2><p><img src="' + _imports_1 + '" alt="image-20230831155711089"></p><h1 id="三-数类型" tabindex="-1"><a class="header-anchor" href="#三-数类型" aria-hidden="true">#</a> 三，数类型</h1><hr><p>软件运行流程：</p><ol><li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li><li>CPU执行内存中的代码</li></ol><p>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</p><h2 id="_1-number-数字" tabindex="-1"><a class="header-anchor" href="#_1-number-数字" aria-hidden="true">#</a> 1，number 数字</h2><p>是Number，包含整数和小数，例如：年龄、存款、尺寸、手机号等。数据类型是支持 加/减/乘/除/取余/指数 等操作。直接上代码：</p><h2 id="_2-string-字符串" tabindex="-1"><a class="header-anchor" href="#_2-string-字符串" aria-hidden="true">#</a> 2，string 字符串</h2><p>字符串，其实就是我们生活中的文本信息。例如：姓名、地址、自我介绍等。 字符串有一个特点，他必须由引号引</p><p>可以使用单引号，也可以使用双引号</p><h2 id="_3-bool-布尔" tabindex="-1"><a class="header-anchor" href="#_3-bool-布尔" aria-hidden="true">#</a> 3，bool 布尔</h2><p>布尔类型就两个值：true和false。 布尔类型对应的值只有两个，一个是ture，一个是false，</p><p><strong>配置代码片段，可以快捷生成代码</strong></p><h2 id="_4-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_4-数据类型转换" aria-hidden="true">#</a> 4，数据类型转换</h2><p>把一种数据类型转化成另一个数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 转换为数字类型</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 转换为字符串</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type of</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><h2 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符" aria-hidden="true">#</a> 一元运算符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span> \n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span> \n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span>\n\n<span class="token keyword">let</span> num <span class="token operator">=</span> a<span class="token operator">++</span>  <span class="token operator">+</span> <span class="token operator">++</span>b <span class="token operator">+</span> c<span class="token operator">++</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n\n<span class="token comment">// 7</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算优先级" tabindex="-1"><a class="header-anchor" href="#运算优先级" aria-hidden="true">#</a> 运算优先级</h2><p>优先级从高到低：</p><ol><li>（）优先级最高</li><li>一元运算符：++ -- ！</li><li>算术运算符 先* / % 后 + -</li><li>关系运算符号 &gt; &gt;= &lt; &lt;=</li><li>相等运算符 == != === !==</li><li>逻辑运算符 先&amp;&amp; 后 ||</li><li>赋值运算符</li></ol><h1 id="四-变量" tabindex="-1"><a class="header-anchor" href="#四-变量" aria-hidden="true">#</a> 四，变量</h1><hr><h2 id="_1-什么是变量" tabindex="-1"><a class="header-anchor" href="#_1-什么是变量" aria-hidden="true">#</a> 1，什么是变量</h2><p>学习一门编程语言，编程语言主要是用于开发软件的，在一个软件中有很多数据都是动态变化的，如：</p><ol><li>比如购物车商品的数量、价格的计算等等；</li><li>比如一首歌曲播放的时间、进度条、歌词的展示等等；</li><li>比如微信聊天中消息条数、时间、语音的长度、头像、名称等等；</li><li>比如游戏中技能的冷却时间、血量、蓝量、buff时间、金币的数量等等；</li></ol><p>可以使用变量来表示一个可以变化的数据，变量，其实就是我们生活中起别名和外号，让变量名指向某个值。变量的声明和变量的赋值，如下：</p><h2 id="_2-变量的命名规范" tabindex="-1"><a class="header-anchor" href="#_2-变量的命名规范" aria-hidden="true">#</a> 2，变量的命名规范</h2><ol><li>字母 、下划线、$、数字不能在首位</li></ol><p><img src="' + _imports_2 + '" alt="image-20230831160720805"></p><p>变量建议：</p><ol><li>多个单词使用驼峰命名</li><li>赋值= 两边加上一个空格</li><li>一条语句结束后加上分号；也可以不加</li><li>变量应该做到见名知意</li></ol><ul><li>https://developer.mozilla.org/zh-CN/docs/web/javascript/reference/lexical_grammar</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> father_Name <span class="token operator">=</span> <span class="token string">&#39;admin&#39;</span> <span class="token comment">// 小驼峰命名</span>\n\n<span class="token keyword">let</span> fatherName <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span> \n\n<span class="token comment">// 大驼峰命名</span>\n<span class="token keyword">let</span> FatherName <span class="token operator">=</span> <span class="token string">&#39;li si&#39;</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-变量与内存指向关系" tabindex="-1"><a class="header-anchor" href="#_3-变量与内存指向关系" aria-hidden="true">#</a> 3，变量与内存指向关系</h2><p><img src="' + _imports_3 + '" alt="image-20230831162948474"></p><p>在计算机的内存中创建一块区域保存字符串”malu&quot;，name变量名则指向这块区域。然后又再内存中创建了一块域保存字符串”wangcai&quot;，name变量名则指向”wangcai“所对应的空间，不再指向&quot;malu&quot;所对应的空间。&quot;malu&quot;所对应的内存空间，无人指向的数据会被标记为垃圾，由解释器自动化回收。</p><ul><li>无人指向的数据会被自动标记为垃圾，会被解释器标记为垃圾自动清除。</li></ul><p>在计算机的内存中创建一块区域保存字符串”malu&quot;，name变量名则指向这块区域。new_name变量名指向name变量，因为被指向的是变量名，所以自动会转指向到name变量代表的内存区域。</p><h1 id="五-深入数据类型" tabindex="-1"><a class="header-anchor" href="#五-深入数据类型" aria-hidden="true">#</a> 五，深入数据类型</h1><hr><h2 id="_1-数据类型介绍" tabindex="-1"><a class="header-anchor" href="#_1-数据类型介绍" aria-hidden="true">#</a> 1，数据类型介绍</h2><p>js中有八种数据类型：</p><ol><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li><li>object</li><li>bigInt</li><li>symbol</li></ol><p><strong>简单数据类型</strong>：</p><ol><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li></ol><h3 id="隐式转换与强制类型转换" tabindex="-1"><a class="header-anchor" href="#隐式转换与强制类型转换" aria-hidden="true">#</a> 隐式转换与强制类型转换</h3><p><img src="' + _imports_4 + '" alt="image-20230901091827981"></p><p>infinity 代表数学中的 无穷大 -infinity 代表负的无穷大</p><p><strong>进制转换</strong></p><h2 id="_2-number数据类型" tabindex="-1"><a class="header-anchor" href="#_2-number数据类型" aria-hidden="true">#</a> 2，Number数据类型</h2><p>number可以表示整数，也可以表示小数，如下：<img src="' + _imports_5 + '" alt="image-20230901160806324"></p><p>数字number可以有很多操作，比如，乘法 、除法 /、加法 +、减法 - 等，如下：</p><p><img src="' + _imports_6 + '" alt="image-20230901160830195"></p><p><strong>转义字符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n\\n  表示换行\n\n\\t  表示制表\n\n\\r  表示换行回车\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>number也有不同进制的表示法：</p><p><img src="' + _imports_7 + '" alt="image-20230901160905814"></p><p>数据的表示范围</p><p><img src="' + _imports_8 + '" alt="image-20230901160918855"></p><p>isNaN，用于判断是否是一个NaN，是NaN结果是true，否则结果是false，如下：</p><p><img src="' + _imports_9 + '" alt="image-20230901161350088"></p><h2 id="_3-string数据类型" tabindex="-1"><a class="header-anchor" href="#_3-string数据类型" aria-hidden="true">#</a> 3，String数据类型</h2><p>一个项目中，字符串类型用的是最多的，如 人的姓名：“wangcai”。地址：“北京市”。简介：“一名前端程序员”；</p><p><strong>JavaScript 中的字符串必须被括在引号里，有三种包含字符串的方式:</strong></p><ul><li>双引号 “malu”</li><li>单引号 ’malu‘</li><li>反引号 ``</li></ul><h2 id="_4-boolean-布尔类型" tabindex="-1"><a class="header-anchor" href="#_4-boolean-布尔类型" aria-hidden="true">#</a> 4，boolean 布尔类型</h2><p>Boolean类型就是表示真假，如是否毕业. 是否有身份证. 是否购买车票. 是否成年人；取值就两个：一个是true，一个是false。如下：</p><p>== 等于号，也是运算符</p><p>运算符两侧的操作类型不一样，会发生隐式转换</p><blockquote><p>关系运算符，得到的结果都是布尔类型</p></blockquote><h2 id="_5-undefined-类型" tabindex="-1"><a class="header-anchor" href="#_5-undefined-类型" aria-hidden="true">#</a> 5，undefined 类型</h2><p>undefined 类型只有一个值，就是特殊值 undefined:</p><ul><li>如果我们声明一个变量，但是没有对其进行初始化时，它默认就是undefined；</li></ul><h2 id="_6-object-数据类型" tabindex="-1"><a class="header-anchor" href="#_6-object-数据类型" aria-hidden="true">#</a> 6，Object 数据类型</h2><p>object数据类型是复杂类型，前面讲的都是基本数据类型，往往可以表示一组数据，是其他数据的一个集合。代码演示：</p><p><img src="' + _imports_10 + '" alt="image-20230901161707056"></p><h2 id="_7-null-数据类型" tabindex="-1"><a class="header-anchor" href="#_7-null-数据类型" aria-hidden="true">#</a> 7，null 数据类型</h2><p>它的值只有一个，就是null，它通常表示一个对象为空。</p><p><img src="' + _imports_11 + '" alt="image-20230901161718026"></p><h2 id="_8-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_8-数据类型转换" aria-hidden="true">#</a> 8，数据类型转换</h2><p>把一种数据类型转化成另一种数据类型，分两类：</p><ul><li>强制数据类型转化，需要写代码进行转化</li><li>隐式数据类型转化</li></ul><h2 id="_9-其它类型转string" tabindex="-1"><a class="header-anchor" href="#_9-其它类型转string" aria-hidden="true">#</a> 9，其它类型转String</h2><p>其它类型转string</p><ul><li>把number转成string</li><li>把boolean转成string</li><li>把und转成string</li></ul><p><img src="' + _imports_12 + '" alt="image-20230901102922575"></p><p>toString 方法</p><p>方式二：</p><p>String() 构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：+把其它类型转成字符串，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// typeof 也是运算符</span>\n<span class="token comment">// 只要是多个运算符，都要考虑运算符的优先级</span>\n<span class="token comment">// typeof 的优先级是高于+</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span> <span class="token operator">+</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>强制类型转化：toString 或 String构造器</li><li>隐式类型转化：+</li></ul><p><strong>parseInt 会过滤掉小数</strong></p><p>parseInt会尽可能地去转化，从前往后面，只要能转就转，如果遇到了一个非数字，就停止转换。</p><h2 id="_10-其它类型转number" tabindex="-1"><a class="header-anchor" href="#_10-其它类型转number" aria-hidden="true">#</a> 10，其它类型转Number</h2><p>A）把字符串转化成number</p><p>把字符串转成number</p><ul><li>如果字符串中都是数值，就可以正常转化，如：&quot;123&quot; =&gt; 123</li><li>如果是一个空串，空串是&quot;&quot;，转化后， &quot;&quot; =&gt; 0</li><li>如果字符串中不只有数字，转化后是NaN 如：&quot;hello123&quot; =&gt; NaN</li></ul><p>利用Number构造器转化，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用+或-进行转化，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// + - 底层   还是去调用Number构造器</span>\n\n<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>\n<span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token operator">+</span> str1 \nconsole<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span>num1<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num1<span class="token punctuation">)</span>\n\n\n<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>\n<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token operator">-</span> str2\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num2<span class="token punctuation">)</span>\n\n\n<span class="token comment">// &quot;&quot;叫空串</span>\n<span class="token comment">// &quot;    &quot;不叫空串， 字符串中是空格</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-其它类型转boolean" tabindex="-1"><a class="header-anchor" href="#_11-其它类型转boolean" aria-hidden="true">#</a> 11，其它类型转boolean</h2><ol><li>把string类型转成boolean</li><li>把number类型转成boolean</li><li>把und类型转成boolean</li><li>把null类型转成boolean</li></ol><p>总结：哪些数据转成布尔类型会变成false</p><p>答：空串，0，-0，NaN，und，null 会转化成false，其它的都会转化成true 这个结论非常重要</p><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h2><h1 id="六-条件语句" tabindex="-1"><a class="header-anchor" href="#六-条件语句" aria-hidden="true">#</a> 六，条件语句</h1><hr><p><strong>在日常生活中，也有三大流程，有：顺序流程，选择流程，循环流程。日常生活中是任何事件，都可以使用上面的三大流程解释。在计算机中，对应了三大结构，顺序结构，分支结构，循环结构。</strong></p><p>要实现所谓选择结构，有三种实现方案：</p><ul><li>if / if else / if elseif else</li><li>三元运算符</li><li>switch语句</li></ul><p>先看最简单的if语句，满足条件就执行某些代码，不满足就不执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 括号内的条件为true时，进入大括号里执行代码</span>\n<span class="token comment">// 小括号内的结果若不是布尔类型时，会发生隐式转换转为布尔类型</span>\n<span class="token comment">// 数字 0、空字符串 “”、null、undefined 和 NaN 都会被转换成 false</span>\n<span class="token comment">// 其他值被转换为 true</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    满足条件要执行的代码\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-基本条件语句" tabindex="-1"><a class="header-anchor" href="#_1-基本条件语句" aria-hidden="true">#</a> 1，基本条件语句</h2><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a></h2><p>选择结构：</p><ul><li>if if/else if elseif else</li><li>三元运算符</li><li>switch语句</li></ul><h2 id="_2-多条件语句" tabindex="-1"><a class="header-anchor" href="#_2-多条件语句" aria-hidden="true">#</a> 2，多条件语句</h2><p>if elseif</p><h2 id="_3-条件嵌套" tabindex="-1"><a class="header-anchor" href="#_3-条件嵌套" aria-hidden="true">#</a> 3，条件嵌套</h2><p>if elseif elseif elseif</p><h2 id="_4-三元表达式" tabindex="-1"><a class="header-anchor" href="#_4-三元表达式" aria-hidden="true">#</a> 4，三元表达式</h2><p>又叫三元运算符，必须有三个操作数参与的运算</p><p>操作符号：？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">true</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三元表达是也具有选择效果，用if模拟 三元表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span> \n<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给变量赋值，根据条件二选一，使用三元表达式更简单</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span>\n    <span class="token comment">// 三元表达式  a为真，即输入 o</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七-while循环语句" tabindex="-1"><a class="header-anchor" href="#七-while循环语句" aria-hidden="true">#</a> 七，while循环语句</h1><hr><h2 id="_1-基本循环语句" tabindex="-1"><a class="header-anchor" href="#_1-基本循环语句" aria-hidden="true">#</a> 1，基本循环语句</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.判定条件</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    循环体\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>死循环</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> \n<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 没有改变循环变量，所以一直陷入循环中。</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算0-99的和</p><p><img src="' + _imports_13 + '" alt="image-20230904092514232"></p><h2 id="案例练习" tabindex="-1"><a class="header-anchor" href="#案例练习" aria-hidden="true">#</a> 案例练习</h2><p>练习作业：</p><ul><li>请实现一个用户登录系统，如果密码错误则反复提示让用户重新输入，直到输入正确才停止。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token comment">/* 请实现一个用户登录系统，如果密码错误则反复提示让用户重新输入，直到输入正确才停止。 */</span>\n    <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入用户名:&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">let</span> pwd <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入密码:&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 隐式转换</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token string">&#39;admin&#39;</span> <span class="token operator">&amp;&amp;</span> pwd <span class="token operator">==</span> <span class="token number">123456</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 条件判断</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功！&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;密码错误，请重新输入！&#39;</span><span class="token punctuation">)</span>\n        <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 递归</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用函数</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>猜数字，设定一个理想数字比如：66，一直提示让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了; 只有输入等于66，显示猜测结果正确，然后退出循环。</li></ul><h2 id="_2-break-和-continue" tabindex="-1"><a class="header-anchor" href="#_2-break-和-continue" aria-hidden="true">#</a> 2，break 和 continue</h2><p>break结束当前循环</p><p>continue结束本次循环，继续下次循环</p><p>例题：操场上跑圈，一圈500米，跑到第4圈的时候，不舒服，不跑了，回宿舍了，问一次跑了多米。如下：</p><p><img src="' + _imports_14 + '" alt="image-20230905111752686"></p><h2 id="_3-条件嵌套-1" tabindex="-1"><a class="header-anchor" href="#_3-条件嵌套-1" aria-hidden="true">#</a> 3，条件嵌套</h2><p><img src="' + _imports_15 + '" alt="image-20230902211643043"></p><h1 id="八-do-while-循环语句" tabindex="-1"><a class="header-anchor" href="#八-do-while-循环语句" aria-hidden="true">#</a> 八，do while 循环语句</h1><hr><h2 id="_1-do-while-循环语句介绍" tabindex="-1"><a class="header-anchor" href="#_1-do-while-循环语句介绍" aria-hidden="true">#</a> 1，do while 循环语句介绍</h2><p>do while 直接进行一次循环体，如果条件成立，继续执行循环体，</p><p>如果不成立，就不会执行循环体。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1，执行循环体  2，判断条件  3，条件成立---执行循环 ，不成立---结束循环</span>\n<span class="token keyword">do</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法：</p><p><img src="' + _imports_16 + '" alt="image-20230905111658090"></p><p>特点：</p><ol><li>绝大部分情况下 dowhile 和while是可以进行互转的</li><li>dowhile循环的循环体至少执行一次，while的循环体可能一次都不执行</li><li>在真实开发中，基本上不用dowhile 很少用while 更多的用的是for循环</li></ol><h1 id="九-for循环" tabindex="-1"><a class="header-anchor" href="#九-for循环" aria-hidden="true">#</a> 九，for循环</h1><hr><h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1，介绍</h2><p>for循环之前，先补充一个运算符，叫++或--</p><p>什么是整体的值：</p><p><img src="' + _imports_17 + '" alt="image-20230904145523209"></p><p><img src="' + _imports_18 + '" alt="image-20230904150000634"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// +1 操作</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-for循环嵌套" tabindex="-1"><a class="header-anchor" href="#_2-for循环嵌套" aria-hidden="true">#</a> 2，for循环嵌套</h2><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>外部声明记录循环次数的变量<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>内部声明记录循环次数的变量<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        循环体\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-练习" tabindex="-1"><a class="header-anchor" href="#_3-练习" aria-hidden="true">#</a> 3，练习</h2><ul><li>练习4：东方航空从北京飞往马尔代夫的机票原价为4000元，4到10月份为旺季，其他月份为淡季，旺季时候头等舱打9折，经济舱打7.5折；淡季头等舱打6折，经济舱打3折。输入出行的月份和选择的舱型计算出机票价格。</li><li>练习5：购物，判断是否为会员(如果是输入y，否则输入n)，然后再计算金额，普通顾客购物满100元 9折，会员购物低于2000打8折，会员购物满200元 7.5折。</li><li>练习6：迷你计算器 : 输入两个数以及运算符号得出相应的运算结果</li><li>练习7：输入三个整数，并根据对三个数的比较显示如下信息： <ul><li>如果三个数都不相等则显示0；</li><li>如果三个数中有二个数相等则显示1；</li><li>如果三个数都相等，则显示2</li></ul></li><li>练习8： 用户先输入自己的性别，比如男、女。然后输入自己的年龄。判断能否结婚。男的22以上，女的20以上。</li><li>练习9：实现用户登录系统，并且要支持连续三次输错之后直接退出，并且在每次输错误时显示剩余错误次数</li><li>练习10：猜年龄游戏 要求：允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出。</li><li>练习11：猜年龄游戏升级版 要求：允许用户最多尝试3次，每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y，就继续让其猜3次，以此往复，如果回答N，就退出程序，如何猜对了，就直接退出。</li></ul><h1 id="十-switch语句" tabindex="-1"><a class="header-anchor" href="#十-switch语句" aria-hidden="true">#</a> 十，Switch语句</h1><hr><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n<span class="token comment">// 小括号中，放表达式</span>\n<span class="token comment">// 只要有值，就是表达式</span>\n\n<span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>\n	<span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token comment">// break 不能省略</span>\n    <span class="token keyword">case</span> value <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Switch语句，可以代替，if ..else if...else if...else语句</p><p>switch后面可以跟变量，也可以跟字面量，只要是表达式就OK</p><p><img src="' + _imports_19 + '" alt="image-20230905171241352"></p><h1 id="十一-运算符" tabindex="-1"><a class="header-anchor" href="#十一-运算符" aria-hidden="true">#</a> 十一，运算符</h1><hr><h2 id="_1-什么是运算符" tabindex="-1"><a class="header-anchor" href="#_1-什么是运算符" aria-hidden="true">#</a> 1，什么是运算符</h2><p>提到运算符，我想大家首先想到的就是加、减、乘、除之类，除此之外，还有一些其它的运算符，从功能角度来分，分：</p><ul><li>算术运算符</li><li>递增和递减运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><p>从操作数的个数来分：</p><ul><li>一元运算符，也叫单目运算符</li><li>二元运算符，也叫双目运算符</li><li>三元运算符，也叫三目运算符</li></ul><h2 id="_2-算术运算符" tabindex="-1"><a class="header-anchor" href="#_2-算术运算符" aria-hidden="true">#</a> 2，算术运算符</h2><p>加减乘除，取余（求模）</p><p><img src="' + _imports_20 + '" alt="image-20230905142355809"></p><p>运算符表达式</p><ul><li>是由数字、运算符、变量等组成的式子。表达式都是有值的。 表达式最终都会有一个结果。</li></ul><p><strong>隐式转换</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	\n<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// 1</span>\n\n<span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>  <span class="token comment">// 0</span>\n\n<span class="token keyword">let</span> res3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span> <span class="token comment">// NaN     只要NaN参与运算，结果都是NaN</span>\n\n<span class="token keyword">let</span> res4 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;123&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">)</span>  <span class="token comment">// + 只要是一侧是字符， + 表示字符串平拼接</span>\n\n\n<span class="token keyword">let</span> res5 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token string">&#39;123&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">)</span>   <span class="token comment">// -122</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_3-赋值运算符" aria-hidden="true">#</a> 3，赋值运算符</h2><p>概念：将=右边的数据，存储到=左边的变量名对应的内存空间中。</p><p><img src="' + _imports_21 + '" alt="image-20230905171542428"></p><p>特点：</p><ul><li>赋值运算符有右结合性</li><li>赋值运算符的优先级别低于算术运算符的优先级别</li><li>赋值运算符的左边 不能放常量 只能放变量</li><li>分简单的赋值运算符 和 复杂的赋值运算符</li><li>复杂赋值运算符：+= -= *= /= %=</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token punctuation">,</span> b <span class="token punctuation">,</span> c \n<span class="token comment">// 把2赋值给c，c的值是2， c=2这和正统也有一个值</span>\na <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-自增自减运算符" tabindex="-1"><a class="header-anchor" href="#_4-自增自减运算符" aria-hidden="true">#</a> 4，自增自减运算符</h2><p>概念：</p><ul><li>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成。</li><li>递增和递减运算符必须和变量配合使用。</li><li>在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。</li><li>以++为例，如果++在前，整体的值是一个新值，++在后，整体的值是一个旧值。</li></ul><h2 id="_5-关系运算符" tabindex="-1"><a class="header-anchor" href="#_5-关系运算符" aria-hidden="true">#</a> 5，关系运算符</h2><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n<span class="token keyword">let</span> res9 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span>   <span class="token comment">// a会转换成对应的assic码</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res9<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_22 + '" alt="image-20230905171620942"></p><p><strong>=== 和 == 的区别：</strong></p><ul><li>普通的相等性检查 ==，不能区分出 0 和 false，或者空字符串和 false这类运算</li><li>严格相等运算符 === 在进行比较时不会做任何的类型转换</li></ul><h2 id="_6-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_6-逻辑运算符" aria-hidden="true">#</a> 6，逻辑运算符</h2><p>概念：将多个表达式，</p><p><img src="' + _imports_23 + '" alt="image-20230905171932623"></p><ul><li><p>逻辑与 &amp;&amp;</p><p>前面的值为false ，整体就为false</p></li><li><p>逻辑或 ||</p></li></ul><p>​ 只要有一个为真，整体就为真</p><p>一个值可以决定整体的值</p><ul><li>逻辑非 ！</li></ul><p>​ 取反</p><p><strong>逻辑运算符的运算规则如下：</strong></p><ul><li>逻辑与运算符（&amp;&amp;）：如果第一个操作数为假（false）值，则返回第一个操作数；否则，返回第二个操作数。</li><li>逻辑或运算符（||）：如果第一个操作数为真（true）值，则返回第一个操作数；否则，返回第二个操作数。</li><li>逻辑非运算符（!）：对操作数进行取反操作，将真值变为假值，将假值变为真值。</li></ul><p>在 JavaScript 中，逻辑运算符不仅可以用于布尔值，还可以用于其他数据类型。在进行逻辑运算时，JavaScript 会进行隐式类型转换。以下是一些常见的规则：</p><ul><li><p>对于逻辑与运算符（&amp;&amp;），如果第一个操作数为假值（如 false、0、空字符串、null、undefined），则直接返回第一个操作数；否则，返回第二个操作数。</p></li><li><p>对于逻辑或运算符（||），如果第一个操作数为真值（如 true、非零数、非空字符串、对象、数组），则直接返回第一个操作数；否则，返回第二个操作数。</p></li><li><p>逻辑非运算符（!）将操作数隐式转换为布尔值，并返回相应的取反结果。</p></li></ul><h2 id="_7-三目运算符" tabindex="-1"><a class="header-anchor" href="#_7-三目运算符" aria-hidden="true">#</a> 7，三目运算符</h2><p>概念：</p><ul><li>?: 整体叫三目运算符</li><li>表达式? 结果A: 结果B</li><li>如果表达式的结果为true 那么整体的结果就是: 前面的，如果表达式的结果为false 那么整体的结果就是: 后面的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token operator">!</span>a <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-运算符的优先级" tabindex="-1"><a class="header-anchor" href="#_8-运算符的优先级" aria-hidden="true">#</a> 8，运算符的优先级</h2><ul><li>算数优先级优先级 大于 比较运算符</li><li>算数优先级优先级 大于 比较运算符</li><li>辑运算符内部三个优先级 ! &gt; &amp;&amp; &gt; ||</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>root\n<span class="token string">&#39;&#39;</span>\n<span class="token number">1</span>\n<span class="token number">0</span>  <span class="token constant">X</span> <span class="token number">8</span>\n<span class="token number">1</span>\n\n<span class="token operator">-</span><span class="token number">1</span>\n<span class="token number">0</span> <span class="token constant">X</span>  <span class="token operator">-</span><span class="token number">1</span> \n<span class="token number">0</span> <span class="token constant">X</span>  <span class="token number">100</span>\n<span class="token number">10</span>\nadmin\n\n<span class="token string">&#39;&#39;</span>\n<span class="token number">8</span>\n<span class="token number">0</span>\n<span class="token number">88</span>\n<span class="token string">&#39;&#39;</span>\n\n<span class="token string">&#39;&#39;</span>\n<span class="token string">&#39;&#39;</span>\n<span class="token number">0</span>\n<span class="token number">3</span>\n<span class="token number">8</span>\n\n<span class="token number">0</span>  <span class="token constant">X</span>  <span class="token number">4</span>\n<span class="token boolean">false</span> <span class="token constant">X</span>  <span class="token number">4</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它优先级参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</p><h1 id="十二、数组" tabindex="-1"><a class="header-anchor" href="#十二、数组" aria-hidden="true">#</a> 十二、数组</h1><hr><h2 id="_1-数组介绍" tabindex="-1"><a class="header-anchor" href="#_1-数组介绍" aria-hidden="true">#</a> 1，数组介绍</h2><p>前面讲了多个数据类型，有字符串，数字，布尔，und，null。这些数据类型叫基本数据类型，还有复杂数据类型，复杂数据类型有数组，有函数，有对象。数据是一个容器，是一个有序的集合，它里面可以放一堆的数据。</p><p>基本数据类型：str num bool null und</p><p>复杂数据类型：array function object</p><p>数组中每一个数据，叫元素element，每个元素存在一个索引，称为下标index</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-操作数组" tabindex="-1"><a class="header-anchor" href="#_2-操作数组" aria-hidden="true">#</a> 2，操作数组</h2><p><strong>数组的遍历</strong></p><p>for循环</p><p><strong>for in</strong><img src="' + _imports_24 + '" alt="image-20230906222329612"></p><p><strong>for of</strong></p><p><img src="' + _imports_25 + '" alt="image-20230906222338096"></p><h3 id="数组和字符串之间相互转换" tabindex="-1"><a class="header-anchor" href="#数组和字符串之间相互转换" aria-hidden="true">#</a> <strong>数组和字符串之间相互转换</strong></h3><p>两个API：</p><ul><li><strong>join 数组.join(&quot;拼接符&quot;) 把数组转化成字符串</strong></li><li><strong>split 字符串.split(&quot;分隔符&quot;) 把字符串转化成数组</strong></li></ul><h3 id="数组元素的crud" tabindex="-1"><a class="header-anchor" href="#数组元素的crud" aria-hidden="true">#</a> <strong>数组元素的CRUD</strong></h3><ul><li>crerate 添加</li><li>read 读取</li><li>update 更新</li><li>delete 删除</li></ul><p>通过两个API，可以添加元素</p><ul><li>push 在数组的后面添加元素</li><li>unshift 在数组的前面添加元素</li></ul><h3 id="数组元素的删除" tabindex="-1"><a class="header-anchor" href="#数组元素的删除" aria-hidden="true">#</a> 数组元素的删除</h3><p>也是靠几个api，一个是pop，一个shift，一个是splice，</p><ul><li>pop 可以把最后的元素删除</li><li>shift 可以把数组中最前面的元素删除，返回的也是删除的元素</li><li>splice</li></ul><p><img src="' + _imports_26 + '" alt="image-20230906222518002"></p><p>splice 是一个函数，也可以称方法</p><p><code>splice</code> 是 JavaScript 数组对象的一个方法，用于修改数组，包括删除、插入和替换元素。<code>splice</code> 方法可以实现在指定位置对数组进行修改操作。</p><p><code>splice</code> 方法的语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="向下取整和向上取整" tabindex="-1"><a class="header-anchor" href="#向下取整和向上取整" aria-hidden="true">#</a> 向下取整和向上取整</h3><p>floor 向下取整</p><p>ceil 向上取整</p><p><img src="' + _imports_27 + '" alt="image-20230906113257295"></p><p>数组中包含数组，我们称为二位数组</p><p>三维数组，数组中包含数组，其中的数组还包含着数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>\n<span class="token comment">// 三维数组</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">//  删除数组元素</span>\n\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">	</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span>  	<span class="token comment">//   插值 模板字符串</span>\n\n\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;011111000&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// 拿到字符串首部为 &#39;0&#39;</span>\n\n\n<span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 从前往后插入数组的元素</span>\n\n\n<span class="token comment">// for of  的嵌套循环 </span>\n\n\nstr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 字符串转换为数组</span>\n\n\n\n<span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 数组排序，元素的值从小到大</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十三-字符串" tabindex="-1"><a class="header-anchor" href="#十三-字符串" aria-hidden="true">#</a> 十三，字符串</h1><hr><h2 id="_1-创建字符串" tabindex="-1"><a class="header-anchor" href="#_1-创建字符串" aria-hidden="true">#</a> 1，创建字符串</h2><p>创建方式：</p><ul><li>可以通过字面量的形式来创建一个字符串</li><li>可以通过new String()来创建一个字符串</li></ul><h2 id="_2-访问某个字符的方法" tabindex="-1"><a class="header-anchor" href="#_2-访问某个字符的方法" aria-hidden="true">#</a> 2， 访问某个字符的方法</h2><p>访问某个字符的方式：</p><ul><li>通过字符串的索引 str[0]</li><li>通过str.charAt(pos)方法</li><li>它们的区别是索引的方式没有找到会返回undefined，而charAt没有找到会返回空字符串；</li></ul><p><img src="' + _imports_28 + '" alt="image-20230906222723456"></p><h2 id="_3-字符串的遍历" tabindex="-1"><a class="header-anchor" href="#_3-字符串的遍历" aria-hidden="true">#</a> 3，字符串的遍历</h2><p>遍历：</p><ul><li>普通for循环遍历</li><li>for..of遍历</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span>  <span class="token string">&#39;hello&#39;</span>\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-字符串相关api" tabindex="-1"><a class="header-anchor" href="#_4-字符串相关api" aria-hidden="true">#</a> 4，字符串相关API</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n\n<span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 替换第一个字符串</span>\n<span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 替换所有相同的字符串 </span>\n\n\n<span class="token function">startsWith</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 判断以某些字符开头</span>\n<span class="token function">endWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 判断以某些字符结尾 </span>\n\n\n\n<span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//去除空格</span>\n<span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 去掉末尾空格</span>\n<span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 去掉开头空格</span>\n\n\n<span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 转换为大写</span>\n<span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 转换为小写</span>\n\n<span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入4位验证码&#39;</span><span class="token punctuation">)</span>\ncode <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ncode <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n\n<span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 字符串切割 成数组</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串替换</strong></p><p><strong><img src="' + _imports_29 + '" alt="image-20230906222955971"></strong></p><p>![image-20230906222952220](JS%E5%AD%A6%E4%B9%A0.assets/image-20230906222952220.png</p><p><strong>字符串切割，可以生成数组，</strong></p><p><img src="' + _imports_30 + '" alt="image-20230906223026745"></p><p>一个数组，也可以转化成字符串</p><p><img src="' + _imports_31 + '" alt="image-20230906223037850"></p><p>练习；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text  <span class="token operator">=</span><span class="token string">&#39;abc123&#39;</span>\n<span class="token comment">//     split 字符串转换为数组</span>\n    \n    \n Math<span class="token punctuation">.</span>random   <span class="token comment">//  一个人随机数取值0-1之间</span>\n    \n Math<span class="token punctuation">.</span>floor  <span class="token comment">// 数字向下取整     0.9 = 0   1.654 = 1  </span>\n    \ntoLowerCase <span class="token comment">// 字符串全部转换为小写字母</span>\n\n\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// 数组的元素 转换为字符串</span>\n    \n<span class="token comment">// unshift 	数组的元素从前往后推送</span>\n\n<span class="token comment">// for 循环遍历数组的元素</span>\n\n\n<span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token keyword">in</span> arr <span class="token punctuation">)</span>   <span class="token comment">// 遍历出数组的元素的索引值    </span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token keyword">in</span> arr <span class="token punctuation">)</span>   <span class="token comment">// 遍历出数组的每一个元素</span>\n    \n \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十四-set" tabindex="-1"><a class="header-anchor" href="#十四-set" aria-hidden="true">#</a> 十四，set</h1><hr><h2 id="_1-set介绍" tabindex="-1"><a class="header-anchor" href="#_1-set介绍" aria-hidden="true">#</a> 1，set介绍</h2><p>Set集合是一个 无序 、可变、不允许数据重复的容器。Set结构与数组类似，但是成员的值都是唯一的，没有重复值。创建Set我们需要通过Set构造函数（暂时没有字面量创建的方式）, 我们可以发现Set中存放的元素是不会重复的，那么Set有一个非常常用的功能就是给数组去重。</p><p>常用操作方法：</p><ul><li><code>add(value)</code> : 添加某个值，返回Set结构本身。</li><li><code>delete(value)</code> : 删除某个值，返回一个布尔值，表示删除是否成功</li><li><code>has(value)</code> : 返回一个布尔值，表示参数是否为Set的成员.</li><li><code>clear()</code> : 清除所有成员，没有返回值</li><li><code>遍历</code> : 另外Set是支持for of的遍历的</li></ul><p>一般什么时候使用set集合？</p><ul><li>就是想要维护一大堆不重复的数据时，就可以用它。比如：做爬虫去网上找图片的链接，为了避免链接重复，可以选择用集合去存储链接地址。</li></ul><h2 id="_2-set操作" tabindex="-1"><a class="header-anchor" href="#_2-set操作" aria-hidden="true">#</a> 2，set操作</h2><p>add方法，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// 添加元素到集合</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment">// s集合的长度大小，   </span>\n\ns<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 删除集合的元素</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false  集合中不存在了，所以值为f</span>\n\n<span class="token comment">// 清空结合的所有元素</span>\ns<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 把set 转换成 数组</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment">// 数组arr</span>\n\n\n\n<span class="token comment">// 利用set 进行数组去重的方法</span>\n\n\n\n\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十五、对象" tabindex="-1"><a class="header-anchor" href="#十五、对象" aria-hidden="true">#</a> 十五、对象</h1><hr><h2 id="_1-什么是对象" tabindex="-1"><a class="header-anchor" href="#_1-什么是对象" aria-hidden="true">#</a> 1，什么是对象</h2><p>对象也是一个容器，里面存储的是键值对，是 <strong>无序</strong>、<strong>键不重复</strong> 且 元素只能是<strong>键值对</strong>的<strong>可变的</strong> 个 <strong>容器</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;malu&#39;</span>    <span class="token comment">// name是键，类型是string </span>\n	<span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>         <span class="token comment">// 18 是值</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obg<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 同等写法  </span>\n\n\n<span class="token comment">// 数组也是特殊的对象，它的键是数组的索引（下标）</span>\n\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当我们需要表示一组固定信息时，用对象可以更加的直观</li></ul><p><img src="' + _imports_32 + '" alt="image-20230907105306497"></p><p>代码优化：</p><p><img src="' + _imports_33 + '" alt="image-20230907105550208"></p><p>练习</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;汪峰&#39;</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">48</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;wife&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;国际章&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;李杰&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">48</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;第一个娃&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第二个娃&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// p1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>wife<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// p2</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// p3</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// p4</span>\n    obj<span class="token punctuation">.</span>wife<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;章子怡&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>wife<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// p5</span>\n    obj<span class="token punctuation">.</span>wife<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;女子&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>wife<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// p6</span>\n    obj<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">&#39;吹牛逼&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// p7</span>\n    <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取对象的键和值 keys 和 values</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">num3</span><span class="token operator">:</span> <span class="token number">3</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取所有的对象的键</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取所有的对象的键的值 ，他们输出的都是一个数组</span>\n\n\nObject<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//  将对象转换为键值对的数组形式 </span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作业：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// for in 或者for 可以遍历对象 ，  ！for of 不能遍历对象</span>\n\n\n\n\n\n<span class="token comment">// 随机抽牌</span>\n\n<span class="token comment">// 随机生成一个数， index</span>\n\n<span class="token comment">// 获取牌</span>\n\n<span class="token comment">// 删除抽走的牌</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十六-math和date" tabindex="-1"><a class="header-anchor" href="#十六-math和date" aria-hidden="true">#</a> 十六，Math和Date</h1><hr><h2 id="_1-math介绍" tabindex="-1"><a class="header-anchor" href="#_1-math介绍" aria-hidden="true">#</a> 1，Math介绍</h2><p>Math是一个内置对象（不是一个构造函数），它拥有一些数学常数属性和数学函数方法。它里面提供了很多的属性和方法。</p><ul><li>Math. PI：圆周率，约等于 3.14159；</li><li>Math.floor：向下舍入取整</li><li>Math.ceil：向上舍入取整</li><li>Math.round：四舍五入取整</li><li>Math.random：生成0~1的随机数（包含0，不包含1）</li><li>Math.pow(x, y)：返回x的y次幂</li><li>Math.abs() 取绝对值</li><li>....</li></ul><h2 id="_2-date-日期" tabindex="-1"><a class="header-anchor" href="#_2-date-日期" aria-hidden="true">#</a> 2，Date 日期</h2><p>标准时间 GMT 19700101-00-00-00</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 时间来自电脑客户端</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Date获取信息的方法：</strong></p><ul><li>getFullYear()：获取年份（4 位数）</li><li>getMonth()：获取月份，从 0 到 11；</li><li>getDate()：获取当月的具体日期，从 1 到 31；</li><li>getHours()：获取小时；</li><li>getMinutes()：获取分钟；</li><li>getSeconds()：获取秒钟；</li><li>getMilliseconds()：获取毫秒</li></ul><p>Date获取Unix时间戳</p><ul><li>时间戳 GMT 19700101-00-00-00 它是一个整数值 <ul><li>方式一：new Date().getTime()</li><li>方式二：new Date().valueOf()</li><li>方式三：+new Date()</li><li>方式四：Date.now()</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回日期的年份</span>\n<span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// 返回日期的月份    // 0-11</span>\n<span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// 返回日期的月份中的某一天   // 1-31</span>\n<span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// 返回日期的星期几</span>\n<span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// 返回日期的小时数</span>\n<span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// 返回日期的分钟数</span>\n<span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">// 返回日期的秒数</span>\n\n\n\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十七-函数" tabindex="-1"><a class="header-anchor" href="#十七-函数" aria-hidden="true">#</a> 十七，函数</h1><hr><h2 id="_1-函数介绍" tabindex="-1"><a class="header-anchor" href="#_1-函数介绍" aria-hidden="true">#</a> 1，函数介绍</h2><p>函数：一堆代码的集合，目的就是为了复用</p><p>函数，可以当做是一大堆功能代码的集合。就是某段代码的封装，这段代码帮助我们完成某一个功能。默认情况下，JS引擎也帮我提供了一些函数，我们也可以编写自己的函数。</p><ul><li>alert函数</li><li>prompt函数</li><li>console.log函数</li><li>String/Number/Boolean函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数没有名字，叫做匿名函数</span>\n\n<span class="token comment">// 函数表达式，此时变量名就相当于函数名，</span>\n<span class="token keyword">let</span>  <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// foo bar fn </span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数的声明细节：</strong></p><ul><li>函数名的命名规则和前面变量名的命名规则是相同的</li><li>函数定义完后里面的代码是不会执行的，函数必须调用才会执行</li><li>函数要尽量做到见名知意，学习时，使用foo，bar，fn，gn....</li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><p><strong>函数调用：</strong></p><ul><li>调用函数是让已存在的函数为我们所用</li><li>可以是自己写的函数，也可以是系统中内置的，也可以是第三方的</li><li>调用的时候千万不要忘记添加小括号</li></ul><h2 id="_2-函数的作用域" tabindex="-1"><a class="header-anchor" href="#_2-函数的作用域" aria-hidden="true">#</a> 2，函数的作用域</h2><p><strong>全局变量和局部变量：</strong></p><ul><li>局部变量就是只能在一定范围内使用，一般在函数内部的变量都是局部变量</li><li>全局变量就是在全局哪里都可以使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span> \n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">5</span>   <span class="token comment">// 局部变量</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>局部作用域和全局作用域</strong></p><ul><li>函数体内部所对应的空间就是局部作用域</li><li>函数体外部所对应的空间主浊全局作用域</li></ul><h2 id="_3-函数的参数" tabindex="-1"><a class="header-anchor" href="#_3-函数的参数" aria-hidden="true">#</a> 3，函数的参数</h2><p><strong>形参和实参</strong></p><p>函数调用的过程，就是实参向形参赋值的过程。</p><p>形参是用于接收实参，形参相当与函数内部的局部变量</p><h2 id="_4-函数的返回值" tabindex="-1"><a class="header-anchor" href="#_4-函数的返回值" aria-hidden="true">#</a> 4，函数的返回值</h2><p>return关键字</p><p>作用：</p><ol><li>提供返回值</li><li>结束函数调用</li></ol><p>如果函数里面没有写return，默认返回undefined</p><p><strong>arguments</strong></p><p>它是伪数组，向数组，本质是对象</p><p>函数调用时，除了实参给形参赋值之外，实参也会给函数内部的arguments赋值，这个方法只存在于函数内部。</p><h2 id="_5-练习" tabindex="-1"><a class="header-anchor" href="#_5-练习" aria-hidden="true">#</a> 5，练习</h2><h2 id="_6-函数本身也是数据" tabindex="-1"><a class="header-anchor" href="#_6-函数本身也是数据" aria-hidden="true">#</a> 6，函数本身也是数据</h2><p>函数也是一种数据，数据类型是function</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n<span class="token comment">//es6 中的一个新增符号</span>\n\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>  <span class="token comment">// 展开运算符          </span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="十八-dom-后续" tabindex="-1"><a class="header-anchor" href="#十八-dom-后续" aria-hidden="true">#</a> 十八，DOM （后续）</h1><h2 id="_1-dom介绍" tabindex="-1"><a class="header-anchor" href="#_1-dom介绍" aria-hidden="true">#</a> 1，dom介绍</h2><p><strong>JavaScript是一门编程语言，它的运行环境有两个，一个是浏览器，一个是node，前面我们学的JS必于ECMAScript中的语法，浏览器的JS有三部分组成：</strong></p><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><p><strong>文档对象模型</strong></p><p>dom和bom，也称为webAPI</p><p><strong>Dom</strong></p><ul><li>文档</li><li>对象 object 所有的元素都是对象</li><li>Model</li></ul><p><u>Dom树，在html结构中，最终会形成一个树结构。</u></p><p><img src="' + _imports_34 + '" alt="image-20230911140207146"></p><p>Dom三要素：</p><ol><li>获取事件源</li><li>事件</li><li>事件驱动程序</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// js 事件驱动为核心</span>\n    <span class="token comment">// document 是一个内置对象， 挂载在window上的对象</span>\n\n\n    <span class="token comment">// dom 就是操作对象中的属性和方法  api</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取HTML元素</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2，节点介绍</p><p>结点分类：</p><ul><li><strong>元素</strong> ！</li><li>文本</li><li><strong>属性</strong> !</li><li>注释</li><li>换行</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 我是一个注释 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>haha<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是一个DIV<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token keyword">let</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;box&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// nodeType判断一个节点的类型</span>\n        <span class="token comment">// 如果是元素节点  它的nodeType是1</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 </span>\n\n        <span class="token comment">// 要获取属性节点，必须先得到元素节点</span>\n        <span class="token comment">// 通过打点的形式，就可以获取属性节点</span>\n        <span class="token comment">// console.log(oDiv.title); // haha</span>\n\n        <span class="token comment">// getAttribute 根据属性名获取属性值的</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// haha</span>\n        <span class="token comment">// getAttributeNode 获取属性节点</span>\n        <span class="token keyword">let</span> attr <span class="token operator">=</span> oDiv<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> text <span class="token operator">=</span> oDiv<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 我是一个DIV</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3，节点关系</p><ul><li>获取到一个节点（Node）后，可以根据这个节点去获取其他的节点，我们称之为节点之间的关系</li><li>父节点：parentNode</li><li>前兄弟节点：previousSibling</li><li>后兄弟节点：nextSibling</li><li>子节点：childNodes</li><li>第一个子节点：firstChild</li><li>最后一个子节点：lastChild</li></ul><h2 id="_2-元素节点的属性" tabindex="-1"><a class="header-anchor" href="#_2-元素节点的属性" aria-hidden="true">#</a> 2，元素节点的属性</h2><ul><li><p>innerHTML 获取到元素的子元素，不包含自身</p></li><li><p>outerHTML 获取到包括本身元素，以及子元素的内容</p></li><li><p>textContent 获取到文本内容，只能获取到文本且无法识别到标签。</p></li><li><p>nodeValue 使用这个不可以获取元素节点的内容，获取的是null。是用于非元素节点的内容</p></li></ul><p><img src="' + _imports_35 + '" alt="image-20230911141421800"></p><h2 id="_3-创建和挂载节点" tabindex="-1"><a class="header-anchor" href="#_3-创建和挂载节点" aria-hidden="true">#</a> 3，创建和挂载节点</h2><p>如果拿到的是一个伪数组，一定要他添加索引</p><p>apend() 在元素的末尾挂载</p><p>prepend() 在元素的开头挂载节点（内部）</p><p>before() 在元素的前面 （外部）</p><p>after() 在元素的后面 （外部）</p><p><img src="' + _imports_36 + '" alt="image-20230911142420348"></p>', 436);
const _hoisted_437 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_437);
}
const JSxuexi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JSxuexi.html.vue"]]);
export {
  JSxuexi_html as default
};
