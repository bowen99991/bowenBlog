import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-5c3af97a.js";
const _imports_0 = "/bowenBlog/assets/image-20240123201224872-45df9cdd.png";
const _imports_1 = "/bowenBlog/assets/image-20240124200507451-ea0cb63c.png";
const _imports_2 = "/bowenBlog/assets/image-20240124200859205-3195613e.png";
const _imports_3 = "/bowenBlog/assets/image-20240124200949252-7eb3800e.png";
const _imports_4 = "/bowenBlog/assets/image-20240124201742851-67027f5b.png";
const _imports_5 = "/bowenBlog/assets/image-20240125201602913-d0669300.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h2 id="第一期" tabindex="-1"><a class="header-anchor" href="#第一期" aria-hidden="true">#</a> 第一期</h2><p><strong>面试的底层以及八股文的准备</strong></p><h3 id="_1-面试技巧不常见的名词" tabindex="-1"><a class="header-anchor" href="#_1-面试技巧不常见的名词" aria-hidden="true">#</a> 1, 面试技巧不常见的名词</h3><ul><li>比如费曼技巧</li><li>刻意练习</li><li>结构化思维</li><li>开气场</li><li>简历黑话</li><li>免费复活卡</li><li>业务sence</li><li>难点公式</li><li>信息差</li></ul><p>简历,自我介绍,回答</p><p>突出<strong>引导</strong> (提前准备好的等同于开卷考试)</p><p>八股文=&gt; <strong>突出底层原理</strong></p><p><strong>前端如何讲述底层:</strong></p><ol><li>数据结构</li><li>源码</li><li>浏览器</li></ol><p><strong>举例:</strong></p><ul><li>比如讲闭包可以讲到浏览器的垃圾回收</li><li>讲原型链能够讲到 Vue 的响应式</li><li>比如原型链本质就是一个链表（底层 数据结构） <em>瞬间拉开和别人的差距</em></li></ul><h3 id="_2-八股文总结三字经" tabindex="-1"><a class="header-anchor" href="#_2-八股文总结三字经" aria-hidden="true">#</a> 2, 八股文总结三字经</h3><p>什么意思？其实就是任何的八股文，你都能够通过三字经的形式填装上去</p><ul><li>是什么 <ul><li>讲是什么，一定要简洁直击本质</li><li>因为他是第一性能原理的要求</li><li>直击本质，才显得你理解深刻</li></ul></li><li>优缺点</li><li>讲联系</li><li>说应用</li></ul><p><strong>背后逻辑:</strong>【第一性原理与结构化思维 】</p><h3 id="_3-八股文面试公式" tabindex="-1"><a class="header-anchor" href="#_3-八股文面试公式" aria-hidden="true">#</a> 3, <strong>八股文面试公式</strong></h3><p>基本上所有复杂的八股文我们都可以按照公式去套，就是三字经的公式加上底层（数据结构算法 浏览器原理 源码）</p><p><strong>举例</strong></p><p>比如闭包 ，你按照模式去回答，<strong>闭包是什么 优缺点 场景和源码应用</strong>;当然你可以用chatgpt来帮你快速学习面试题 比如闭包 直接问gpt或者文心一言</p><p><img src="' + _imports_0 + '" alt="image-20240123201224872"></p><p>包括如何去准备，准备完之后如何觉得不像是背的，这是好多人会出现的问题</p><p><strong>但是网上要注意一点是什么？</strong></p><p>一定要看面试题的时间，越新的，尤其是别人拍照的，越靠谱</p><p>技术更新是非常快的，你像五年前的就不要看了</p><h3 id="_4-面试的高频题目" tabindex="-1"><a class="header-anchor" href="#_4-面试的高频题目" aria-hidden="true">#</a> 4, 面试的高频题目</h3><p>通用类型基础部分：HTML、CSS、H5C3、JS</p><p>少量准备：Node.js、webpack &amp; vite</p><p>对于冲大厂的 有<strong>内部的算法真题</strong> 都是冲大厂学员留下来的</p><p>社招少量：数据结构和算法重点：场景题和提炼项目细节和难点其他：兼容、性能优化、安全、项目上线、网络请求</p><p>框架类型vue方向：vue2/vue3react方向：react少量：uniapp、微信程序、electron...</p><ol><li>简历黑话</li><li>亮点公式</li><li>业务sence</li></ol><h2 id="第二期" tabindex="-1"><a class="header-anchor" href="#第二期" aria-hidden="true">#</a> 第二期</h2><p><strong>简历，源码，亮点</strong></p><p>那么今天我们来实操，纯实操写简历，写高分简历 以及项目亮点，这些都是核心中的核心</p><p>引出一个话题，就是<strong>面试是从什么时候开始的？</strong></p><p>答案 : 在你投递简历的那一刻，面试就已经开始了</p><p><strong>简历</strong></p><p>简历的第一个作用就是拿到一个满意的面试机会</p><p>简历的第二个重要的价值就在于引导面试官</p><p>简历相当于一个菜谱，它能够把我们所有的知识进行展示</p><p>展示完了，我们要针对每个点准备好话术</p><p>就是我昨天说的面试底层逻辑，就是引发好奇</p><p>吸引面试官到<strong>准备好的东西</strong></p><h3 id="_1-如何拿到面试机会" tabindex="-1"><a class="header-anchor" href="#_1-如何拿到面试机会" aria-hidden="true">#</a> 1, 如何拿到面试机会</h3><p>先来个开胃菜，每天几点投递简历呢？</p><p>最推荐是九点</p><p><strong>打招呼词一定不要使用系统推荐，要自定义</strong></p><p>要不然面试官看好几百份简历，他都直接略过的</p><p>然后直接把简历变成图片发到boss上</p><p><img src="' + _imports_1 + '" alt="image-20240124200507451"></p><h3 id="_2-投简历的方法" tabindex="-1"><a class="header-anchor" href="#_2-投简历的方法" aria-hidden="true">#</a> 2, <strong>投简历的方法</strong></h3><ol><li>海投</li><li>精投</li><li>内推</li></ol><p>一种是海投，适合20k以下想快速找工作的的简历</p><p>不要打满200份，150份就够了，多几个账号去投递，小心封控</p><p>另一种是精投，分析jd，适合面试机会少或者工资要求高的</p><p>精投最重要的就是匹配度</p><p>还有一种就是内推，军哥这边有大量的内推资源</p><p>如果你是内推的话，会告诉你你着重写哪些东西</p><ol><li>第一种就是它的业务匹配度，就是你做的业务和它做的业务是不是都是相似的 <ol><li>比如说金融，比如说 ToC，互联网，比如说 H5，比如说 PC，比如管理后台</li><li>其实这就是我们能够包装的部分</li><li>面试 HR 挑简历，首先他考虑的是匹配度，其次才是学历</li><li>匹配度和学历同等重要，所以我们如果学历低，那我们优先找匹配度</li></ol></li></ol><ul><li>公司的匹配度</li><li>业务的匹配度</li><li>技术的匹配度</li></ul><h3 id="_3-引导面试官" tabindex="-1"><a class="header-anchor" href="#_3-引导面试官" aria-hidden="true">#</a> 3, 引导面试官</h3><p>我们可以在简历中加一些数据, 标注难点、亮点 以及加粗 甚至标蓝</p><p><img src="' + _imports_2 + '" alt="image-20240124200859205"></p><p>简历相当于菜谱，吸引面试官的注意</p><p><strong>同时你在讲项目或者是八股文的时候都可以引导到你准备好的话术上</strong></p><p>同时简历还要有最重要的作用，就是<strong>开气场</strong></p><p>可以看一下如何去写简历，这都是我总结的<strong>简历黑话</strong></p><p><img src="' + _imports_3 + '" alt="image-20240124200949252"></p><p>举个很简单的例子，就是0-1</p><p>那谁都能0到1，但问题这个0-1背后是很多面试官以及业务需要的</p><h3 id="_4-项目亮点-难点" tabindex="-1"><a class="header-anchor" href="#_4-项目亮点-难点" aria-hidden="true">#</a> 4, 项目亮点 / 难点</h3><p>什么是亮点?</p><p><strong>亮点 就是技术上你做的事情不是很难，但是它带来的效果非常的棒，想法非常的新颖</strong></p><p>他的表达是有一个<strong>公式</strong>的就是</p><p>我<strong>主动发现业务痛点 用技术手段解决 创造很大价值</strong></p><p>所以你会发现有时候他的技术难度并不大</p><p>但是更加强调你对<strong>业务的理解与你创造的业务价值</strong></p><p>这是所有程序员都忽略的</p><p><strong>那如何能发现业务痛点与流程优化点呢</strong></p><p>就是具备业务sence ，也就是业务观</p><p>业务 sence 就像一根针，插入公司这个母体，把技术像药一样注入这个母体中</p><p>让母体循环的更好，具象点说就是帮公司省钱或者挣钱</p><p>这才是技术人最终的价值</p><p><strong>业务痛点有很多 我举一些例子</strong></p><p>1、部门人越来越多了，代码风格不一样，技术栈不一样，如何提高代码维护性？</p><p>2、组件复用率很高，跨项目不能只靠复制黏贴，怎么管理？</p><p>3、用户页面总是白屏，或者很慢，复现困难怎么办？</p><p>4、页面每天要10个，一个人怎么做得完？</p><p><strong>解决方式</strong></p><p>1、我们可以做 文档规范 脚手架制定 codereview机制</p><p>2、npm组件库，lib库打包</p><p>3、监控埋点自研或者引入第三方平台</p><p>4、运营配置后台与投放策略系统或者低代码配置页面</p><p><strong>举个例子</strong></p><p>当你们项目来了很多很多人的时候, <strong>大家的代码风格不一样</strong>，<strong>于是我决定每周二拉一个 code review 会</strong>，在会上我们去统一大家的代码，同时说下大家最近做的重点事情</p><p>这样大家更有一个团队的感觉，而且代码风格，还有代码维护上都得到了统一，降低了20%的代码打回率</p><p>最后这个 codeReview 会 变成了部门的例会，然后我们共建了一个文档，推广了三个部门 ,</p><p>在会上我们还会做一些技术的分享，比如我做过前端安全与性能的分享</p><p>像这个就是非常好的一个业务的亮点，它跟技术难度并不大，但是确实带来了整个项目的好处</p><p>很多人觉得觉得这个是领导做的</p><p>但是其实面试就是把别人的说成自己的</p><p>因为你做的事情都是<strong>增删改查</strong>，你<strong>做的对业务有价值的事情都被别人占去了</strong> , <em>那你就没什么价值</em></p><p>所以我们做任何事情要找到最终的价值</p><p>很多的小工具提效的都算亮点</p><ul><li>内部的 node工具 代替了1000个后台管理页面</li><li>python图片压缩脚本 结合webpack 做到自动打包自动压所图片，自动去重重复图片,推行三个部门10个项目，总计压缩图片数量3000+</li></ul><p><img src="' + _imports_4 + '" alt="image-20240124201742851"></p><p>是最好是能把你总结的表达出来</p><p>因为面试最重要的是说，而不是做</p><p><strong>那如何说的真实？以及面试官会问哪些问题？你的表达自不自然？</strong></p><p>光优化也是很多 。有性能优化、体验性优化、技术赋能优化以及协作流程优化</p><p>当然除了这些优化，还有一些工具提效，这也是很重要的</p><p>也就是我<strong>主动发现业务痛点，用基础的手段解决，产生了某些价值</strong></p><p><strong>记住这才是业务的闭环</strong></p><p><strong>那如何引导面试官？其实就是那些数据，数据是最能够打动人的</strong></p><p><strong>面试的时候，面试官最容易问你遇到的亮点是什么？</strong></p><p>大部分做增删改查的人，他根本就没有，于是就尬在那了</p><h2 id="第三期" tabindex="-1"><a class="header-anchor" href="#第三期" aria-hidden="true">#</a> 第三期</h2><p><strong>主题</strong>:</p><ol><li>面试开气场</li><li>录音</li><li>费曼技巧</li><li>刻意练习</li><li>脑图</li><li>项目难点</li></ol><p>今天可以说是非常实操的一天，实操到每天如何去学习</p><h3 id="_1-如何去刻意的面向面试去学习" tabindex="-1"><a class="header-anchor" href="#_1-如何去刻意的面向面试去学习" aria-hidden="true">#</a> 1, 如何去刻意的面向面试去学习 ?</h3><p>涨薪基本都靠面试</p><p>面试考察的都是脑子到嘴的过程</p><p><strong>大家可以思考一下自己平时是怎么学习的 ?</strong></p><p>打开 b 站，敲敲代码看看书</p><p>这些都是眼睛到脑子的过程, <strong>面试是考你脑子到嘴的过程</strong></p><p>所以大家应该<strong>大量的去说，去表达</strong>，去录音反复听自己的回答</p><p><strong>自己对知识的体悟</strong>, 这才是正确的刻意练习</p><p>它的本质叫做<strong>费曼技巧</strong></p><p><strong>通过输出来倒逼自己的输入</strong></p><h3 id="站在面试官的角度去考察" tabindex="-1"><a class="header-anchor" href="#站在面试官的角度去考察" aria-hidden="true">#</a> 站在面试官的角度去考察</h3><ul><li>比如讲得太长、太啰嗦</li><li>没有重点，吸引不了面试官的注意</li></ul><p>其实它的本质就是靠了几个话术</p><p>任何人去大厂，项目难点，项目亮点没有多少的</p><p><strong>但能保证的是它的项目难点</strong>，项目亮点是刻意练习的，是不断的录音的，不断的去说的</p><p>所以你们要做的是打造自己的几个亮点和几个难点</p><p>把面试官吸引到这里，然后吊打他</p><p><strong>刻意练习的三要素是</strong></p><ol><li>第一找到一个合适的难度</li><li>第二找到一个导师</li><li>第三反复大量的练习</li></ol><p>通过输出来倒逼自己的输入是非常好锻炼自己知识的过程</p><h3 id="_2-讲一下咱们如何去开气场" tabindex="-1"><a class="header-anchor" href="#_2-讲一下咱们如何去开气场" aria-hidden="true">#</a> 2, 讲一下咱们如何去开气场</h3><p>如果你经常面试，你会发现有时候面试就像聊天</p><p>有时你一直在压制着面试官</p><p>有时你觉得一直被面试官压制</p><p>其实<strong>原理就是你的气场有没有打开</strong></p><p>开气场底层原理就是，一个人他在10分钟之内或者7个回答之内单方面被另一个人持续吊打</p><p><strong>自我介绍是非常重要的</strong></p><p>你完全可以在自我介绍的时候，直接引到自己准备好的难点或亮点</p><p>如何能吸引面试官的注意？</p><p>在面试过程中如何引到自己的难点？</p><p>难点怎么结构化的表达？</p><h3 id="_3-难点也是有公式的" tabindex="-1"><a class="header-anchor" href="#_3-难点也是有公式的" aria-hidden="true">#</a> 3, <strong>难点也是有公式的</strong></h3><p>还有很多人说这个东西对于你来说不是难点，对于面试官来说它就是难点，难点是因人而异的</p><p>我只能说是有道理的，但是如果我们所有的都按这么说的话，那没有规律是无法去学习的</p><p><strong>难点有什么规律呢？</strong></p><p>其实就涉及到了一个东西，就叫做<strong>选型</strong></p><p>如果你这个难点都不涉及到选型的话, 都不涉及到错误的方案，重试的话 , 它就不算什么难点</p><p>star法则大家都听过, 但使用 star 法则来介绍难点的话会很麻烦</p><h3 id="我推荐大家用-par-什么意思" tabindex="-1"><a class="header-anchor" href="#我推荐大家用-par-什么意思" aria-hidden="true">#</a> <strong>我推荐大家用 PAR , 什么意思？</strong></h3><ul><li>P就是我们的背景以及问题以及痛点</li><li>A其实就是我们要做的东西</li><li>R就是我们的结果</li></ul><h3 id="_4-其中我们如何把选型和这个-par-结合呢" tabindex="-1"><a class="header-anchor" href="#_4-其中我们如何把选型和这个-par-结合呢" aria-hidden="true">#</a> 4, 其中我们如何把选型和这个 PAR 结合呢？</h3><p>那其实就是你要讲清楚, <strong>你碰到的难点是什么？难点是怎么选型的？难点的分类？</strong></p><ul><li>如何分别解决</li><li>里面又会有哪些小的难点？</li><li>小的难点又是如何去解决的？</li><li>如何去做的选型？</li><li>业界的方案又是什么？</li><li>这个就是无限嵌套</li></ul><h3 id="举个微前端的例子" tabindex="-1"><a class="header-anchor" href="#举个微前端的例子" aria-hidden="true">#</a> <strong>举个微前端的例子</strong></h3><p>背景审批平台对接300个业务系统，开始用 iframe 后来用前端进行微前端改造</p><p>主应用负责审批流程的节点，子应用负责展示业务表单页面</p><p>iframe 会有一堆问题比如 ios兼容 ，比如性能</p><p>所以为了产品体验需要做微前端改造</p><ul><li>singleSPA</li><li>icestark</li><li>WebComponents</li><li>webpack5</li><li>无界iframe</li><li>qiankun</li></ul><p>到底用哪个</p><p>他们的优劣是啥</p><p>乾坤改造后又会出现一堆问题</p><p>跨域、 ie隔离 、登录问题、接口跨域</p><p>解决这些小问题有涉及一堆的选型与小问题</p><p>这种项目就是可以冲刺 30k 40k 的复杂项目</p><p>我内部会讲，很多人都是靠这种项目去的大厂</p><p>我们可以把它<strong>画成脑图与架构图去辅助我们表达</strong></p><p>这是内部微前端的项目</p><p><img src="' + _imports_5 + '" alt="image-20240125201602913"></p><p><strong>我们可以用录音的形式借助费曼技巧来理解这些知识</strong></p><p><strong>挖掘难点的方式有两种</strong>，</p><ol><li>一种是挖掘自己本身的</li><li>一种是通过别人的项目或者是自己包装项目，结合我给到的方法在面试中发挥出来</li></ol>', 183);
const _hoisted_184 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_184);
}
const qianduanXunlianyingmianshi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "qianduan-xunlianyingmianshi.html.vue"]]);
export {
  qianduanXunlianyingmianshi_html as default
};
