import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-01d350d9.js";
const _imports_0 = "/bowenBlog/assets/image-20231229090539037-f0909ca5.png";
const _imports_1 = "/bowenBlog/assets/image-20231228164051024-1e2ba481.png";
const _imports_2 = "/bowenBlog/assets/image-20231228174854744-2171cbd2.png";
const _imports_3 = "/bowenBlog/assets/image-20231228175525259-1a266696.png";
const _imports_4 = "/bowenBlog/assets/image-20231228175634080-42820c5c.png";
const _imports_5 = "/bowenBlog/assets/image-20231228175735235-9880a5ce.png";
const _imports_6 = "/bowenBlog/assets/image-20231228180106606-b558bf86.png";
const _imports_7 = "/bowenBlog/assets/image-20231228180123064-94891492.png";
const _imports_8 = "/bowenBlog/assets/image-20231228180140086-71807bab.png";
const _imports_9 = "/bowenBlog/assets/image-20231228180154587-ab701775.png";
const _imports_10 = "/bowenBlog/assets/image-20231228175945910-e6a80d78.png";
const _imports_11 = "/bowenBlog/assets/image-20231229103221501-19020181.png";
const _imports_12 = "/bowenBlog/assets/image-20231229103141132-73a70110.png";
const _imports_13 = "/bowenBlog/assets/image-20231229104456735-30cb6207.png";
const _imports_14 = "/bowenBlog/assets/image-20231229104507443-1bdc3f1e.png";
const _imports_15 = "/bowenBlog/assets/image-20231229105046602-17f4c709.png";
const _imports_16 = "/bowenBlog/assets/image-20231229110349079-b4b0d77e.png";
const _imports_17 = "/bowenBlog/assets/image-20231229145818023-157595fa.png";
const _imports_18 = "/bowenBlog/assets/image-20231229160114257-a2f08a8f.png";
const _imports_19 = "/bowenBlog/assets/image-20231229161400589-599d68f3.png";
const _imports_20 = "/bowenBlog/assets/image-20231229161456870-f4595074.png";
const _imports_21 = "/bowenBlog/assets/image-20231229165527119-934bf32e.png";
const _imports_22 = "/bowenBlog/assets/image-20231229165645598-d49ec540.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h1><h2 id="一-mysql" tabindex="-1"><a class="header-anchor" href="#一-mysql" aria-hidden="true">#</a> 一, MySQL</h2><h3 id="_1-安装集成环境工具" tabindex="-1"><a class="header-anchor" href="#_1-安装集成环境工具" aria-hidden="true">#</a> 1, 安装集成环境工具</h3><blockquote><p>安装集成了 MySQL 的工具. 小皮 <strong>phpstudyPro</strong> ,</p><p>直接搜索, 傻瓜式安装</p></blockquote><p><img src="' + _imports_0 + '" alt="image-20231229090539037"></p><h3 id="_2-安装-sql-可视化工具" tabindex="-1"><a class="header-anchor" href="#_2-安装-sql-可视化工具" aria-hidden="true">#</a> 2, 安装 SQL 可视化工具</h3><p>Navicat Premium 15</p><p>下载地址, 点击即可下载</p><p>https://download.navicat.com.cn/download/navicat160_premium_cs_x64.exe</p><blockquote><p>官网只有最新的16版本, 想要下载其他的版本, 只需要把16改成15,14,13,12即可,分别对应着相应的版本</p></blockquote><p>当前我安装的是 15 的版本, 安装方式是傻瓜式安装直接下一步</p><p><strong>下载激活工具</strong></p><p>https://pan.baidu.com/s/1OfMoxozXh5-EdD2Zvp5DNQ?pwd=xljy 网盘提取码：xljy</p><p><strong>在安装完以上两个工具之后, 下面开始激活步骤</strong></p><p><strong>windows</strong> 使用方法：</p><ul><li>Navicat Premium 12 为退出状态</li><li>进入命令终端界面</li><li>使用命令进入激活文件夹：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令行的方式打开激活工具</span>\n\n<span class="token comment"># 执行命令</span>\n.<span class="token punctuation">\\</span>navicat-patcher.exe <span class="token string">&quot;C:\\Program\\Navicat Premium 12(这个是可视化软件的安装目录, 确定好您的软件安装地址)&quot;</span>\n\n<span class="token comment"># 当前的安装地址</span>\n.<span class="token punctuation">\\</span>navicat-patcher.exe <span class="token string">&quot;C:\\Program Files\\PremiumSoft\\Navicat Premium 15&quot;</span>\n\n\n<span class="token comment"># 等 ........，最后可看到：MESSAGE: Patch has been done successfully.</span>\n<span class="token comment"># 可在文件夹中看到生成的一个文件：RegPrivateKey.pem</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_1 + '" alt="image-20231228164051024"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>执行命令：\n .<span class="token punctuation">\\</span>navicat-keygen.exe <span class="token parameter variable">-text</span> .<span class="token punctuation">\\</span>RegPrivateKey.pem\n \n <span class="token comment"># 以上很可能会出现操作失败的情况等其他问题... 也可以使用以下这种方式</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>另一种破解方式-- 注册机</strong></p><blockquote><p>使用注册机破解</p><p>https://pan.baidu.com/s/1_srPALXHshR2roTu3b3Bjg?pwd=gx3t</p><p>提取码: gx3t</p></blockquote><p>打开注册机, 选择版本</p><p><img src="' + _imports_2 + '" alt="image-20231228174854744"></p><p><strong>点击 Patch</strong></p><p><img src="' + _imports_3 + '" alt="image-20231228175525259"></p><p>出现以下提示说明Patch成功了 , 破解成功现在需要激活。</p><p><img src="' + _imports_4 + '" alt="image-20231228175634080"></p><p><strong>2.License. Product and Language、3.Resale License保持默认选择即可</strong></p><p>区块中点击Generate按钮就会生成一个许可证秘钥，将许可证秘钥复制后就打开Navicat Premium 15</p><p><img src="' + _imports_5 + '" alt="image-20231228175735235"></p><p>打开软件后会弹出一个提示框，我们点击注册</p><p><img src="' + _imports_6 + '" alt="image-20231228180106606"></p><p>粘贴许可证秘钥,点击激活</p><p><img src="' + _imports_7 + '" alt="image-20231228180123064"></p><p>选择手动激活。</p><p><img src="' + _imports_8 + '" alt="image-20231228180140086"></p><p>点击手动激活后会有一个请求码，</p><p>复制请求码到注册机中的Request Code里面，再生成一个jihuo码</p><p><img src="' + _imports_9 + '" alt="image-20231228180154587"></p><p>将jihuo码复制到框里，即可。</p><p>完成激活</p><p><img src="' + _imports_10 + '" alt="image-20231228175945910"></p><h3 id="_3-启动数据库" tabindex="-1"><a class="header-anchor" href="#_3-启动数据库" aria-hidden="true">#</a> 3, 启动数据库</h3><blockquote><p>在工具中新建链接, 填写任意名称, 默认密码 root ,设置MySQL的安装位置 选择字符集 UTF-8</p><p><img src="' + _imports_11 + '" alt="image-20231229103221501"></p></blockquote><blockquote><p><img src="' + _imports_12 + '" alt="image-20231229103141132"></p></blockquote><h3 id="_4-mysql的数据模型" tabindex="-1"><a class="header-anchor" href="#_4-mysql的数据模型" aria-hidden="true">#</a> 4, MySQL的数据模型</h3><p>关系型数据库：</p><ul><li>关系型数据库是建立在关系模型基础上的数据库，简单说，<strong>关系型数据库是由多张能互相连接的 二维表 组成的数据库</strong></li><li>关系型数据库都可以通过SQL进行操作，所以使用方便。</li><li>数据存储在磁盘中，安全。</li></ul><p><code>订单信息表</code> 和 <code>客户信息表</code> 都是有行有列二维表我们将这样的称为关系型数据库。如下：</p><p><img src="' + _imports_13 + '" alt="image-20231229104456735"></p><p>数据模型：</p><p><img src="' + _imports_14 + '" alt="image-20231229104507443"></p><p>通过客户端可以通过数据库管理系统<strong>创建数据库</strong>，<strong>在数据库中创建表</strong>，<strong>在表中添加数据</strong>。创建的每一个数据库对应到磁盘上都是一个文件夹。</p><p>一个数据库下可以创建多张表，我们到MySQL中自带的mysql数据库的文件夹目录下：</p><p><code>db.frm</code> 是表文件， <code>db.MYD</code> 是数据文件，通过这两个文件就可以查询到数据展示成二维表的效果。</p><blockquote><p><strong>小结：</strong></p><ul><li>MySQL中可以创建多个数据库，每个数据库对应到磁盘上的一个文件夹</li><li>在每个数据库中可以创建多个表，每张都对应到磁盘上一个 frm 文件</li><li>每张表可以存储多条数据，数据会被存储到磁盘中 MYD 文件中</li></ul></blockquote><h2 id="二-sql-概述" tabindex="-1"><a class="header-anchor" href="#二-sql-概述" aria-hidden="true">#</a> 二, SQL 概述</h2><p>通过SQL语句对数据库、表、数据进行增删改查操作。</p><h3 id="_1-sql-的通用语法" tabindex="-1"><a class="header-anchor" href="#_1-sql-的通用语法" aria-hidden="true">#</a> 1, SQL 的通用语法</h3><p>SQL 语句可以单行或多行书写，以分号结尾。以分号结尾才是一个完整的sql语句（show databases; ）。如下：</p><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。同样的一条sql语句写成如下的样子（Show Databases; ），一样可以运行处结果。</p><p>单行注释: -- 注释内容 或 #注释内容(MySQL 特有)。使用-- 添加单行注释时，--后面一定要加空格，而#没有要求。多行注释: /* 注释 */</p><h3 id="_2-sql分类" tabindex="-1"><a class="header-anchor" href="#_2-sql分类" aria-hidden="true">#</a> 2, SQL分类</h3><blockquote><p><strong>DDL</strong>（Data Definition Language）就是用来操作数据库，表等。</p><p><strong>DML</strong>（Data Manipulation Language）就是对表中数据进行增删改的。DQL（Data Query Language）就是对数据进行查询操作。从数据库表中查询到我们想要的数据。<strong>DML</strong>就是对数据库进行权限控制。比如我让某一个数据库表只能让某一个用户进行操作等。</p></blockquote><p>总结：</p><ul><li>以后我们最常操作的是 <code>DML</code> 和 <code>DQL</code> ，因为我们开发中最常操作的就是数据。</li></ul><h2 id="三-ddl操作数据库" tabindex="-1"><a class="header-anchor" href="#三-ddl操作数据库" aria-hidden="true">#</a> 三, DDL操作数据库</h2><p><strong>DDL主要就是对数据库的增删查操作。</strong></p><h3 id="_1-数据库基本操作" tabindex="-1"><a class="header-anchor" href="#_1-数据库基本操作" aria-hidden="true">#</a> 1, 数据库基本操作</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询所有的数据库</span>\n<span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>\n\n\n<span class="token comment"># 创建数据库</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名称<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 创建数据库避免已存在</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> 数据库名称<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 删除数据库</span>\n<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> 数据库名称<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 删除数据库</span>\n<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 数据库名称<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 使用数据库名称;</span>\n<span class="token keyword">USE</span> 数据库名称<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 查看当前使用的数据库</span>\n<span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-操作表" tabindex="-1"><a class="header-anchor" href="#_2-操作表" aria-hidden="true">#</a> 2, 操作表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询当前数据库下所有表名称</span>\n<span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>\n\n\n<span class="token comment"># 查询表结构</span>\n<span class="token keyword">DESC</span> 表名称<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 创建表</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">(</span>\n	字段名<span class="token number">1</span>  数据类型<span class="token number">1</span><span class="token punctuation">,</span>\n	字段名<span class="token number">2</span>  数据类型<span class="token number">2</span><span class="token punctuation">,</span>\n	…\n	字段名n  数据类型n  <span class="token comment">-- 注意：最后一行末尾，不能加逗号</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_15 + '" alt="image-20231229105046602"></p><p>创建以上表的结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tb_user <span class="token punctuation">(</span>\n		id <span class="token keyword">int</span><span class="token punctuation">,</span>\n    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>\n\n<span class="token keyword">desc</span> tb_user<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型" aria-hidden="true">#</a> 3, 数据类型</h3><blockquote><p>MySQL 支持多种类型，可以分为三类：</p><ul><li>数值</li><li>日期</li><li>字符串</li></ul></blockquote><p><strong>数值</strong>：</p><ul><li>tinyint : <strong>小整数型</strong>，占一个字节</li><li>int： <strong>大整数类型</strong>，占四个字节。eg： age int</li><li>double ： <strong>浮点类型</strong>，使用格式： 字<strong>段名 double(总长度, 小数点后保留的位数)</strong>。eg： score double(5, 2)</li></ul><p><strong>日期</strong>：</p><ul><li>date：日期值。只包含年月日。eg：birthday date ：</li><li>datetime ： 混合日期和时间值**。包含年月日时分秒**</li></ul><p><strong>字符串</strong>：</p><ul><li>char： 定长字符串。优点：存储性能高。缺点：浪费空间。eg： name char(10) <strong>如果存储的数据字符个数不足10个，也会占10个的空间</strong></li><li>varchar： 变长字符串。优点：节约空间。缺点：存储性能底。eg： name varchar(10) 如果存储的数据字符个数不足10个，那就数据字符个数是几就占几个的空间</li></ul><p><strong>常见的数据类型如图所示</strong></p><p><img src="' + _imports_16 + '" alt="image-20231229110349079"></p><p><strong>定长和可变长度的概念</strong></p><p>定长和可变长度是用来描述字符串类型的属性。</p><blockquote><ol><li><strong>定长（Fixed-Length）字符串</strong>： <ul><li>定长字符串具有固定的长度，无论字符串实际存储的内容长度是多少，它都会占用固定的存储空间。例如，如果定义一个长度为20的定长字符串，无论实际存储的字符串是&quot;Hello&quot;还是&quot;Hello, World!&quot;，它都会占用20个字符的存储空间。定长字符串的优点是存取速度较快，因为每个字符串都占用固定的存储空间，可以直接通过偏移量进行访问。</li></ul></li><li><strong>可变长度（Variable-Length）字符串</strong>： <ul><li>可变长度字符串的长度是根据实际存储的内容来确定的，它不会占用固定的存储空间。例如，如果定义一个可变长度字符串存储&quot;Hello&quot;，它只会占用5个字符的存储空间，而不会浪费额外的空间。可变长度字符串的优点是节省存储空间，但在存取时需要一些额外的开销，因为需要记录字符串的长度信息。</li></ul></li></ol></blockquote><p><strong>总结常用的数据类型:</strong></p><ol><li>整数类型（Integer Types）： <ul><li>TINYINT：1字节，范围为-128到127（有符号）或0到255（无符号）。</li><li>SMALLINT：2字节，范围为-32,768到32,767（有符号）或0到65,535（无符号）。</li><li>MEDIUMINT：3字节，范围为-8,388,608到8,388,607（有符号）或0到16,777,215（无符号）。</li><li>INT或INTEGER：4字节，范围为-2,147,483,648到2,147,483,647（有符号）或0到4,294,967,295（无符号）。</li><li>BIGINT：8字节，范围为-9,223,372,036,854,775,808到9,223,372,036,854,775,807（有符号）或0到18,446,744,073,709,551,615（无符号）。</li></ul></li><li>浮点数类型（Floating-Point Types）： <ul><li>FLOAT：4字节，单精度浮点数。</li><li>DOUBLE：8字节，双精度浮点数。</li></ul></li><li>定点数类型（Fixed-Point Types）： <ul><li>DECIMAL或NUMERIC：变长，用于存储精确的小数，需要指定精度和小数位数。</li></ul></li><li>字符串类型（String Types）： <ul><li>CHAR：定长字符串，最多255个字符。</li><li>VARCHAR：变长字符串，最多65535个字符。</li><li>TEXT：可变长度的文本字符串，最多65535个字符。</li></ul></li><li>日期和时间类型（Date and Time Types）： <ul><li>DATE：日期，格式为&#39;YYYY-MM-DD&#39;。</li><li>TIME：时间，格式为&#39;HH:MM:SS&#39;。</li><li>DATETIME：日期和时间，格式为&#39;YYYY-MM-DD HH:MM:SS&#39;。</li><li>TIMESTAMP：日期和时间，范围从&#39;1970-01-01 00:00:01&#39;到&#39;2038-01-19 03:14:07&#39;。</li></ul></li><li>布尔类型（Boolean Types）： <ul><li>BOOL或BOOLEAN：存储真或假。</li></ul></li><li>枚举类型（Enumeration Types）： <ul><li>ENUM：定义一个允许的值列表。</li></ul></li><li>集合类型（Set Types）： <ul><li>SET：定义一个允许的值列表，可以选择多个值。</li></ul></li></ol><h3 id="小案例" tabindex="-1"><a class="header-anchor" href="#小案例" aria-hidden="true">#</a> 小案例</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>需求：设计一张学生表，请注重数据类型、长度的合理性\n	1. 编号\n	2. 姓名，姓名最长不超过10个汉字\n	3. 性别，因为取值只有两种可能，因此最多一个汉字\n	4. 生日，取值为年月日\n	5. 入学成绩，小数点后保留两位\n	6. 邮件地址，最大长度不超过 64\n	7. 家庭联系电话，不一定是手机号码，可能会出现 - 等字符\n	8. 学生状态（用数字表示，正常、休学、毕业...）\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语句设计：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student <span class="token punctuation">(</span>\n		id <span class="token keyword">int</span><span class="token punctuation">,</span>\n    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    gender <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    birthday <span class="token keyword">date</span><span class="token punctuation">,</span>\n    score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    tel <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">status</span> <span class="token keyword">tinyint</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-删除和修改" tabindex="-1"><a class="header-anchor" href="#_4-删除和修改" aria-hidden="true">#</a> 4, 删除和修改</h3><p><strong>删除</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 删除表</span>\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>\n\n\n<span class="token comment"># 删除表时判断是否存在</span>\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 表名<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 修改表名</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新的表名<span class="token punctuation">;</span>\n<span class="token comment">-- 将表名student修改为stu</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">rename</span> <span class="token keyword">to</span> stu<span class="token punctuation">;</span>\n\n\n\n<span class="token comment"># 添加一列</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 列名 数据类型<span class="token punctuation">;</span>\n<span class="token comment">-- 给stu表添加一列address，该字段类型是varchar(50)</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n<span class="token comment"># 修改数据类型</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 新数据类型<span class="token punctuation">;</span>\n<span class="token comment">-- 将stu表中的address字段的类型改为 char(50)</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">modify</span> address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n<span class="token comment"># 修改列名和数据类型</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型<span class="token punctuation">;</span>\n<span class="token comment">-- 将stu表中的address字段名改为 addr，类型改为varchar(50)</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> stu change address addr <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n<span class="token comment"># 删除列</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 列名<span class="token punctuation">;</span>\n<span class="token comment">-- 将stu表中的addr字段 删除</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">drop</span> addr<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-dml" tabindex="-1"><a class="header-anchor" href="#四-dml" aria-hidden="true">#</a> 四, DML</h2><blockquote><p>DML主要是对数据进行增（insert）删（delete）改（update）操作。</p><p>MySQL数据库中的DML操作（Data Manipulation Language，数据操作语言）用于对数据库表中的数据进行增加、修改和删除操作。</p></blockquote><h3 id="_1-添加数据" tabindex="-1"><a class="header-anchor" href="#_1-添加数据" aria-hidden="true">#</a> 1, 添加数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span> 列<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n<span class="token identifier"><span class="token punctuation">`</span><span class="token punctuation">`</span></span><span class="token punctuation">`</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-修改数据" tabindex="-1"><a class="header-anchor" href="#_2-修改数据" aria-hidden="true">#</a> 2, 修改数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 列<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 列<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 条件\n<span class="token identifier"><span class="token punctuation">`</span><span class="token punctuation">`</span></span><span class="token punctuation">`</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-删除数据" tabindex="-1"><a class="header-anchor" href="#_3-删除数据" aria-hidden="true">#</a> 3, 删除数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件\n<span class="token identifier"><span class="token punctuation">`</span><span class="token punctuation">`</span></span><span class="token punctuation">`</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-dql" tabindex="-1"><a class="header-anchor" href="#五-dql" aria-hidden="true">#</a> 五, <strong>DQL</strong></h2><blockquote><p>DQL（Data Query Language，数据查询语言）是用于从数据库中检索数据的语言。在MySQL中，常用的DQL操作是使用SELECT语句进行查询。</p></blockquote><h3 id="_1-基础查询" tabindex="-1"><a class="header-anchor" href="#_1-基础查询" aria-hidden="true">#</a> 1, 基础查询</h3><p>查询完整语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> \n    字段列表\n    \n<span class="token keyword">FROM</span> \n    表名列表 \n    \n<span class="token keyword">WHERE</span> \n    条件列表\n    \n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>\n    分组字段\n    \n<span class="token keyword">HAVING</span>\n    分组后条件\n    \n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>\n    排序字段\n    \n<span class="token keyword">LIMIT</span>\n    分页限定\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了给大家演示查询的语句，我们需要先准备表及一些数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除stu表</span>\n<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment">-- 创建stu表</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>\n id <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token comment">-- 编号</span>\n name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 姓名</span>\n age <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token comment">-- 年龄</span>\n sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 性别</span>\n address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 地址</span>\n math <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 数学成绩</span>\n english <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 英语成绩</span>\n hire_date <span class="token keyword">date</span> <span class="token comment">-- 入学时间</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 添加数据</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>address<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">,</span>hire_date<span class="token punctuation">)</span> \n<span class="token keyword">VALUES</span> \n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;马运&#39;</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;杭州&#39;</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token string">&#39;1995-09-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;马花疼&#39;</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;深圳&#39;</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token string">&#39;1998-09-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;马斯克&#39;</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;香港&#39;</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token string">&#39;1999-09-02&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;柳白&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;湖南&#39;</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token string">&#39;1997-09-05&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;柳青&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;湖南&#39;</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">&#39;1998-09-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;刘德花&#39;</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;香港&#39;</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">&#39;1998-09-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;张学右&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;香港&#39;</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">&#39;1998-09-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;德玛西亚&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;南京&#39;</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token string">&#39;1994-09-02&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如图所示</strong></p><p><img src="' + _imports_17 + '" alt="image-20231229145818023"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询多个字段语法格式</span>\n<span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span> <span class="token comment">-- 查询所有数据</span>\n\n<span class="token comment"># 去除重复记录语法格式</span>\n<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>\n\n<span class="token comment"># 起别名语法格式</span>\n<span class="token keyword">AS</span>: <span class="token keyword">AS</span> 也可以省略\n\n<span class="token comment"># 查询name、age两列</span>\n<span class="token keyword">select</span> name<span class="token punctuation">,</span>age <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment"># 查询所有列的数据，列名的列表可以使用*替代</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n\n<span class="token comment">-- 上面语句中的*不建议大家使用，因为在这写\\*不方便我们阅读sql语句。我们写字段列表的话，可以添加注释对每一个字段进行说明。而在上课期间为了简约课程的时间，老师很多地方都会写*。</span>\n\n\n<span class="token comment"># 选择字段查询</span>\n<span class="token keyword">select</span> \n	name<span class="token punctuation">,</span> <span class="token comment">-- 姓名</span>\n	age  <span class="token comment">-- 年龄</span>\n<span class="token keyword">from</span> \n	stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询地址信息：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> address <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从上面的结果我们可以看到有重复的数据，我们也可以使用 <code>distinct</code> 关键字去重重复数据。去除重复记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> address <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询姓名、数学成绩、英语成绩。并通过as给math和english起别名（as关键字可以省略）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span>math <span class="token keyword">as</span> 数学成绩<span class="token punctuation">,</span>english <span class="token keyword">as</span> 英文成绩 <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n<span class="token keyword">select</span> name<span class="token punctuation">,</span>math 数学成绩<span class="token punctuation">,</span>english 英文成绩 <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-条件查询" tabindex="-1"><a class="header-anchor" href="#_2-条件查询" aria-hidden="true">#</a> 2, 条件查询</h3><p>条件查询语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>常用的条件查询符号</strong></p><ol><li><strong>相等比较</strong>： <ul><li><code>=</code>：等于。</li><li><code>&lt;=&gt;</code>：安全等于，可以用于比较NULL。</li><li><code>&lt;&gt;</code> 或 <code>!=</code>：不等于。</li></ul></li><li><strong>比较运算符</strong>： <ul><li><code>&lt;</code>：小于。</li><li><code>&gt;</code>：大于。</li><li><code>&lt;=</code>：小于等于。</li><li><code>&gt;=</code>：大于等于。</li></ul></li><li><strong>模糊匹配</strong>： <ul><li><code>LIKE</code>：用于模糊匹配，可以使用通配符 <code>%</code> 表示任意字符序列，<code>_</code> 表示任意单个字符。</li></ul></li><li><strong>范围查询</strong>： <ul><li><code>BETWEEN</code>：在某个范围内。</li><li><code>NOT BETWEEN</code>：不在某个范围内。</li><li><code>IN</code>：在给定的值列表中。</li><li><code>NOT IN</code>：不在给定的值列表中。</li></ul></li><li><strong>空值判断</strong>： <ul><li><code>IS NULL</code>：为空值。</li><li><code>IS NOT NULL</code>：不为空值。</li></ul></li><li><strong>逻辑运算符</strong>： <ul><li><code>AND</code>：逻辑与。</li><li><code>OR</code>：逻辑或。</li><li><code>NOT</code>：逻辑非。</li></ul></li><li><strong>正则表达式匹配</strong>： <ul><li><code>REGEXP</code> 或 <code>RLIKE</code>：使用正则表达式进行匹配。</li></ul></li><li><strong>字符串比较</strong>： <ul><li><code>STRCMP()</code>：用于比较两个字符串的大小。</li></ul></li></ol><p><strong><img src="' + _imports_18 + '" alt="image-20231229160114257"></strong></p></blockquote><p>根据我们创建的 stu 数据表, 进行以下查询语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询年龄大于20岁的学员信息：</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询年龄大于等于20岁的学员信息</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span>  age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">and</span>  age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n<span class="token comment">-- 上面语句中 &amp;&amp;  和  and  都表示并且的意思。建议使用 and 。</span>\n<span class="token comment">-- 也可以使用  between ... and 来实现上面需求</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">and</span> <span class="token number">30</span><span class="token punctuation">;</span>\n\n\n<span class="token comment"># 查询入学日期在&#39;1998-09-01&#39; 到 &#39;1999-09-01&#39; 之间的学员信息：</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> hire_date <span class="token operator">BETWEEN</span> <span class="token string">&#39;1998-09-01&#39;</span> <span class="token operator">and</span> <span class="token string">&#39;1999-09-01&#39;</span><span class="token punctuation">;</span>\n\n\n<span class="token comment"># 查询年龄等于18岁的学员信息：</span>\nelect <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询年龄不等于18岁的学员信息：</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">&lt;&gt;</span> <span class="token number">18</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询年龄等于18岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment"># 查询英语成绩为 null的学员信息</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> english <span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token comment">-- 这个语句是不行的</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> english <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> english <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- null值的比较不能使用 =  或者 != 。需要使用 is  或者 is not</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模糊查询使用like关键字，可以使用通配符进行占位:</p><ul><li>_ : 代表单个任意字符</li><li>% : 代表任意个数字符</li></ul><p>查询姓&#39;马&#39;的学员信息：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;马%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询第二个字是&#39;花&#39;的学员信息：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;_花%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询名字中包含 &#39;德&#39; 的学员信息：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;%德%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-排序查询" tabindex="-1"><a class="header-anchor" href="#_3-排序查询" aria-hidden="true">#</a> 3, 排序查询</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段名<span class="token number">1</span> <span class="token punctuation">[</span>排序方式<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>排序字段名<span class="token number">2</span> <span class="token punctuation">[</span>排序方式<span class="token number">2</span><span class="token punctuation">]</span> …<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述语句中的排序方式有两种，分别是：</p><ul><li>ASC ： 升序排列 （默认值）</li><li>DESC ： 降序排列</li><li>如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</li></ul><p>查询学生信息，按照年龄升序排列 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询学生信息，按照数学成绩降序排列：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> math <span class="token keyword">desc</span> <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">order</span> <span class="token keyword">by</span> math <span class="token keyword">desc</span> <span class="token punctuation">,</span> english <span class="token keyword">asc</span> <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-聚合函数" tabindex="-1"><a class="header-anchor" href="#_4-聚合函数" aria-hidden="true">#</a> 4, 聚合函数</h3><p>将一列数据作为一个整体，进行<strong>纵向计算</strong>。</p><p>可以理解为excel表中的所有学生的分数求和, 平均分.....等操作</p><p><strong>字段和数据类型</strong></p><p><img src="' + _imports_19 + '" alt="image-20231229161400589"></p><p><strong>数据表</strong></p><p><img src="' + _imports_20 + '" alt="image-20231229161456870"></p><p>现有一需求让我们求表中所有数据的数学成绩的总和。这就是对math字段进行纵向求和。聚合函数分类：</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>count(列名)</td><td>统计数量（一般选用不为null的列）</td></tr><tr><td>max(列名)</td><td>最大值</td></tr><tr><td>min(列名)</td><td>最小值</td></tr><tr><td>sum(列名)</td><td>求和</td></tr><tr><td>avg(列名)</td><td>平均值</td></tr></tbody></table><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 聚合函数名<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表<span class="token punctuation">;</span> <span class="token comment">-- null 值不参与所有聚合函数运算</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计班级一共有多少个学生：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面语句根据某个字段进行统计，如果该字段某一行的值为null的话，将不会被统计。所以可以在count(<em>) 来实现。</em> 表示所有字段数据，一行中也不可能所有的数据都为null，所以建议使用 count(*)：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment"># 查询数学成绩的最高分：</span>\n<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment"># 查询数学成绩的最低分：</span>\n<span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment"># 查询数学成绩的总分：</span>\n<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment"># 查询数学成绩的平均分：</span>\n<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n\n<span class="token comment"># 查询英语成绩的最低分：</span>\n<span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-分组查询" tabindex="-1"><a class="header-anchor" href="#_5-分组查询" aria-hidden="true">#</a> 5, 分组查询</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 分组前条件限定<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后条件过滤<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">--  分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查询男同学和女同学各自的数学平均分：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>\n\n<span class="token comment">-- 分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</span>\n<span class="token keyword">select</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>  <span class="token comment">-- 这里查询name字段就没有任何意义</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询男同学和女同学各自的数学平均分，以及各自人数：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2个的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> math <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token keyword">group</span> <span class="token keyword">by</span> sex <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>where 和 having 区别：</strong></p><ul><li>执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。</li><li>可判断的条件不一样：<strong>where 不能对聚合函数进行判断</strong>，having 可以。</li></ul><h3 id="_6-分页查询" tabindex="-1"><a class="header-anchor" href="#_6-分页查询" aria-hidden="true">#</a> 6, 分页查询</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span>  起始索引 <span class="token punctuation">,</span> 查询条目数<span class="token punctuation">;</span>\n\n<span class="token comment">-- 上述语句中的起始索引是从0开始</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从0开始查询，查询3条数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">limit</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每页显示3条数据，查询第1页数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">limit</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每页显示3条数据，查询第2页数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每页显示3条数据，查询第3页数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu <span class="token keyword">limit</span> <span class="token number">6</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从上面的练习推导出起始索引计算公式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>起始索引 = (当前页码 - 1) * 每页显示的条数\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h2><h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计" aria-hidden="true">#</a> 数据库设计</h2><h2 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h2><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h1 id="jdbc" tabindex="-1"><a class="header-anchor" href="#jdbc" aria-hidden="true">#</a> JDBC</h1><h2 id="一-jdbc-概述" tabindex="-1"><a class="header-anchor" href="#一-jdbc-概述" aria-hidden="true">#</a> 一, JDBC 概述</h2><h3 id="_1-jdbc概念" tabindex="-1"><a class="header-anchor" href="#_1-jdbc概念" aria-hidden="true">#</a> 1，JDBC概念</h3><p>JDBC就是使用Java语言操作关系型数据库的一套API。全称：( Java DataBase Connectivity <strong>) Java 数据库连接</strong>。</p><p><img src="' + _imports_21 + '" alt="image-20231229165527119"></p><p>同一套Java代码是无法操作不同的关系型数据库，因为每一个关系型数据库的底层实现细节都不一样。如果这样，问题就很大了，在公司中可以在开发阶段使用的是MySQL数据库，而上线时公司最终选用oracle数据库，我们就需要对代码进行大批量修改，这显然并不是我们想看到的。我们要做到的是<strong>同一套Java代码操作不同的关系型数据库</strong>，而此时sun公司就<strong>指定了一套标准接口（JDBC）</strong>，<strong>JDBC中定义了所有操作关系型数据库的规则</strong>。众所周知接口是无法直接使用的，我们需要使用接口的实现类，而这套实现类（称之为：驱动）就由各自的数据库厂商给出。</p><p><strong>JDBC总结：</strong></p><ul><li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li><li>可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li></ul><p><strong>JDBC好处：</strong></p><ul><li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li><li>可随时替换底层数据库，访问数据库的Java代码基本不变</li><li>以后编写操作数据库的代码只需要面向JDBC（接口），操作哪儿个关系型数据库就需要导入该数据库的驱动包，如需要操作MySQL数据库，就需要再项目中导入MySQL数据库的驱动包。</li></ul><h3 id="_2-jdbc快速入门" tabindex="-1"><a class="header-anchor" href="#_2-jdbc快速入门" aria-hidden="true">#</a> 2，JDBC快速入门</h3><p>通过Java操作数据库的流程如下：</p><p><img src="' + _imports_22 + '" alt="image-20231229165645598"></p><p>步骤：</p><ul><li>第一步：编写Java代码</li><li>第二步：Java代码将SQL发送到MySQL服务端</li><li>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</li><li>第四步：将SQL语句执行的结果返回给Java代码</li></ul><p>将mysql的驱动包放在模块下的lib目录（随意命名）下，并将该jar包添加为库文件：</p><p>在添加为库文件的时候，有如下三个选项</p><ul><li>Global Library ： 全局有效</li><li>Project Library : 项目有效</li><li>Module Library ： 模块有效</li></ul><p>编写如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * JDBC快速入门\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1. 注册驱动</span>\n        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//2. 获取连接</span>\n        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/db1&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//3. 定义sql</span>\n        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update account set money = 2000 where id = 1&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//4. 获取执行sql的对象 Statement</span>\n        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//5. 执行sql</span>\n        <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//受影响的行数</span>\n        <span class="token comment">//6. 处理结果</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//7. 释放资源</span>\n        stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-数据库连接池" tabindex="-1"><a class="header-anchor" href="#二-数据库连接池" aria-hidden="true">#</a> 二, 数据库连接池</h2><h2 id="三-案例" tabindex="-1"><a class="header-anchor" href="#三-案例" aria-hidden="true">#</a> 三, 案例</h2>', 217);
const _hoisted_218 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_218);
}
const JavaWeb_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Java-Web.html.vue"]]);
export {
  JavaWeb_html as default
};
