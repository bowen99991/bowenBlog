import{_ as o,r as p,o as l,c,d as n,e as s,f as e,b as t}from"./app-d8ed7807.js";const i="/bowenBlog/assets/image-20221128155611576-e2b7f238.png",r="/bowenBlog/assets/image-20221222160807470-045aa642.png",u="/bowenBlog/assets/image-20230601205717856-a9fb44aa.png",d="/bowenBlog/assets/image-20230601205750892-57190986.png",k="/bowenBlog/assets/2023-08-06-10-27-25-2c150367.png",h="/bowenBlog/assets/image-20230601205821422-e15ae324.png",m="/bowenBlog/assets/image-20230601205845446-b4e1493d.png",_="/bowenBlog/assets/image-20230601210029314-86b85f8e.png",g={},v=n("h2",{id:"_1-node-contains",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-node-contains","aria-hidden":"true"},"#"),s(" 1. Node.contains")],-1),b=n("p",null,[n("strong",null,"Node.contains()"),s(" 返回的是一个布尔值，来表示传入的节点是否为该节点的后代节点。")],-1),f=n("p",null,'可以用它来检查 DOM 元素是否含有某一类名：DOM.classList.contains("类名")',-1),w={id:"_2-鼠标滚轮事件",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_2-鼠标滚轮事件","aria-hidden":"true"},"#",-1),A={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_2-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/wheel_event#%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},C={id:"_3-getboundingclientrect",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_3-getboundingclientrect","aria-hidden":"true"},"#",-1),x={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_3-getboundingclientrect",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,[n("code",null,"Element.getBoundingClientRect()")],-1),D={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"DOMRect",-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport",target:"_blank",rel:"noopener noreferrer"},O={id:"_4-clienttop",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#_4-clienttop","aria-hidden":"true"},"#",-1),L={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_4-clienttop",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[s("一个元素顶部边框的宽度（以像素表示）。不包括顶部外边距或内边距。"),n("code",null,"clientTop"),s(" 是只读的。")],-1),W={id:"_5-domparser",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#_5-domparser","aria-hidden":"true"},"#",-1),P={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_5-domparser",target:"_blank",rel:"noopener noreferrer"},I={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMParser",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"方法：",-1),F={href:"https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"DOMParser.parseFromString()",-1),H=t(`<p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> doc <span class="token operator">=</span> domparser<span class="token punctuation">.</span><span class="token function">parseFromString</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回值：</p>`,3),G=n("strong",null,"mimeType",-1),V={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"Document",-1),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLDocument",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"XMLDocument",-1),$=n("p",null,"参数：",-1),K=n("p",null,[n("code",null,"string")],-1),Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"DOMString",-1),Z={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/HTML",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/XML",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/SVG",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,[n("code",null,"mimeType")],-1),en={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"DOMString",-1),on=t('<table><thead><tr><th style="text-align:left;"><code>mimeType</code></th><th style="text-align:left;">doc.constructor</th></tr></thead><tbody><tr><td style="text-align:left;"><code>text/html</code></td><td style="text-align:left;"><code>Document</code></td></tr><tr><td style="text-align:left;"><code>text/xml</code></td><td style="text-align:left;"><code>XMLDocument</code></td></tr><tr><td style="text-align:left;"><code>application/xml</code></td><td style="text-align:left;"><code>XMLDocument</code></td></tr><tr><td style="text-align:left;"><code>application/xhtml+xml</code></td><td style="text-align:left;"><code>XMLDocument</code></td></tr><tr><td style="text-align:left;"><code>image/svg+xml</code></td><td style="text-align:left;"><code>XMLDocument</code></td></tr></tbody></table>',1),pn=t(`<p><strong>使用方式：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> domparser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromString</span><span class="token punctuation">(</span>
    <span class="token string">&quot;&lt;div&gt;hello world&lt;/div&gt;&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;text/html&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domparser<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+'" alt="image-20221128155611576"></p>',3),ln={id:"_6-clientwidth-和-offsetwidth",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#_6-clientwidth-和-offsetwidth","aria-hidden":"true"},"#",-1),rn={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_6-clientwidth-%E5%92%8C-offsetwidth",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,[s("只读属性 "),n("strong",null,[n("code",null,"Element.clientWidth")]),s(" 对于内联元素以及没有 CSS 样式的元素为 0；否则，它是元素内部的宽度（以像素为单位）。该属性包括内边距（padding），"),n("strong",null,"但不包括边框（border）、外边距（margin）和垂直滚动条（如果存在）"),s("。")],-1),dn=n("p",null,[n("strong",null,[n("code",null,"HTMLElement.offsetWidth")]),s(" 是一个只读属性，返回一个元素的布局宽度。一个典型的（译者注：各浏览器的 offsetWidth 可能有所不同）offsetWidth 是测量"),n("strong",null,"包含"),s("元素的边框 (border)、水平线上的内边距 (padding)、竖直方向滚动条 (scrollbar)（如果存在的话）、以及 CSS 设置的宽度 (width) 的值。")],-1),kn=n("p",null,"总结：offset 全包含，client 只包含 padding",-1),hn={id:"_7-append-和-appendchild",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#_7-append-和-appendchild","aria-hidden":"true"},"#",-1),_n={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_7-append-%E5%92%8C-appendchild",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"Node.appendChild()",-1),bn=n("strong",null,"末尾",-1),fn=n("strong",null,"如果将被插入的节点已经存在于当前文档的文档树中",-1),wn=n("code",null,"appendChild()",-1),En=n("strong",null,"从原先的位置移动到新的位置",-1),An={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/append",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"Element.append",-1),Cn=n("code",null,"Element",-1),Bn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Node",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"Node",-1),zn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"DOMString",-1),Mn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"DOMString",-1),On={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Text",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"Text",-1),Ln=n("p",null,"差异：",-1),qn=n("code",null,"Element.append()",-1),Wn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"DOMString",-1),Pn=n("code",null,"Node.appendChild()",-1),In={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Node",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"Node",-1),Fn=n("code",null,"Element.append()",-1),Rn={href:"https://repl.it/FgPh/1",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"Node.appendChild()",-1),Gn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Node",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"Node",-1),Xn=n("li",null,[n("code",null,"Element.append()"),s(" 可以追加多个节点和字符串，而 "),n("code",null,"Node.appendChild()"),s(" 只能追加一个节点。")],-1),Jn={id:"_8-document加载阶段触发的事件",tabindex:"-1"},Un=n("a",{class:"header-anchor",href:"#_8-document加载阶段触发的事件","aria-hidden":"true"},"#",-1),$n={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_8-document%E5%8A%A0%E8%BD%BD%E9%98%B6%E6%AE%B5%E8%A7%A6%E5%8F%91%E7%9A%84%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Kn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// readystatechange</span>
<span class="token comment">// 当文档的 readyState 属性发生改变时，会触发 readystatechange 事件。</span>
<span class="token comment">// Document.readyState 属性描述了document 的加载状态。当该属性值发生变化时，会在 document 对象上触发 readystatechange 事件。</span>
<span class="token comment">// Document.readyState：loading（正在加载）-&gt; interactive（可交互）-&gt; complete（完成）</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;readystatechange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">readystatechange: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>document<span class="token punctuation">.</span>readyState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// DOMContentLoaded</span>
<span class="token comment">// 当纯 HTML 被完全加载以及解析时，DOMContentLoaded 事件会被触发，而不必等待样式表，图片或者子框架完成加载。</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// onload 可以window.onload调用</span>
<span class="token comment">// load 事件在整个页面及所有依赖资源如样式表和图片都已完成加载时触发。</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当一条会话历史记录被执行的时候将会触发页面显示 (pageshow) 事件。(这包括了后退/前进按钮操作，同时也会在 load 事件触发后初始化页面时触发)</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pageshow&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pageshow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当浏览器窗口关闭或者刷新时，会触发 beforeunload 事件。</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 按照标准规定取消默认事件。</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Chrome需要设置returnValue来取消默认事件</span>
    event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 取消默认事件后，当点击关闭或刷新页面时，当前页面不会直接关闭，可以点击确定按钮关闭或刷新，也可以取消关闭或刷新。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当文档或一个子资源正在被卸载时，触发 unload事件。</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unload&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;unload&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+'" alt="image-20221222160807470"></p><p>打开一个页面后，会依次触发：</p>',3),Qn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readystatechange_event",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/DOMContentLoaded_event",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/load_event",target:"_blank",rel:"noopener noreferrer"},ss=t(`<blockquote><p><code>load</code>事件也可以针对单个外部资源使用，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelect</span><span class="token punctuation">(</span><span class="token string">&#39;.img1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;img1加载完成！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,1),as={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/pageshow_event",target:"_blank",rel:"noopener noreferrer"},es=n("p",null,"关闭一个页面时，会依次触发：",-1),ts={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/beforeunload_event",target:"_blank",rel:"noopener noreferrer"},os={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/unload_event",target:"_blank",rel:"noopener noreferrer"},ps={id:"_9-注册dom事件的几种方式",tabindex:"-1"},ls=n("a",{class:"header-anchor",href:"#_9-注册dom事件的几种方式","aria-hidden":"true"},"#",-1),cs={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_9-%E6%B3%A8%E5%86%8Cdom%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},is=t(`<p>JS 提供了三种方式注册事件</p><p>方式 1：将事件注册写到元素上，<strong>这种方式基本被弃用</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">js代码</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式 2：使用 dom 属性注册事件</p><p>属性名为<code>on+事件类型</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监听事件</span>
dom<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 移除监听事件</span>
dom<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的特点是：</p><ul><li>优点：<strong>易于监听、覆盖、移除</strong></li><li>缺点：<strong>只能注册一个处理函数</strong></li><li>缺点：<strong>某些事件不支持用这种方式注册</strong>，比如<code>DOMContentLoaded</code></li><li>事件在冒泡阶段触发，不能更改触发阶段</li></ul>`,8),rs={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener",target:"_blank",rel:"noopener noreferrer"},us=t("<li>能注册多个处理函数</li><li>事件默认是冒泡阶段触发，可传递第三个参数（一个属性<code>capture</code>为<code>true</code>的<code>options</code><strong>对象</strong>或直接传递一个**<code>true</code>**）来设置事件捕获阶段触发。</li><li>可以配置事件只触发一次（第三个参数<code>options</code>中<code>once</code>为<code>true</code>时）</li>",3),ds={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener",target:"_blank",rel:"noopener noreferrer"},ks=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数3</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件捕获阶段触发</span>
dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数4</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">capture</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">once</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件捕获阶段触发且只会触发一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是<strong>最完美的事件注册方式</strong>，如果要移除用这种方式注册的事件，需要改写代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数1</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">handler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理函数2</span>
<span class="token punctuation">}</span>

dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> handler1<span class="token punctuation">)</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> handler2<span class="token punctuation">)</span><span class="token punctuation">;</span>

dom<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> handler1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除监听函数1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),hs={id:"_10-隐藏元素的几种方式",tabindex:"-1"},ms=n("a",{class:"header-anchor",href:"#_10-隐藏元素的几种方式","aria-hidden":"true"},"#",-1),_s={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_10-%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},gs=t("<ol><li><code>display:none</code> 元素不生成盒子，<strong>不显示并且占用空间，不可以触发DOM事件</strong></li><li><code>visibility:hidden</code>元素生成盒子，<strong>不显示但占用空间，不可以触发DOM事件</strong></li><li><code>opacity:0</code> 元素生成盒子，<strong>透明显示并且占用空间，可以触发DOM事件</strong>（如<code>click</code>）</li></ol>",1),vs={id:"_11-克隆元素clonenode",tabindex:"-1"},bs=n("a",{class:"header-anchor",href:"#_11-克隆元素clonenode","aria-hidden":"true"},"#",-1),fs={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_11-%E5%85%8B%E9%9A%86%E5%85%83%E7%B4%A0clonenode",target:"_blank",rel:"noopener noreferrer"},ws={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode",target:"_blank",rel:"noopener noreferrer"},Es=n("code",null,"cloneNode",-1),As=n("code",null,"true",-1),ys=n("code",null,"false",-1),Cs={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Text",target:"_blank",rel:"noopener noreferrer"},Bs=n("code",null,"Text",-1),xs=n("blockquote",null,[n("p",null,[s("注意：虽然"),n("code",null,"cloneNode"),s("的参数是可选的，但考虑到兼容性，你必须要为该方法设置 "),n("code",null,"deep"),s("参数！")])],-1),zs={id:"_12-获取元素属性几种方式和区别",tabindex:"-1"},Ds=n("a",{class:"header-anchor",href:"#_12-获取元素属性几种方式和区别","aria-hidden":"true"},"#",-1),Ms={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_12-%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},Ns=t(`<p>一个元素具有内置属性和自定义属性两种。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>小明<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 直接通过元素获取的属性值是系统经过处理后的完整值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// http://127.0.0.1:5500/list</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined  data-name不是内置属性</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>checkbox<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false 可获取元素标签上没有显示的内置属性</span>

    <span class="token comment">// 通过getAttribute获取的属性值与元素上写的原始值保持一直，也就是元素上显示是啥获取的就是啥</span>
    <span class="token comment">// 所以getAttribute无法获取元素上没有显示的属性值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /list</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小明</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>checkbox<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;checked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null checkbox元素上并没有明确写出checked属性</span>

    <span class="token comment">// dataset只能读取data-开头的自定义属性</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小明</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Os={id:"_13-element-outerhtmlopen-in-new-window",tabindex:"-1"},Ss=n("a",{class:"header-anchor",href:"#_13-element-outerhtmlopen-in-new-window","aria-hidden":"true"},"#",-1),Ls={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_13-element-outerhtml",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/outerHTML",target:"_blank",rel:"noopener noreferrer"},Ws={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element",target:"_blank",rel:"noopener noreferrer"},js=n("code",null,"element",-1),Ps=n("code",null,"outerHTML",-1),Is=t(`<p>简单来说，outerHTML属性就是获取一个元素的字符串形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对象格式: div</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串格式：&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Ts={id:"_14-dom尺寸和位置",tabindex:"-1"},Fs=n("a",{class:"header-anchor",href:"#_14-dom尺寸和位置","aria-hidden":"true"},"#",-1),Rs={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_14-dom%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},Hs=t('<table><thead><tr><th style="text-align:left;"><img src="'+u+'" alt="image-20230601205717856"></th><th style="text-align:left;"><img src="'+d+'" alt="image-20230601205750892"></th><th style="text-align:left;"><img src="'+k+'" alt="2023-08-06-10-27-25"></th></tr></thead><tbody><tr><td style="text-align:left;"><img src="'+h+'" alt="image-20230601205821422"></td><td style="text-align:left;"><img src="'+m+'" alt="image-20230601205845446"></td><td style="text-align:left;"><img src="'+_+'" alt="image-20230601210029314">getBoundingClientRect()</td></tr></tbody></table><blockquote><p>调用<code>dom.scrollTo(x, y)</code>可以设置元素的滚动位置，x 和 y 分别表示 scrollLeft 和 scrollTop</p><p>该方法通用元素回到元素顶部<code>dom.scrollTo(0, 0)</code>如果要监听元素的滚动，可以监听事件类型：scroll</p></blockquote>',2),Gs={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect",target:"_blank",rel:"noopener noreferrer"},Vs={id:"_15-label触发关联input的事件",tabindex:"-1"},Xs=n("a",{class:"header-anchor",href:"#_15-label触发关联input的事件","aria-hidden":"true"},"#",-1),Js={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_15-label%E8%A7%A6%E5%8F%91%E5%85%B3%E8%81%94input%E7%9A%84%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Us=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label<span class="token punctuation">&quot;</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  label<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  username<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>label</code>与<code>input</code>关联后，<strong>点击<code>label</code>会触发两次点击事件</strong>：</p><ul><li>一次是<code>label</code>的点击事件打印出<code>&#39;label&#39;</code></li><li>一次是<code>input</code>的点击事件打印出<code>&#39;username&#39;</code></li></ul><p>而点击<code>input</code>并不会触发<code>label</code>的点击事件，也就是说它们的关联是<strong>单向</strong>的。</p>`,4),$s={id:"_16-获取所有元素",tabindex:"-1"},Ks=n("a",{class:"header-anchor",href:"#_16-获取所有元素","aria-hidden":"true"},"#",-1),Qs={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_16-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0",target:"_blank",rel:"noopener noreferrer"},Ys=n("p",null,[n("code",null,"getElementsByTagName('*')"),s("可以获取所有元素，"),n("code",null,"*"),s("代表通配符。")],-1),Zs={id:"_17-获取含有多个指定类名的元素",tabindex:"-1"},na=n("a",{class:"header-anchor",href:"#_17-获取含有多个指定类名的元素","aria-hidden":"true"},"#",-1),sa={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_17-%E8%8E%B7%E5%8F%96%E5%90%AB%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%90%8D%E7%9A%84%E5%85%83%E7%B4%A0",target:"_blank",rel:"noopener noreferrer"},aa=t(`<p>获取所有 class 同时包括 &#39;red&#39; 和 &#39;test&#39; 的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;red test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),ea={id:"_18-获取元素-伪元素样式",tabindex:"-1"},ta=n("a",{class:"header-anchor",href:"#_18-获取元素-伪元素样式","aria-hidden":"true"},"#",-1),oa={href:"https://www.bakerchen.top/docs/leak-filling/DOM.html#_18-%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0-%E4%BC%AA%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},pa={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle",target:"_blank",rel:"noopener noreferrer"},la=n("code",null,"window.getComputedStyle()",-1),ca=n("strong",null,"所有计算样式",-1),ia=n("code",null,"style",-1),ra={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration",target:"_blank",rel:"noopener noreferrer"},ua=n("code",null,"CSSStyleDeclaration",-1),da=t(`<p>获取指定CSS属性的值，可以通过<code>getPropertyValue(propName)</code>API 或直接索引到对象，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&#39;text-overflow&#39;</span><span class="token punctuation">)</span>
<span class="token function">getComputedStyle</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;text-overflow&#39;</span><span class="token punctuation">]</span>
<span class="token function">getComputedStyle</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不使用第二个参数时，推荐添加<code>null</code></p></blockquote><p>第一个参数必须是 <code>Element</code>对象，第二个参数为要匹配的伪元素的字符串，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>h3<span class="token punctuation">,</span> <span class="token string">&#39;::after&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function ka(ha,ma){const a=p("ExternalLinkIcon");return l(),c("div",null,[v,b,f,n("h2",w,[E,s(),n("a",A,[s("#"),e(a)]),s("2. 鼠标滚轮事件")]),n("p",null,[n("a",y,[s("https://developer.mozilla.org/zh-CN/docs/Web/API/Element/wheel_event#属性open in new window"),e(a)])]),n("h2",C,[B,s(),n("a",x,[s("#"),e(a)]),s("3. getBoundingClientRect")]),n("p",null,[z,s(" 方法返回一个 "),n("a",D,[M,s("open in new window"),e(a)]),s(" 对象，其提供了元素的大小及其相对于"),n("a",N,[s("视口open in new window"),e(a)]),s("的位置。")]),n("h2",O,[S,s(),n("a",L,[s("#"),e(a)]),s("4. clientTop")]),q,n("h2",W,[j,s(),n("a",P,[s("#"),e(a)]),s("5. DOMParser")]),n("p",null,[n("a",I,[s("DOMParseropen in new window"),e(a)]),s("可以将存储在字符中的 XML 或 HTML 源代码解析为一个 DOM （Document），")]),T,n("p",null,[n("a",F,[R,s(" (en-US)open in new window"),e(a)])]),H,n("p",null,[s("基于 "),G,s(" 参数，返回 "),n("a",V,[X,s("open in new window"),e(a)]),s(" 或 "),n("a",J,[U,s("open in new window"),e(a)]),s(" 或其他文档类型。")]),$,n("ul",null,[n("li",null,[K,n("p",null,[s("要解析的 "),n("a",Q,[Y,s("open in new window"),e(a)]),s("。它必须包含 "),n("a",Z,[s("HTMLopen in new window"),e(a)]),s("、"),n("a",nn,[s("xmlopen in new window"),e(a)]),s("、xhtml+xml 或 "),n("a",sn,[s("svgopen in new window"),e(a)]),s(" 文档。")])]),n("li",null,[an,n("p",null,[s("一个 "),n("a",en,[tn,s("open in new window"),e(a)]),s("。此字符串确定方法返回值的类。可能的值如下:")]),on])]),pn,n("h2",ln,[cn,s(),n("a",rn,[s("#"),e(a)]),s("6. clientWidth 和 offsetWidth")]),un,dn,kn,n("h2",hn,[mn,s(),n("a",_n,[s("#"),e(a)]),s("7. append 和 appendChild")]),n("p",null,[n("a",gn,[s("**"),vn,s("**open in new window"),e(a)]),s(" 方法将一个节点附加到指定父节点的子节点列表的"),bn,s("处。"),fn,s("，那么 "),wn,s(" 只会将它"),En,s("（不需要事先移除要移动的节点）。")]),n("p",null,[n("a",An,[s("**"),yn,s("**open in new window"),e(a)]),s(" 方法在 "),Cn,s("的最后一个子节点之后插入一组 "),n("a",Bn,[xn,s("open in new window"),e(a)]),s(" 对象或 "),n("a",zn,[Dn,s("open in new window"),e(a)]),s(" 对象。被插入的 "),n("a",Mn,[Nn,s("open in new window"),e(a)]),s(" 对象等价为 "),n("a",On,[Sn,s("open in new window"),e(a)]),s(" 节点。")]),Ln,n("ul",null,[n("li",null,[qn,s("允许追加 "),n("a",Wn,[jn,s("open in new window"),e(a)]),s(" 对象，而 "),Pn,s(" 只接受 "),n("a",In,[Tn,s("open in new window"),e(a)]),s(" 对象。")]),n("li",null,[Fn,s(),n("a",Rn,[s("没有返回值open in new window"),e(a)]),s("，而 "),Hn,s(" 返回追加的 "),n("a",Gn,[Vn,s("open in new window"),e(a)]),s(" 对象。")]),Xn]),n("h2",Jn,[Un,s(),n("a",$n,[s("#"),e(a)]),s("8. document加载阶段触发的事件")]),Kn,n("ul",null,[n("li",null,[n("p",null,[n("a",Qn,[s("readystatechangeopen in new window"),e(a)])]),n("blockquote",null,[n("p",null,[n("a",Yn,[s("document.readyStateopen in new window"),e(a)])])])]),n("li",null,[n("p",null,[n("a",Zn,[s("DOMContentLoadedopen in new window"),e(a)])])]),n("li",null,[n("p",null,[n("a",ns,[s("loadopen in new window"),e(a)])]),ss]),n("li",null,[n("p",null,[n("a",as,[s("pageshowopen in new window"),e(a)])])])]),es,n("ul",null,[n("li",null,[n("a",ts,[s("beforeunloadopen in new window"),e(a)])]),n("li",null,[n("a",os,[s("unloadopen in new window"),e(a)])])]),n("h2",ps,[ls,s(),n("a",cs,[s("#"),e(a)]),s("9. 注册DOM事件的几种方式")]),is,n("p",null,[s("方式 3：使用 "),n("a",rs,[s("addEventListener"),e(a)]),s(" 方法注册事件")]),n("ul",null,[us,n("li",null,[s("可以进行更多的配置，详见"),n("a",ds,[s("MDNopen in new window"),e(a)])])]),ks,n("h2",hs,[ms,s(),n("a",_s,[s("#"),e(a)]),s("10. 隐藏元素的几种方式")]),gs,n("h2",vs,[bs,s(),n("a",fs,[s("#"),e(a)]),s("11. 克隆元素cloneNode")]),n("p",null,[n("a",ws,[Es,s("open in new window"),e(a)]),s("返回调用该方法的节点的一个副本，它具有一个布尔参数，参数为"),As,s("时表示深度克隆（该节点的所有后代节点也都会被克隆），默认为"),ys,s("只克隆该节点本身（该节点所包含的所有文本也不会被克隆，因为文本本身也是一个或多个的"),n("a",Cs,[Bs,s("open in new window"),e(a)]),s("节点。）")]),xs,n("h2",zs,[Ds,s(),n("a",Ms,[s("#"),e(a)]),s("12. 获取元素属性几种方式和区别")]),Ns,n("h2",Os,[Ss,s(),n("a",Ls,[s("#"),e(a)]),s("13. "),n("a",qs,[s("element.outerHTMLopen in new window"),e(a)])]),n("p",null,[n("a",Ws,[js,s("open in new window"),e(a)]),s(" DOM 接口的"),Ps,s("属性获取描述元素（包括其后代）的序列化 HTML 片段（字符串格式）。它也可以设置为用从给定字符串解析的节点替换元素。")]),Is,n("h2",Ts,[Fs,s(),n("a",Rs,[s("#"),e(a)]),s("14. DOM尺寸和位置")]),Hs,n("p",null,[s("上图中"),n("a",Gs,[s("Element.getBoundingClientRect()open in new window"),e(a)]),s("获得的 top、left、right、bottom 均相对于视口")]),n("h2",Vs,[Xs,s(),n("a",Js,[s("#"),e(a)]),s("15. label触发关联input的事件")]),Us,n("h2",$s,[Ks,s(),n("a",Qs,[s("#"),e(a)]),s("16. 获取所有元素")]),Ys,n("h2",Zs,[na,s(),n("a",sa,[s("#"),e(a)]),s("17. 获取含有多个指定类名的元素")]),aa,n("h2",ea,[ta,s(),n("a",oa,[s("#"),e(a)]),s("18. 获取元素/伪元素样式")]),n("p",null,[n("a",pa,[la,s("open in new window"),e(a)]),s("获取一个元素（或伪元素）的"),ca,s("的结果，返回的"),ia,s("是一个实时的 "),n("a",ra,[ua,s("open in new window"),e(a)]),s(" 对象，当元素的样式更改时，它会自动更新本身。")]),da])}const ga=o(g,[["render",ka],["__file","plugin.html.vue"]]);export{ga as default};
