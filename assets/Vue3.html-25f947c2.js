import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, e as createVNode, d as createStaticVNode } from "./app-39e77124.js";
const _imports_0 = "/bowenBlog/assets/image-20231107190813439-0f09cd8a.png";
const _imports_1 = "/bowenBlog/assets/image-20231107190824305-a7fbd5d7.png";
const _imports_2 = "/bowenBlog/assets/image-20231107190829549-16e65511.png";
const _imports_3 = "/bowenBlog/assets/image-20231107190922329-40ac5170.png";
const _imports_4 = "/bowenBlog/assets/image-20231107191047318-f99d6984.png";
const _imports_5 = "/bowenBlog/assets/image-20231107191133982-b6320572.png";
const _imports_6 = "/bowenBlog/assets/image-20231107191358350-1b0e0388.png";
const _imports_7 = "/bowenBlog/assets/image-20231107192853212-d2a46bcd.png";
const _imports_8 = "/bowenBlog/assets/image-20231107192921548-6357f7b1.png";
const _imports_9 = "/bowenBlog/assets/image-20231107193118362-896ba0e4.png";
const _imports_10 = "/bowenBlog/assets/image-20231107193128082-facc7d44.png";
const _imports_11 = "/bowenBlog/assets/image-20231107194051590-08ebcd09.png";
const _imports_12 = "/bowenBlog/assets/image-20231107194103639-3d3ded42.png";
const _imports_13 = "/bowenBlog/assets/image-20231107194132716-f8156210.png";
const _imports_14 = "/bowenBlog/assets/image-20231107194204271-4b23786c.png";
const _imports_15 = "/bowenBlog/assets/image-20231107194335199-8ffd3bbc.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h2><hr><h2 id="一-vue3" tabindex="-1"><a class="header-anchor" href="#一-vue3" aria-hidden="true">#</a> 一, VUe3</h2><h3 id="_1-vue3-介绍" tabindex="-1"><a class="header-anchor" href="#_1-vue3-介绍" aria-hidden="true">#</a> 1, Vue3 介绍</h3><p>Vue3文档地址：https://cn.vuejs.org/</p><p><strong>渐进式,JavaScript框架</strong></p><p><strong>Vue特点:</strong></p><p>易学易用</p><ul><li>API设计简单，好上手，也是Vue很火的原因</li></ul><p>性能出色</p><ul><li>proxy，精准更新，diff算法....</li></ul><p>灵活多变</p><ul><li>渐进式，可大可小的项目都可以做，可以逐步集成很多第三方的依赖</li></ul><p><strong>你是如何理解vue2？</strong></p><ul><li>vue是数据驱动视图（响应式原理）</li><li>vue2是选项式API（一堆的选项）</li><li>组件化开发（自定义属性，自定义事件，自定义插槽，选项式API，组件通信）</li><li>十几个指令（内置指令），指令的本质是对DOM操作的封装......</li><li>五大内置组件（slot, transition, component, keep-alive, transition-group）</li><li>复用技巧（组件，混入，过滤器，自定义指令，插件，原型链....）</li><li>图：组件的生命周期图，MVVM图，Vuex图，响应式原理图...</li></ul><p><strong>技术栈官网</strong></p><ul><li>技术栈：Vue3+VueRouter4+Pinia2+Vant3/ElementPlus</li><li>1、Vue3官网：https://vuejs.org/</li><li>2、VueRouter(V4)：https://router.vuejs.org/</li><li>3、Pinia(V2)：https://pinia.vuejs.org/</li><li>4、Vite构建工具：https://vitejs.dev/</li><li>5、ElementPlus：https://element-plus.gitee.io/zh-CN/</li><li>6、Vant(v3)：https://vant-contrib.gitee.io/vant/#/zh-CN</li></ul><p><strong>Vue3 相较于 Vue2 有了哪些升级,有什么区别?</strong></p><blockquote><p>Vue 3 相较于 Vue 2 进行了一些重要的升级和改进。以下是 Vue 3 相对于 Vue 2 的主要区别和改进：</p><ol><li><p><strong>更高的性能：</strong> Vue 3 在内部进行了重写和优化，提供了更快的渲染速度和更小的包大小。通过使用更高效的虚拟 DOM 算法（Faster DOM），以及优化的编译器，Vue 3 在性能方面有了显著的提升。</p></li><li><p><strong>Composition API：</strong> Vue 3 引入了 Composition API，这是一种新的组合式 API 风格，提供了更灵活和可组合的组件逻辑复用方式。相较于 Vue 2 的 Options API，Composition API 更好地支持逻辑的组合和代码的重用，使得组件更易于维护和测试。</p></li><li><p><strong>更好的 TypeScript 支持：</strong> Vue 3 对 TypeScript 的支持更加完善，并且内部使用了 TypeScript 进行开发。Vue 3 中引入了一些新的类型和增强的类型推导，使得在使用 TypeScript 开发 Vue 应用时更加友好和高效。</p></li><li><p><strong>Teleport（传送门）：</strong> Vue 3 引入了 Teleport 组件，它允许将组件的内容渲染到 DOM 中的任意位置。这对于创建弹出框、模态框、通知等需要在 DOM 中的不同位置渲染的场景非常有用。</p></li><li><p><strong>Fragment（片段）：</strong> Vue 3 支持使用 <code>&lt;template&gt;</code> 标签以外的方式来定义组件的根元素，例如直接使用文本节点或多个根级元素。这样可以更灵活地组织组件的结构，而不再限制于单个根元素。</p></li><li><p><strong>更好的 Tree-Shaking 支持：</strong> Vue 3 的模块被重构为更好地支持 Tree-Shaking（摇树优化），这意味着在构建应用程序时可以更有效地剔除未使用的代码，减少最终打包的体积。</p></li><li><p><strong>全局 API 的变更：</strong> Vue 3 中的一些全局 API 发生了变化，例如 <code>Vue.component</code> 被替换为 <code>app.component</code>，<code>Vue.filter</code> 被替换为 <code>app.config.globalProperties.$filter</code> 等。这些变化主要是为了提高代码的可靠性、可维护性和可扩展性。</p></li></ol><p>Vue 3 的目标是提供更好的性能、更灵活的开发体验和更好的 TypeScript 支持，以便开发者能够构建更加高效、可维护和可扩展的 Vue 应用程序。</p></blockquote><h3 id="_2-创建-vue3项目" tabindex="-1"><a class="header-anchor" href="#_2-创建-vue3项目" aria-hidden="true">#</a> 2, 创建 Vue3项目</h3><p><strong>npm 方式创建 Vue</strong></p><p><em>直接安装了最新的vue版本</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vue@latest\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>', 23);
const _hoisted_24 = {
  href: "https://github.com/vuejs/create-vue",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_25 = /* @__PURE__ */ createStaticVNode('<p><img src="' + _imports_0 + '" alt="image-20231107190813439"></p><p>进入项目，安装依赖，运行项目，如下：</p><p><img src="' + _imports_1 + '" alt="image-20231107190824305"></p><p><img src="' + _imports_2 + '" alt="image-20231107190829549"></p><p>项目运行由vite打包, 所以项目启动相较于vue2 速度提升非常多</p><p><strong>CDN 的方式引入 Vue</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 CDN 使用 Vue 时，不涉及“构建步骤”。这使得设置更加简单，并且可以用于增强静态的 HTML 或与后端框架集成。但是，你将无法使用单文件组件 (SFC) 语法。</p><p><em>可能出现的问题: 如果报错, 是因为请求连接失败, 网络原因(需要开启代理, 科学上网!)</em></p><p><strong>使用全局构建版本</strong></p><p>上面的链接使用了<em>全局构建版本</em>的 Vue，该版本的所有顶层 API 都以属性的形式暴露在了全局的 <code>Vue</code> 对象上。这里有一个使用全局构建版本的例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> Vue\n  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello Vue!&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 ES 模块构建版本</strong></p>', 13);
const _hoisted_38 = {
  href: "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_39 = /* @__PURE__ */ createStaticVNode('<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#39;</span>\n  \n  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello Vue!&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们使用了 <code>&lt;script type=&quot;module&quot;&gt;</code>，且导入的 CDN URL 指向的是 Vue 的 <strong>ES 模块构建版本</strong>。</p><p>使用 vscode 打开,查看项目架构:</p><p><img src="' + _imports_3 + '" alt="image-20231107190922329"></p><p><strong>目录分析：</strong></p><ul><li>vite.config.js 是Vite官方配置文件，各种配置参考Vite官网。</li><li>index.html 是SPA挂载的根页面</li><li>main.js 是入口文件</li><li>App.vue 是根组件（SFC单文件组织）</li><li>src 文件夹 是源码目录 <ul><li>views 放路由级别的组件</li><li>compoents 放通用组件</li><li>router 放路由相关的</li><li>store 放仓库相关的</li><li>api 封装API接口相关的</li><li>utils 放工具函数</li></ul></li></ul><p>在开发Vue3，在VSCode中还需要安装插件，如下：</p><p><strong>volar</strong></p><p><img src="' + _imports_4 + '" alt="image-20231107191047318"></p><p>互动教程，如下：</p><p><img src="' + _imports_5 + '" alt="image-20231107191133982"></p><h3 id="_3-声明式渲染" tabindex="-1"><a class="header-anchor" href="#_3-声明式渲染" aria-hidden="true">#</a> 3, 声明式渲染</h3><p><strong>四种语法范式：</strong></p><ul><li>选项式写法：完成支持Vue2写法，我们之前学习的Vue2的写法就是选项式写法</li><li>组合式写法：只使用setup()，把组合式API写在setup中就是组合式写法</li><li>选项式+组合式写法：可以使用setup()+选项式写法</li><li>组合式语法糖写法：在script标签上添加setup，只支持组合式写法，规避选项式写法。</li></ul><p><strong>选项式写法：</strong></p><p><img src="' + _imports_6 + '" alt="image-20231107191358350"></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>选项式API写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组合式写法:(了解)</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>选项式API写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">// ref是组合式API</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Vue3的选项写法：对Vue2范式完全兼容，可以同时使用setup和选项，也可只使用setup。</span>\n  <span class="token comment">// 官方已经不推荐使用这种选项写法了。选项写法，都有对应的组合API来实现。</span>\n  <span class="token comment">// 解读setup这个选项：相当于Vue2中的created()，可以理解成是组件生命周期的第一阶段；setup(props,context)，context表示上下文，为什么在setup中要有一个上下文对象，因为在setup选项中没有this。</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// setup是组合式API的入口</span>\n    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//num是调用ref函数之后的结果，它是一个对象</span>\n    <span class="token comment">// 不能直接num++  num.value才是响应式数据的值</span>\n    <span class="token comment">// 在模板中，它会自动的.value</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      num<span class="token punctuation">,</span>\n      add<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>选项式和组合式混写：（了解）</strong></p><p><img src="' + _imports_7 + '" alt="image-20231107192853212"></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>选项式+组合式API写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 非常不推荐这种写法</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 组合选项</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      num<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组合式语法糖写法(推荐):</strong></p><p><img src="' + _imports_8 + '" alt="image-20231107192921548"></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>组合式语法糖写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>官方文档教程，如下：</p><p><img src="' + _imports_9 + '" alt="image-20231107193118362"></p><p><img src="' + _imports_10 + '" alt="image-20231107193128082"></p><h3 id="_4-tribute绑定" tabindex="-1"><a class="header-anchor" href="#_4-tribute绑定" aria-hidden="true">#</a> 4, tribute绑定</h3><p>试着把一个动态的 <code>class</code> 绑定添加到这个 <code>&lt;h1&gt;</code> 上，并使用 <code>titleClass</code> 的 ref 作为它的值。如果绑定正确，文字将会变为红色。代码如下：</p><p><img src="' + _imports_11 + '" alt="image-20231107194051590"></p><h3 id="_5-表单绑定与双向绑定" tabindex="-1"><a class="header-anchor" href="#_5-表单绑定与双向绑定" aria-hidden="true">#</a> 5, 表单绑定与双向绑定</h3><p><img src="' + _imports_12 + '" alt="image-20231107194103639"></p><p><img src="' + _imports_13 + '" alt="image-20231107194132716"></p><p><strong>什么是双向绑定？什么是单向绑定？</strong></p><ul><li>单向绑定：数据驱动视图，通过ref或reactive定义的响应式数据，数据发生变化时，模板会自动刷新。</li><li>双向绑定：数据驱动视图，视图驱动数据。 v-model=@input + :value</li></ul><h3 id="_6-条件渲染" tabindex="-1"><a class="header-anchor" href="#_6-条件渲染" aria-hidden="true">#</a> 6, 条件渲染</h3><p><img src="' + _imports_14 + '" alt="image-20231107194204271"></p><h3 id="_7-列表渲染" tabindex="-1"><a class="header-anchor" href="#_7-列表渲染" aria-hidden="true">#</a> 7, 列表渲染</h3><p>直接写todo案例，如下：</p><p><img src="' + _imports_15 + '" alt="image-20231107194335199"></p><p>参考代码,如下</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addTodo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newTodo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token comment">&lt;!-- &lt;button @click=&quot;addTodo&quot;&gt;Add Todo&lt;/button&gt; --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Add Todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      {{ todo.text }}\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>removeTodo(todo)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 给每个 todo 对象一个唯一的 id</span>\n\n<span class="token keyword">const</span> newTodo <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Learn HTML&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Learn JavaScript&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Learn Vue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">removeTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// console.log(&quot;todo:&quot;,todo.id);</span>\n  <span class="token keyword">let</span> idx <span class="token operator">=</span> todos<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  todos<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newTodo<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;输入框不能为空~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  todos<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> newTodo<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  newTodo<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么 key 的值不能为索引?</p><blockquote><p>在 Vue 中，<code>key</code> 是用于跟踪每个节点的身份的特殊属性。当 Vue 执行更新时，它会使用 <code>key</code> 来检测哪些组件或元素已被修改、添加或删除。</p><p>使用索引作为 <code>key</code> 的值可能会导致一些问题，尤其是在存在动态列表或条件渲染时。以下是为什么不建议将索引作为 <code>key</code> 的值的原因：</p><ol><li><strong>不稳定的排序</strong>：索引是基于元素在列表中的位置，而不是元素自身的唯一标识。如果列表中的元素被重新排序，索引可能会发生变化，这可能会导致 Vue 错误地认为某些元素已经被替换或删除，从而导致意外的行为。</li><li><strong>重复的键</strong>：如果列表中存在重复的索引，即多个元素具有相同的 <code>key</code> 值，Vue 将无法准确地区分它们，从而导致渲染错误或意外的行为。</li><li><strong>性能问题</strong>：Vue 使用 <code>key</code> 来优化渲染过程。通过使用稳定且唯一的 <code>key</code>，Vue 可以更快地识别出哪些元素发生了变化，并进行针对性的更新操作。如果使用索引作为 <code>key</code>，则可能会导致 Vue 需要检查更多的元素，从而降低性能。</li></ol><p>避免以上的问题, 建议使用<strong>具有稳定且唯一标识的值作为 <code>key</code></strong> .</p><p>例如: 每个元素在列表中的唯一标识符,数据库中唯一的ID,或其他具有唯一性的属性作为 key 的值.</p></blockquote><h3 id="_8-计算属性" tabindex="-1"><a class="header-anchor" href="#_8-计算属性" aria-hidden="true">#</a> 8, 计算属性</h3><h3 id="_9-生命周期与模板引用" tabindex="-1"><a class="header-anchor" href="#_9-生命周期与模板引用" aria-hidden="true">#</a> 9, 生命周期与模板引用</h3><h3 id="_10-侦听器" tabindex="-1"><a class="header-anchor" href="#_10-侦听器" aria-hidden="true">#</a> 10, 侦听器</h3><h3 id="_11-组件" tabindex="-1"><a class="header-anchor" href="#_11-组件" aria-hidden="true">#</a> 11, 组件</h3><h3 id="_12-props" tabindex="-1"><a class="header-anchor" href="#_12-props" aria-hidden="true">#</a> 12, props</h3><h3 id="_13-emits" tabindex="-1"><a class="header-anchor" href="#_13-emits" aria-hidden="true">#</a> 13, Emits</h3><h3 id="_14-slot" tabindex="-1"><a class="header-anchor" href="#_14-slot" aria-hidden="true">#</a> 14, Slot</h3>', 52);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("这一指令将会安装并执行 "),
      createBaseVNode("a", _hoisted_24, [
        createTextVNode("create-vue"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("，它是 Vue 官方的项目脚手架工具。你将会看到一些诸如 TypeScript 和测试支持之类的可选功能提示：")
    ]),
    _hoisted_25,
    createBaseVNode("p", null, [
      createTextVNode("在本文档的其余部分我们使用的主要是 "),
      createBaseVNode("a", _hoisted_38, [
        createTextVNode("ES 模块"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("语法。现代浏览器大多都已原生支持 ES 模块。因此我们可以像这样通过 CDN 以及原生 ES 模块使用 Vue：")
    ]),
    _hoisted_39
  ]);
}
const Vue3_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Vue3.html.vue"]]);
export {
  Vue3_html as default
};
