import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, e as createVNode, d as createStaticVNode } from "./app-a4e641d3.js";
const _imports_0 = "/bowenBlog/assets/image-20231101100918367-64813998.png";
const _imports_1 = "/bowenBlog/assets/image-20231208123239597-c345e41c.png";
const _imports_2 = "/bowenBlog/assets/image-20231208123257799-37e9491f.png";
const _imports_3 = "/bowenBlog/assets/image-20231208123338844-6cbe8fdd.png";
const _imports_4 = "/bowenBlog/assets/image-20231208124152330-a28c711c.png";
const _imports_5 = "/bowenBlog/assets/image-20231208124520954-6d6d7147.png";
const _imports_6 = "/bowenBlog/assets/image-20231208124549727-71479566.png";
const _imports_7 = "/bowenBlog/assets/image-20231208124645410-7cf5cdfd.png";
const _imports_8 = "/bowenBlog/assets/image-20231208124655562-32a7863b.png";
const _imports_9 = "/bowenBlog/assets/image-20231208124705561-702b1686.png";
const _imports_10 = "/bowenBlog/assets/image-20231208125100924-f0f8603f.png";
const _imports_11 = "/bowenBlog/assets/image-20231208125201219-5c888e87.png";
const _imports_12 = "/bowenBlog/assets/image-20231208125221569-b01c3e52.png";
const _imports_13 = "/bowenBlog/assets/image-20231208125234453-2492b6f5.png";
const _imports_14 = "/bowenBlog/assets/image-20231208125258413-4afe8dd3.png";
const _imports_15 = "/bowenBlog/assets/image-20231208125428686-a8b04cbd.png";
const _imports_16 = "/bowenBlog/assets/image-20231208125600566-ffbe0794.png";
const _imports_17 = "/bowenBlog/assets/image-20231208125718226-9563ca93.png";
const _imports_18 = "/bowenBlog/assets/image-20231208130037138-de0ec9a4.png";
const _imports_19 = "/bowenBlog/assets/image-20231208125836201-0082c64b.png";
const _imports_20 = "/bowenBlog/assets/image-20231208125849279-c54d8f49.png";
const _imports_21 = "/bowenBlog/assets/image-20231208130157185-43984a49.png";
const _imports_22 = "/bowenBlog/assets/image-20231208130405323-576470fe.png";
const _imports_23 = "/bowenBlog/assets/image-20231208130810207-54d2ae3a.png";
const _imports_24 = "/bowenBlog/assets/image-20231208130824202-7d4e8089.png";
const _imports_25 = "/bowenBlog/assets/image-20231208130851143-b28f6980.png";
const _imports_26 = "/bowenBlog/assets/image-20231208130916697-3cdd0e2d.png";
const _imports_27 = "/bowenBlog/assets/image-20231208130936839-c7e2ddee.png";
const _imports_28 = "/bowenBlog/assets/image-20231208131137790-7a732a24.png";
const _imports_29 = "/bowenBlog/assets/image-20231208131202165-60c17912.png";
const _imports_30 = "/bowenBlog/assets/image-20231208131209478-c3dd8773.png";
const _imports_31 = "/bowenBlog/assets/image-20231208131222541-c0518df6.png";
const _imports_32 = "/bowenBlog/assets/image-20231208131250628-ffa51518.png";
const _imports_33 = "/bowenBlog/assets/image-20231208131259751-ce1dddb3.png";
const _imports_34 = "/bowenBlog/assets/image-20231208131405195-a60f1e71.png";
const _imports_35 = "/bowenBlog/assets/image-20231208131443123-c931c3c6.png";
const _imports_36 = "/bowenBlog/assets/image-20231208131511147-c8bf8072.png";
const _imports_37 = "/bowenBlog/assets/image-20231208131539518-7e194603.png";
const _imports_38 = "/bowenBlog/assets/image-20231208131611433-5d0e4b8c.png";
const _imports_39 = "/bowenBlog/assets/image-20231208131742972-b7baa811.png";
const _imports_40 = "/bowenBlog/assets/image-20231208131857717-45b37795.png";
const _imports_41 = "/bowenBlog/assets/image-20231208150747057-19843d77.png";
const _imports_42 = "/bowenBlog/assets/image-20231208151043467-406241d1.png";
const _imports_43 = "/bowenBlog/assets/image-20231208151330183-73c8acd1.png";
const _imports_44 = "/bowenBlog/assets/image-20231208151503898-72f1994d.png";
const _imports_45 = "/bowenBlog/assets/image-20231208151552205-fdd24c07.png";
const _imports_46 = "/bowenBlog/assets/image-20231208151755579-a44a42bd.png";
const _imports_47 = "/bowenBlog/assets/image-20231208151926548-419267f6.png";
const _imports_48 = "/bowenBlog/assets/image-20231208152444222-4018b59d.png";
const _imports_49 = "/bowenBlog/assets/image-20231208152624511-fdb7b8b0.png";
const _imports_50 = "/bowenBlog/assets/image-20231208152635901-609aa928.png";
const _imports_51 = "/bowenBlog/assets/image-20231208152728732-cd56370e.png";
const _imports_52 = "/bowenBlog/assets/image-20231208152743919-64ca16e9.png";
const _imports_53 = "/bowenBlog/assets/image-20231208153120207-86bbcf71.png";
const _imports_54 = "/bowenBlog/assets/image-20231208153159995-64668332.png";
const _imports_55 = "/bowenBlog/assets/image-20231208153333058-9dc63521.png";
const _imports_56 = "/bowenBlog/assets/image-20231208153457264-69dc0575.png";
const _imports_57 = "/bowenBlog/assets/image-20231208153555116-6f11fb1e.png";
const _imports_58 = "/bowenBlog/assets/image-20231208153920877-49eb50d9.png";
const _imports_59 = "/bowenBlog/assets/image-20231208153946878-9683abf8.png";
const _imports_60 = "/bowenBlog/assets/image-20231208165750081-261a67f6.png";
const _imports_61 = "/bowenBlog/assets/image-20231208165759475-7dd70313.png";
const _imports_62 = "/bowenBlog/assets/image-20231208165846234-40137a52.png";
const _imports_63 = "/bowenBlog/assets/image-20231208165838854-11577f04.png";
const _imports_64 = "/bowenBlog/assets/image-20231208170026039-f887b0ce.png";
const _imports_65 = "/bowenBlog/assets/image-20231208170230996-b9455dbe.png";
const _imports_66 = "/bowenBlog/assets/image-20231208170251325-9ea6f0dc.png";
const _imports_67 = "/bowenBlog/assets/image-20231208170349633-2dd1298b.png";
const _imports_68 = "/bowenBlog/assets/image-20231208170342000-f6c520e7.png";
const _imports_69 = "/bowenBlog/assets/image-20231208170400927-927b91ea.png";
const _imports_70 = "/bowenBlog/assets/image-20231208170508100-423c0c3e.png";
const _imports_71 = "/bowenBlog/assets/image-20231208170534439-7fda3a75.png";
const _imports_72 = "/bowenBlog/assets/image-20231208170606005-0d6b1eb7.png";
const _imports_73 = "/bowenBlog/assets/image-20231208170714793-6b1f6962.png";
const _imports_74 = "/bowenBlog/assets/image-20231208170840087-aa16c4df.png";
const _imports_75 = "/bowenBlog/assets/image-20231208170904153-3a9f62be.png";
const _imports_76 = "/bowenBlog/assets/image-20231208170958604-9a7416d3.png";
const _imports_77 = "/bowenBlog/assets/image-20231208171144013-e389e469.png";
const _imports_78 = "/bowenBlog/assets/image-20231208171155424-62344461.png";
const _imports_79 = "/bowenBlog/assets/image-20231208171230246-85f74832.png";
const _imports_80 = "/bowenBlog/assets/image-20231208171407029-c4d118e2.png";
const _imports_81 = "/bowenBlog/assets/image-20231208171417143-4fe776ae.png";
const _imports_82 = "/bowenBlog/assets/image-20231208171445290-0e9e6a80.png";
const _imports_83 = "/bowenBlog/assets/image-20231208171451294-b8970017.png";
const _imports_84 = "/bowenBlog/assets/image-20231208171545848-2288eead.png";
const _imports_85 = "/bowenBlog/assets/image-20231208171559986-6dacf39f.png";
const _imports_86 = "/bowenBlog/assets/image-20231208172159340-aa757bec.png";
const _imports_87 = "/bowenBlog/assets/image-20231101101418359-53e8228b.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="一-前端工程化-git" tabindex="-1"><a class="header-anchor" href="#一-前端工程化-git" aria-hidden="true">#</a> 一, 前端工程化-Git</h2><hr><h3 id="_1-什么是-git-提交" tabindex="-1"><a class="header-anchor" href="#_1-什么是-git-提交" aria-hidden="true">#</a> 1, 什么是 Git 提交？</h3><p>Git 提交是指将你的代码保存到 Git 本地存储库，就像用 Word 写长篇论文时进行保存文件一样。每次 Git 提交时都会创建一个唯一的版本，除了记录本次新增或发生修改的代码外，还可以包含提交信息，来概括自己这次提交的改动内容。</p><p>如下图,就是一次 git 提交</p><p><img src="' + _imports_0 + '" alt="image-20231101100918367"></p><h3 id="_2-git-提交的作用" tabindex="-1"><a class="header-anchor" href="#_2-git-提交的作用" aria-hidden="true">#</a> 2, Git 提交的作用</h3><p>Git 提交有很多作用，我将它分为 <strong>基础用法</strong> 和 其他妙用</p><p><strong>基本作用</strong></p><blockquote><p>Git 提交最基本的作用就是维护项目的历史记录。每次提交都会记录代码库的状态，包括文件的添加、修改和删除；还包括一些提交信息，比如提交时间、描述等。这使得我们可以通过查看所有的历史提交来追溯项目的开发进度和历程，了解每个提交中都发生了什么变化。</p></blockquote><p><strong>版本控制</strong></p><blockquote><p>另一个 Git 提交的基本作用是版本控制。每个提交都代表了代码库的一个版本，这意味着开发者可以随时切换代码版本进行开发，恢复旧版本的代码、或者撤销某次提交的代码改动。</p><p>推荐新手使用可视化工具而不是 Git 命令进行版本的切换和撤销提交，在不了解 Git 工作机制的情况下使用命令操作很容易出现问题。</p></blockquote><h3 id="_3-git-提交分类" tabindex="-1"><a class="header-anchor" href="#_3-git-提交分类" aria-hidden="true">#</a> 3, Git 提交分类</h3><h4 id="_1-本地版本控制" tabindex="-1"><a class="header-anchor" href="#_1-本地版本控制" aria-hidden="true">#</a> 1）本地版本控制</h4><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS</p><p><img src="' + _imports_1 + '" alt="image-20231208123239597"></p><h4 id="_2-集中版本控制" tabindex="-1"><a class="header-anchor" href="#_2-集中版本控制" aria-hidden="true">#</a> 2）集中版本控制</h4><ul><li>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</li><li>用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本</li><li>所有数据都保存在单一的服务器上，如果这个服务器会损坏(有很大的风险), 这样就会丢失所有的数据，需要定期备份</li><li>代表产品：SVN、CVS、VSS</li></ul><p><img src="' + _imports_2 + '" alt="image-20231208123257799"></p><h4 id="_3-分布式版本控制" tabindex="-1"><a class="header-anchor" href="#_3-分布式版本控制" aria-hidden="true">#</a> 3）分布式版本控制</h4><ul><li>所有版本信息仓库全部同步到本地的每个用户</li><li>可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push 到相应的服务器或其他用户那里。</li><li>每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据</li><li>更加安全不会因为服务器损坏或者网络问题，造成不能工作的情况</li><li>代表软件: Git</li></ul><p><img src="' + _imports_3 + '" alt="image-20231208123338844"></p><h3 id="_4-git的下载和安装" tabindex="-1"><a class="header-anchor" href="#_4-git的下载和安装" aria-hidden="true">#</a> 4，Git的下载和安装</h3><p>官网下载git软件：https://git-scm.com/downloads</p><p>下载慢，可以到镜像下载 : http://npm.taobao.org/mirrors/git-for-windows/</p><p>打开Git Bah Here，输入git --version命令，可以查看git软件的版本</p><h3 id="_5-git资料" tabindex="-1"><a class="header-anchor" href="#_5-git资料" aria-hidden="true">#</a> 5，Git资料</h3><p>命令地址: https://gitee.com/all-about-git</p><p>Git 互动学习：https://oschina.gitee.io/learn-git-branching/</p><h2 id="二-git本地仓库的管理" tabindex="-1"><a class="header-anchor" href="#二-git本地仓库的管理" aria-hidden="true">#</a> 二，==Git本地仓库的管理==</h2><h3 id="_1-生成本地仓库并简单操作" tabindex="-1"><a class="header-anchor" href="#_1-生成本地仓库并简单操作" aria-hidden="true">#</a> 1，生成本地仓库并简单操作</h3><p>wc要开始创业做一个项目，项目叫wcyx。如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 初始化本地管理, 添加git\n<span class="token function">git</span> init \n\n-- 查看代码文件的状态\n<span class="token function">git</span> status\n\n-- 把工作区代码添加到暂存区<span class="token punctuation">(</span>. 表示全部, 也可以指定文件名<span class="token punctuation">)</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n\n-- 查看版本\n<span class="token function">git</span> log\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个git本地仓库中有三个区域，如下：</p><p><img src="' + _imports_4 + '" alt="image-20231208124152330"></p><p><strong>四个区域与之对应关系</strong>：</p><ul><li>本地仓库 之 工作目录（Working Directory） <ul><li>工作区，就是你平时存放项目代码的地方</li></ul></li><li>本地仓库 之 暂存区（Stage/Index） <ul><li>暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li></ul></li><li>本地仓库 之 资源库/版本库（Repository或Git Directory） <ul><li>版本库，就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li></ul></li><li>远程仓库（Remote Directory） <ul><li>远程仓库，托管代码的服务器(比如Github/Gitee)，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul></li></ul><p>把工作的代码扔到暂存区，如下 ：</p><p><img src="' + _imports_5 + '" alt="image-20231208124520954"></p><p>然后，把暂存区的内容扔到版本库中，形成版本，在形成版本之前，需要告诉git，你是谁，如果不告诉，会报错，配置如下：</p><p><img src="' + _imports_6 + '" alt="image-20231208124549727"></p><p>指令成功执行，会生成C:\\Users\\Administrator.gitconfig,</p><p>通过命令（查看所有配置（git config -l / --list））查看之</p><p><img src="' + _imports_7 + '" alt="image-20231208124645410"></p><p>然后才能生成版本，如下：</p><p><img src="' + _imports_8 + '" alt="image-20231208124655562"></p><p>再次强调区域关系：</p><p><img src="' + _imports_9 + '" alt="image-20231208124705561"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：<strong>暂存区</strong>，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：<strong>本地仓库</strong>，一个存放在本地的版本库；HEAD只是当前的开发分支(branch)</li><li>Stash：隐藏，是一个<strong>工作状态保存栈</strong>，用于保存/恢复WorkSpace中的临时状态。</li></ul><p>补充相关命令：</p><ul><li>查看所有配置 git config -l 或 git config --list</li><li>查看系统配置 git config --system -l 或 git config --system --list 配置文件在Git\\etc\\gitconfig</li><li>查看当前用记配置 git config --global -l 或 git config --global --list 配置文件在C:\\User\\admin.gitconfig</li></ul><h3 id="_2-拓展新功能并回退到某个版本" tabindex="-1"><a class="header-anchor" href="#_2-拓展新功能并回退到某个版本" aria-hidden="true">#</a> 2，拓展新功能并回退到某个版本</h3><p>假定wc想在项目中新增直播的功能</p><p>然后还是进行本地仓库的操作，形成版本，如下：</p><p><img src="' + _imports_10 + '" alt="image-20231208125100924"></p><p>项目上线，如下:</p><p>现在由于某个原因，直接功能需要下架，需要回到之前版本，现在版本如下：</p><p><img src="' + _imports_11 + '" alt="image-20231208125201219"></p><p>看图，如下：</p><p><img src="' + _imports_12 + '" alt="image-20231208125221569"></p><p><img src="' + _imports_13 + '" alt="image-20231208125234453"></p><p>现在要回退到 V1 版本，如下：</p><p><img src="' + _imports_14 + '" alt="image-20231208125258413"></p><p>现在又由于某个原因，又想上线直播，现在工作区的代码中没有直播功能，可能通过<strong>git reflog</strong> 查看所有的版本。如下：</p><p><img src="' + _imports_15 + '" alt="image-20231208125428686"></p><p>==总结一下:==</p><ul><li>git init 初始化一个本地仓库，要想让git管理代码，必须初始化成一个本地仓库</li><li>git add . 把工作区的代码扔到暂存区，此时并没有形成版本</li><li>git commit -m &#39;xx&#39; 把暂存区的代码扔到的版本库，形成版本</li><li>git log 查看当前版本</li><li>git reflog 查看所有的版本</li><li>git reset --hard &#39;版本号&#39; 回退到某个版本</li></ul><p>完善一下刚才那个图，如下：</p><p><img src="' + _imports_16 + '" alt="image-20231208125600566"></p><h3 id="_3-分支和冲突解决" tabindex="-1"><a class="header-anchor" href="#_3-分支和冲突解决" aria-hidden="true">#</a> 3，分支和冲突解决</h3><p>现在wc想在项目中集成ddz的功能，这个ddz模块是一个尝试性模块。之前开的版本，都是在主分支上开的，这个主分支，叫master分析，如下：</p><p><img src="' + _imports_17 + '" alt="image-20231208125718226"></p><p>在vscode中也可以查看分支</p><p><img src="' + _imports_18 + '" alt="image-20231208130037138"></p><p>现在wc想单独创建一个新的环境去开发ddz，此时，wc就可以去创业一个子分支，多个分支就相当于多个环境，彼此是互不影响的，现在去查看分支，如下：</p><p><img src="' + _imports_19 + '" alt="image-20231208125836201"></p><p>创建一个新分支，如下：</p><p><img src="' + _imports_20 + '" alt="image-20231208125849279"></p><p>现在我们写代码都是在dev分支上写的，是不会影响master分支上的代码的</p><p>开发完成后，形成版本，如下：</p><p><img src="' + _imports_21 + '" alt="image-20231208130157185"></p><p>要知道，我们上线的代码是master分支上的代码，如下：</p><p>现在突然遇到线上bug了，直播模块有bug，需要再开一个bug修复的分支，现在切到master分支，在master分支基本上开一个bug修复分支，如下：</p><p><img src="' + _imports_22 + '" alt="image-20231208130405323"></p><p>在master分支基本上开一个bug修复分支，如下：</p><p><img src="' + _imports_23 + '" alt="image-20231208130810207"></p><p><img src="' + _imports_24 + '" alt="image-20231208130824202"></p><p>开始在 bug 分支上去修改bug，如下：</p><p>形成一个版本，如下：</p><p><img src="' + _imports_25 + '" alt="image-20231208130851143"></p><p>画图如下：</p><p><img src="' + _imports_26 + '" alt="image-20231208130916697"></p><p>需要注意，这个时候线上分支的 bug 是没有修复的，此时，我们需要把我们新建的 bug 分支上的版本合并到 master 分支，如下：</p><p><img src="' + _imports_27 + '" alt="image-20231208130936839"></p><p>此时，线上的master分支代码的bug就被修复了，如下：</p><p><img src="' + _imports_28 + '" alt="image-20231208131137790"></p><p>bug分支修复了，就可以把bug分支删除了，如下：</p><p><img src="' + _imports_29 + '" alt="image-20231208131202165"></p><p><img src="' + _imports_30 + '" alt="image-20231208131209478"></p><p>现在wc还需要回去开发它的ddz模块，如下：</p><p><img src="' + _imports_31 + '" alt="image-20231208131222541"></p><p>当前的操作都是在dev分支上进行的，形成版本，如下：</p><p><img src="' + _imports_32 + '" alt="image-20231208131250628"></p><p>画图，如下：</p><p><img src="' + _imports_33 + '" alt="image-20231208131259751"></p><p>测试完ddz模块后，发现没有问题，需要合并 到master分支，上线，此时就需要把dev分支合并到master分支了，此时会遇到问题。</p><p>答：冲突。分析如下：</p><p>在dev分支上，如下：</p><p>现在把dev分支上的版本合并到master分支上，会产生冲突，因为同一个文件的同一行代码不一样，尝试合并如下：</p><p><img src="' + _imports_34 + '" alt="image-20231208131405195"></p><p>查看代码如下：</p><p><img src="' + _imports_35 + '" alt="image-20231208131443123"></p><p>需要手动的去修改冲突，如下：</p><p>修改完后，还需要形成版本，如下：</p><p><img src="' + _imports_36 + '" alt="image-20231208131511147"></p><p><img src="' + _imports_37 + '" alt="image-20231208131539518"></p><p>总结：最简单的git工作流，如下：</p><p><img src="' + _imports_38 + '" alt="image-20231208131611433"></p><h2 id="三-远程仓库的管理-个人开发" tabindex="-1"><a class="header-anchor" href="#三-远程仓库的管理-个人开发" aria-hidden="true">#</a> 三，远程仓库的管理（个人开发）</h2><p>前面说的一系列操作都是在 wc 在家中开发的，wc现在有钱了，想租一个办公室办公司，现在对于 wc 来说，有两个场地。wc 就可以借助远程仓库对项目进行管理，如下：</p><h3 id="_1-把家中的代码传送到云端" tabindex="-1"><a class="header-anchor" href="#_1-把家中的代码传送到云端" aria-hidden="true">#</a> 1，把家中的代码传送到云端</h3><p>需要仓库一个远程仓库，如下：</p><p>现在远程仓库和本地仓库没有关系，需要让它们关联起来，如下：</p><p><img src="' + _imports_39 + '" alt="image-20231208131742972"></p><p>然后，wc在家中需要把代码推送到远程仓库，如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 推送到远程仓库\n<span class="token function">git</span> push origin master\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_40 + '" alt="image-20231208131857717"></p><p>查看远程仓库</p><h3 id="_2-第一次到公司在新电脑上下载代码" tabindex="-1"><a class="header-anchor" href="#_2-第一次到公司在新电脑上下载代码" aria-hidden="true">#</a> 2，第一次到公司在新电脑上下载代码</h3><p>wc到公司后，在新电脑上，拉远程仓库的代码，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token punctuation">(</span> 远程仓库地址<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>克隆下后，查看分支，如下：</p><p><img src="' + _imports_41 + '" alt="image-20231208150747057"></p><p>wc在公司中要开发了，操作如下：</p><p><img src="' + _imports_42 + '" alt="image-20231208151043467"></p><p>wc就在dev分支上开发项目了</p><p>一天过去了，下班了，提交代码到远程仓库，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 在 dev 分支下\n<span class="token function">git</span> push origin dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看远程仓库，如下：</p><p>xxx.git.com</p><h3 id="_3-下班回家继续写代码" tabindex="-1"><a class="header-anchor" href="#_3-下班回家继续写代码" aria-hidden="true">#</a> 3，下班回家继续写代码</h3><p>回家，家的电脑上没有炸金花的代码，如下：</p><p>在家也是在dev分支上开发，他还需要把远程仓库的炸金化的代码拉下来</p><p><img src="' + _imports_43 + '" alt="image-20231208151330183"></p><p>查看家中电脑上的代码，如下：</p><p>继续开发代码，如下：</p><p>提交代码，如下：</p><p><img src="' + _imports_44 + '" alt="image-20231208151503898"></p><h3 id="_4-第二天到公司继续开发并上线-公司" tabindex="-1"><a class="header-anchor" href="#_4-第二天到公司继续开发并上线-公司" aria-hidden="true">#</a> 4，第二天到公司继续开发并上线（公司）</h3><p>到公司，需要把昨天晚上在家中的写的代码拉下来，如下：</p><p><img src="' + _imports_45 + '" alt="image-20231208151552205"></p><p>继续开发，如下：</p><p>提交代码，如下：</p><p>今天晚上，在公司，项目要上线了，要加班了，需要把dev分支合并到master分支，上线，如下：</p><p><img src="' + _imports_46 + '" alt="image-20231208151755579"></p><p>完成部署上线</p><h3 id="_5-第二天夜里开发一个模块忘记提交代码-公司" tabindex="-1"><a class="header-anchor" href="#_5-第二天夜里开发一个模块忘记提交代码-公司" aria-hidden="true">#</a> 5，第二天夜里开发一个模块忘记提交代码（公司）</h3><p>项目上线了，wc又打算开发了一个新功能，切换分支如下：</p><p><img src="' + _imports_47 + '" alt="image-20231208151926548"></p><p>拉代码，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在公司编写代码如下：</p><p>提交代码，如下：</p><p>然后就回家了。</p><h3 id="_6-到家后-睡不着-想继续写代码" tabindex="-1"><a class="header-anchor" href="#_6-到家后-睡不着-想继续写代码" aria-hidden="true">#</a> 6，到家后，睡不着，想继续写代码</h3><p>到家后，睡不着，想继续写代码，要知道，在公司写的最后一个版本的代码并没有推送到远程仓库。此时他应该怎么办？</p><p>答：<strong>此时，可以做一些其它功能的开发。</strong></p><p>到家了，打开家里的电脑，先pull一下，然后切到dev分支，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，可以做一些其它模块的开发，如下：</p><p>开始提交代码，准备睡觉，如下：</p><p>看远程仓库，如下：</p><p>休息</p><h3 id="_7-第三天-到公司还要写代码" tabindex="-1"><a class="header-anchor" href="#_7-第三天-到公司还要写代码" aria-hidden="true">#</a> 7，第三天，到公司还要写代码</h3><p>先看远程仓库，如下：</p><p><img src="' + _imports_48 + '" alt="image-20231208152444222"></p><p>再看公司的本地仓库，如下：</p><p>开始拉代码，把昨天夜里写的代码拉到本地，合并，合并时，就可能产生冲突。如下：</p><p><img src="' + _imports_49 + '" alt="image-20231208152624511"></p><p>通过vscode手动解决冲突，如下：</p><p><img src="' + _imports_50 + '" alt="image-20231208152635901"></p><p>解决如下：</p><p><img src="' + _imports_51 + '" alt="image-20231208152728732"></p><p>解决完后，形成一个版本，如下：</p><p><img src="' + _imports_52 + '" alt="image-20231208152743919"></p><p>看远程仓库，如下：</p><h3 id="_8-第三天晚上要继续写代码" tabindex="-1"><a class="header-anchor" href="#_8-第三天晚上要继续写代码" aria-hidden="true">#</a> 8，第三天晚上要继续写代码</h3><p>到家后，要继续写代码，先pull一下，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后....</p><ul><li>补充一个命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">git</span> pull origin dev \n  等价于\n  <span class="token function">git</span> fetch origin dev\n  <span class="token function">git</span> merge origin/dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>画图总结：</p><p><img src="' + _imports_53 + '" alt="image-20231208153120207"></p><p>再去补充一个命令，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 用于查看分支的提交历史，并以图形的方式展示分支之间的关系。\n<span class="token function">git</span> log <span class="token parameter variable">--graph</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_54 + '" alt="image-20231208153159995"></p><h2 id="四-团队协作开发-多人开发" tabindex="-1"><a class="header-anchor" href="#四-团队协作开发-多人开发" aria-hidden="true">#</a> 四，==团队协作开发==（多人开发）</h2><h3 id="_1-git的工作流" tabindex="-1"><a class="header-anchor" href="#_1-git的工作流" aria-hidden="true">#</a> 1，git的工作流</h3><p>同于项目比较好，也赚到钱了，wc需要招人继续开发其它项目（新项目），此时就进入到多人协作开发的模式。git工作流，如下：</p><p><img src="' + _imports_55 + '" alt="image-20231208153333058"></p><h3 id="_2-创建项目并邀请成员" tabindex="-1"><a class="header-anchor" href="#_2-创建项目并邀请成员" aria-hidden="true">#</a> 2，创建项目并邀请成员</h3><p>创建组织如下：</p><p><img src="' + _imports_56 + '" alt="image-20231208153457264"></p><p>在组件下面，可以创建N个仓库，如下：</p><p><img src="' + _imports_57 + '" alt="image-20231208153555116"></p><p>现此，我们需要邀请xq加入组织，如下：</p><h3 id="_3-组长初始化项目和dev分支" tabindex="-1"><a class="header-anchor" href="#_3-组长初始化项目和dev分支" aria-hidden="true">#</a> 3，组长初始化项目和dev分支</h3><p>组长先去克隆远程仓库，如下：</p><p>开始初始化项目，配置项目，如下：</p><p>提交代码如下：</p><p>当前在master分支上就有一个版本了，如下 ：</p><p>看远程仓库，如下：</p><p>看图，如下：</p><p><img src="' + _imports_58 + '" alt="image-20231208153920877"></p><p>开一个dev分支，写一个基础模块，如下：</p><p><img src="' + _imports_59 + '" alt="image-20231208153946878"></p><p>开始开发项目，如下：</p><p>提交代码如下：</p><p><img src="' + _imports_60 + '" alt="image-20231208165750081"></p><p>看图，如下：</p><p><img src="' + _imports_61 + '" alt="image-20231208165759475"></p><h3 id="_4-小强加入开发" tabindex="-1"><a class="header-anchor" href="#_4-小强加入开发" aria-hidden="true">#</a> 4，小强加入开发</h3><p>小强先需要克隆代码，如下：</p><p>小强需要开一个xq的分支，在xq的分支上，如下：</p><p><img src="' + _imports_62 + '" alt="image-20231208165846234"></p><p>开始开发，如下：</p><p><img src="' + _imports_63 + '" alt="image-20231208165838854"></p><p>需要把代码提交到远程仓库，如下：</p><p>看一下远程仓库，如下：</p><p><img src="' + _imports_64 + '" alt="image-20231208170026039"></p><h3 id="_5-小强申请合并xq分支到dev分支" tabindex="-1"><a class="header-anchor" href="#_5-小强申请合并xq分支到dev分支" aria-hidden="true">#</a> 5，小强申请合并xq分支到dev分支</h3><p>xq分支的代码如下：</p><p>dev分支如下：</p><p>在小强提出申请之前，配置如下，配置的目的是，防止小强恶意合并，如下：</p><p><img src="' + _imports_65 + '" alt="image-20231208170230996"></p><p><img src="' + _imports_66 + '" alt="image-20231208170251325"></p><p>小强需要提出code review申请，如下：</p><p><img src="' + _imports_67 + '" alt="image-20231208170349633"></p><p><img src="' + _imports_68 + '" alt="image-20231208170342000"></p><p>合并时就有冲突，需要解决冲突。原因，如下：</p><p><img src="' + _imports_69 + '" alt="image-20231208170400927"></p><p>小强解决：</p><p>答：在xq分支上marge一个dev分支，有冲突，需要解决冲突。再提交代码。远程仓库代码如下：</p><p><img src="' + _imports_70 + '" alt="image-20231208170508100"></p><p>还需要把xq分支合并到dev分支，wc查看pr如下：</p><p><img src="' + _imports_71 + '" alt="image-20231208170534439"></p><p>查看dev分支，如下：</p><p><img src="' + _imports_72 + '" alt="image-20231208170606005"></p><h3 id="_6-wc拉代码-检查代码" tabindex="-1"><a class="header-anchor" href="#_6-wc拉代码-检查代码" aria-hidden="true">#</a> 6，wc拉代码，检查代码</h3><p><img src="' + _imports_73 + '" alt="image-20231208170714793"></p><p>得到了xq的写功能模块，代码如下：</p><p><img src="' + _imports_74 + '" alt="image-20231208170840087"></p><p>继续看图，如下：</p><p><img src="' + _imports_75 + '" alt="image-20231208170904153"></p><h3 id="_7-把dev分支上的代码合并到master分支" tabindex="-1"><a class="header-anchor" href="#_7-把dev分支上的代码合并到master分支" aria-hidden="true">#</a> 7，把dev分支上的代码合并到master分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提交代码，如下：</p><p><img src="' + _imports_76 + '" alt="image-20231208170958604"></p><p>查看远程仓库</p><p>部署上线</p><h3 id="_8-给-master-分支打-tag" tabindex="-1"><a class="header-anchor" href="#_8-给-master-分支打-tag" aria-hidden="true">#</a> 8，给 master 分支打 tag</h3><p>什么是tag：</p><p><img src="' + _imports_77 + '" alt="image-20231208171144013"></p><p>开始打tag，如下：</p><p><img src="' + _imports_78 + '" alt="image-20231208171155424"></p><p>查看远程仓库，如下：</p><p>公司的运维人员，就可以去下载代码上线了。如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone -b v1.0 地址\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-总结提测预发布" tabindex="-1"><a class="header-anchor" href="#_9-总结提测预发布" aria-hidden="true">#</a> 9，总结提测预发布</h3><p>功能都是在dev分支上开发，如下：</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <img src="' + _imports_79 + '" alt="image-20231208171230246"></h3><p><strong>公司的团队leader可以执行如下的步骤：</strong></p><p>第一步：基于dev分支创建一个release分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev\n<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> release  <span class="token comment">#  创建分支并切换</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：测试</p><p>第三步：合并到master分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>使用pull request\n或\n本地将release合并到master分支\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步：在master分支上打tag</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1 <span class="token parameter variable">-m</span> <span class="token string">&#39;第一版：直播功能&#39;</span>\n<span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第五步：运维人员就可以下载代码上线了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone  <span class="token parameter variable">-b</span> v1 地址\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五-其它" tabindex="-1"><a class="header-anchor" href="#五-其它" aria-hidden="true">#</a> 五，其它</h2><h3 id="_1-给开源软件贡献代码" tabindex="-1"><a class="header-anchor" href="#_1-给开源软件贡献代码" aria-hidden="true">#</a> 1，给开源软件贡献代码</h3><p>第一步：fork源码，将别人的源代码拷贝到自己的仓库</p><p><img src="' + _imports_80 + '" alt="image-20231208171407029"></p><p><img src="' + _imports_81 + '" alt="image-20231208171417143"></p><p>第二步：在自己仓库进行代码修改</p><p>第三步：给源代码的作者提交（pull request）</p><h3 id="_2-免密登录" tabindex="-1"><a class="header-anchor" href="#_2-免密登录" aria-hidden="true">#</a> 2，免密登录</h3><p>方式一：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>之前：https://gitee.com/tubie/layui-vue.git\n之前：git remote add origin https://gitee.com/tubie/layui-vue.git\n\n要想免密登录，修改url,如下：\nhttps://用户名:密码@gitee.com/tubie/layui-vue.git\n现在关联：git remote add origin https://用户名:密码@gitee.com/tubie/layui-vue.git\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><p><img src="' + _imports_82 + '" alt="image-20231208171445290"></p><p><img src="' + _imports_83 + '" alt="image-20231208171451294"></p><p>方式三：使用ssh实现（推荐）</p><p>参考：https://blog.csdn.net/weixin_51080921/article/details/123550636</p><p>如果要使用ssh免密登录，需要走git协议，如下：</p><p><img src="' + _imports_84 + '" alt="image-20231208171545848"></p><h3 id="_3-git忽略文件" tabindex="-1"><a class="header-anchor" href="#_3-git忽略文件" aria-hidden="true">#</a> 3，==git忽略文件==</h3><p>有些文件，不想让git进行管理，创建一个.gitignore，如下：</p><p><img src="' + _imports_85 + '" alt="image-20231208171559986"></p><p>这个文件也很重要。更多参考：https://github.com/github/gitignore</p><p>例如，一个简单的 <code>.gitignore</code> 文件示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 忽略所有 .log 文件</span>\n*.log\n\n<span class="token comment"># 忽略 temp 目录</span>\n/temp/\n\n<span class="token comment"># 不忽略 temp/test.txt 文件</span>\n<span class="token operator">!</span>/temp/test.txt\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-issues" tabindex="-1"><a class="header-anchor" href="#_4-issues" aria-hidden="true">#</a> 4，issues</h3><p>(讨论)文档以及任务管理。如下：</p><p><img src="' + _imports_86 + '" alt="image-20231208172159340"></p><h3 id="_5-wiki" tabindex="-1"><a class="header-anchor" href="#_5-wiki" aria-hidden="true">#</a> 5，wiki</h3><p>项目的文档。</p><h2 id="git-约定式提交" tabindex="-1"><a class="header-anchor" href="#git-约定式提交" aria-hidden="true">#</a> Git 约定式提交</h2><hr><p>概述</p>', 313);
const _hoisted_314 = {
  href: "http://semver.org/lang/zh-CN",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_315 = /* @__PURE__ */ createStaticVNode('<p>提交说明的结构如下所示：</p><p>原文:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>译文:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;类型&gt;[可选 范围]: &lt;描述&gt;\n\n[可选 正文]\n\n[可选 脚注]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><p><img src="' + _imports_87 + '" alt="image-20231101101418359"></p><h3 id="_1-提交规范" tabindex="-1"><a class="header-anchor" href="#_1-提交规范" aria-hidden="true">#</a> 1, 提交规范</h3>', 8);
const _hoisted_323 = {
  href: "https://www.ietf.org/rfc/rfc2119.txt",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_324 = /* @__PURE__ */ createStaticVNode("<li>每个提交都<strong>必须</strong>使用类型字段前缀，它由一个名词构成，诸如 <code>feat</code> 或 <code>fix</code> ， 其后接<strong>可选的</strong>范围字段，<strong>可选的</strong> <code>!</code>，以及<strong>必要的</strong>冒号（英文半角）和空格。</li><li>当一个提交为应用或类库实现了新功能时，<strong>必须</strong>使用 <code>feat</code> 类型。</li><li>当一个提交为应用修复了 bug 时，<strong>必须</strong>使用 <code>fix</code> 类型。</li><li>范围字段<strong>可以</strong>跟随在类型字段后面。范围<strong>必须</strong>是一个描述某部分代码的名词，并用圆括号包围，例如： <code>fix(parser):</code></li><li>描述字段<strong>必须</strong>直接跟在 &lt;类型&gt;(范围) 前缀的冒号和空格之后。 描述指的是对代码变更的简短总结，例如： <em>fix: array parsing issue when multiple spaces were contained in string</em> 。</li><li>在简短描述之后，<strong>可以</strong>编写较长的提交正文，为代码变更提供额外的上下文信息。正文<strong>必须</strong>起始于描述字段结束的一个空行后。</li><li>提交的正文内容自由编写，并<strong>可以</strong>使用空行分隔不同段落。</li>", 7);
const _hoisted_331 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "可以",
  -1
  /* HOISTED */
);
const _hoisted_332 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "必须",
  -1
  /* HOISTED */
);
const _hoisted_333 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  ":<space>",
  -1
  /* HOISTED */
);
const _hoisted_334 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "<space>#",
  -1
  /* HOISTED */
);
const _hoisted_335 = {
  href: "https://git-scm.com/docs/git-interpret-trailers",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_336 = /* @__PURE__ */ createStaticVNode("<li>脚注的令牌<strong>必须</strong>使用 <code>-</code> 作为连字符，比如 <code>Acked-by</code> (这样有助于 区分脚注和多行正文)。有一种例外情况就是 <code>BREAKING CHANGE</code>，它<strong>可以</strong>被认为是一个令牌。</li><li>脚注的值<strong>可以</strong>包含空格和换行，值的解析过程<strong>必须</strong>直到下一个脚注的令牌/分隔符出现为止。</li><li>破坏性变更<strong>必须</strong>在提交信息中标记出来，要么在 &lt;类型&gt;(范围) 前缀中标记，要么作为脚注的一项。</li><li>包含在脚注中时，破坏性变更<strong>必须</strong>包含大写的文本 <code>BREAKING CHANGE</code>，后面紧跟着冒号、空格，然后是描述，例如： <em>BREAKING CHANGE: environment variables now take precedence over config files</em> 。</li><li>包含在 &lt;类型&gt;(范围) 前缀时，破坏性变更<strong>必须</strong>通过把 <code>!</code> 直接放在 <code>:</code> 前面标记出来。 如果使用了 <code>!</code>，那么脚注中<strong>可以</strong>不写 <code>BREAKING CHANGE:</code>， 同时提交信息的描述中<strong>应该</strong>用来描述破坏性变更。</li><li>在提交说明中，<strong>可以</strong>使用 <code>feat</code> 和 <code>fix</code> 之外的类型，比如：<em>docs: updated ref docs.</em> 。</li><li>工具的实现必须<strong>不区分</strong>大小写地解析构成约定式提交的信息单元，只有 <code>BREAKING CHANGE</code> <strong>必须</strong>是大写的。</li><li>BREAKING-CHANGE 作为脚注的令牌时<strong>必须</strong>是 BREAKING CHANGE 的同义词。</li>", 8);
const _hoisted_344 = /* @__PURE__ */ createStaticVNode('<h3 id="_2-为什么使用约定式提交" tabindex="-1"><a class="header-anchor" href="#_2-为什么使用约定式提交" aria-hidden="true">#</a> 2, 为什么使用约定式提交</h3><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><hr><h3 id="在初始开发阶段我该如何处理提交说明" tabindex="-1"><a class="header-anchor" href="#在初始开发阶段我该如何处理提交说明" aria-hidden="true">#</a> 在初始开发阶段我该如何处理提交说明？</h3><p>我们建议你按照假设你已发布了产品那样来处理。因为通常总 <em>有人</em> 使用你的软件，即便那是你软件开发的同事们。他们会希望知道诸如修复了什么、哪里不兼容等信息。</p><h3 id="提交标题中的类型是大写还是小写" tabindex="-1"><a class="header-anchor" href="#提交标题中的类型是大写还是小写" aria-hidden="true">#</a> 提交标题中的类型是大写还是小写?</h3><p>大小写都可以，但最好是一致的。</p><h3 id="如果提交符合多种类型我该如何操作" tabindex="-1"><a class="header-anchor" href="#如果提交符合多种类型我该如何操作" aria-hidden="true">#</a> 如果提交符合多种类型我该如何操作？</h3><p>回退并尽可能创建多次提交。约定式提交的好处之一是能够促使我们做出更有组织的提交和 PR。</p><h3 id="这不会阻碍快速开发和迭代吗" tabindex="-1"><a class="header-anchor" href="#这不会阻碍快速开发和迭代吗" aria-hidden="true">#</a> 这不会阻碍快速开发和迭代吗？</h3><p>它阻碍的是以杂乱无章的方式快速前进。它助你能在横跨多个项目以及和多个贡献者协作时长期地快速演进。</p><h3 id="约定式提交会让开发者受限于提交的类型吗-因为他们会想着已提供的类型" tabindex="-1"><a class="header-anchor" href="#约定式提交会让开发者受限于提交的类型吗-因为他们会想着已提供的类型" aria-hidden="true">#</a> 约定式提交会让开发者受限于提交的类型吗（因为他们会想着已提供的类型）？</h3><p>约定式提交鼓励我们更多地使用某些类型的提交，比如 <code>fixes</code>。除此之外，约定式提交的灵活性也允许你的团队使用自己的类型，并随着时间的推移更改这些类型。</p><h3 id="这和-semver-有什么关联呢" tabindex="-1"><a class="header-anchor" href="#这和-semver-有什么关联呢" aria-hidden="true">#</a> 这和 SemVer 有什么关联呢？</h3><p><code>fix</code> 类型提交应当对应到 <code>PATCH</code> 版本。<code>feat</code> 类型提交应该对应到 <code>MINOR</code> 版本。带有 <code>BREAKING CHANGE</code> 的提交不管类型如何，都应该对应到 <code>MAJOR</code> 版本。</p><h3 id="我对约定式提交做了形如-jameswomack-conventional-commit-spec-的扩展-该如何版本化管理这些扩展呢" tabindex="-1"><a class="header-anchor" href="#我对约定式提交做了形如-jameswomack-conventional-commit-spec-的扩展-该如何版本化管理这些扩展呢" aria-hidden="true">#</a> 我对约定式提交做了形如 <code>@jameswomack/conventional-commit-spec</code> 的扩展，该如何版本化管理这些扩展呢？</h3><p>我们推荐使用 SemVer 来发布你对于这个规范的扩展（并鼓励你创建这些扩展！）</p><h3 id="如果我不小心使用了错误的提交类型-该怎么办呢" tabindex="-1"><a class="header-anchor" href="#如果我不小心使用了错误的提交类型-该怎么办呢" aria-hidden="true">#</a> 如果我不小心使用了错误的提交类型，该怎么办呢？</h3><h4 id="当你使用了在规范中但错误的类型时-例如将-feat-写成了-fix" tabindex="-1"><a class="header-anchor" href="#当你使用了在规范中但错误的类型时-例如将-feat-写成了-fix" aria-hidden="true">#</a> 当你使用了在规范中但错误的类型时，例如将 <code>feat</code> 写成了 <code>fix</code></h4><p>在合并或发布这个错误之前，我们建议使用 <code>git rebase -i</code> 来编辑提交历史。而在发布之后，根据你使用的工具和流程不同，会有不同的清理方案。</p><h4 id="当使用了-不在-规范中的类型时-例如将-feat-写成了-feet" tabindex="-1"><a class="header-anchor" href="#当使用了-不在-规范中的类型时-例如将-feat-写成了-feet" aria-hidden="true">#</a> 当使用了 <em>不在</em> 规范中的类型时，例如将 <code>feat</code> 写成了 <code>feet</code></h4><p>在最坏的场景下，即便提交没有满足约定式提交的规范，也不会是世界末日。这只意味着这个提交会被基于规范的工具错过而已。</p><h3 id="所有的贡献者都需要使用约定式提交规范吗" tabindex="-1"><a class="header-anchor" href="#所有的贡献者都需要使用约定式提交规范吗" aria-hidden="true">#</a> 所有的贡献者都需要使用约定式提交规范吗？</h3><p>并不！如果你使用基于 squash 的 Git 工作流，主管维护者可以在合并时清理提交信息——这不会对普通提交者产生额外的负担。 有种常见的工作流是让 git 系统自动从 pull request 中 squash 出提交，并向主管维护者提供一份表单，用以在合并时输入合适的 git 提交信息。</p><h3 id="约定式提交规范中如何处理还原-revert-提交" tabindex="-1"><a class="header-anchor" href="#约定式提交规范中如何处理还原-revert-提交" aria-hidden="true">#</a> 约定式提交规范中如何处理还原（revert）提交?</h3><p>还原提交（Reverting）会比较复杂：你还原的是多个提交吗？如果你还原了一个功能模块，下次发布的应该是补丁吗？</p><p>约定式提交不能明确的定义还原行为。所以我们把这个问题留给工具开发者， 基于 <em>类型</em> 和 <em>脚注</em> 的灵活性来开发他们自己的还原处理逻辑。</p><p>一种建议是使用 <code>revert</code> 类型，和一个指向被还原提交摘要的脚注：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>revert: let us never again speak of the noodle incident\n\nRefs: 676104e, a215868\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 30);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("blockquote", null, [
      createBaseVNode("p", null, [
        createTextVNode("约定式提交规范是一种基于提交信息的轻量级约定。 它提供了一组简单规则来创建清晰的提交历史； 这更有利于编写自动化工具。 通过在提交信息中描述功能、修复和破坏性变更， 使这种惯例与 "),
        createBaseVNode("a", _hoisted_314, [
          createTextVNode("SemVer"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode(" 相互对应。")
      ])
    ]),
    _hoisted_315,
    createBaseVNode("blockquote", null, [
      createBaseVNode("p", null, [
        createTextVNode("本文中的关键词 “必须（MUST）”、“禁止（MUST NOT）”、“必要（REQUIRED）”、“应当（SHALL）”、“不应当（SHALL NOT）”、“应该（SHOULD）”、“不应该（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）” 和 “可选（OPTIONAL）” ，其相关解释参考 "),
        createBaseVNode("a", _hoisted_323, [
          createTextVNode("RFC 2119"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode(" 。")
      ]),
      createBaseVNode("ol", null, [
        _hoisted_324,
        createBaseVNode("li", null, [
          createTextVNode("在正文结束的一个空行之后，"),
          _hoisted_331,
          createTextVNode("编写一行或多行脚注。每行脚注都"),
          _hoisted_332,
          createTextVNode("包含 一个令牌（token），后面紧跟 "),
          _hoisted_333,
          createTextVNode(" 或 "),
          _hoisted_334,
          createTextVNode(" 作为分隔符，后面再紧跟令牌的值（受 "),
          createBaseVNode("a", _hoisted_335, [
            createTextVNode("git trailer convention"),
            createVNode(_component_ExternalLinkIcon)
          ]),
          createTextVNode(" 启发）。")
        ]),
        _hoisted_336
      ])
    ]),
    _hoisted_344
  ]);
}
const qianduangongchenghuaGit_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "qianduangongchenghua-Git.html.vue"]]);
export {
  qianduangongchenghuaGit_html as default
};
