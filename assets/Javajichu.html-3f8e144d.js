import { _ as _export_sfc, o as openBlock, c as createElementBlock, d as createStaticVNode } from "./app-830a5e72.js";
const _imports_0 = "/bowenBlog/assets/image-20231217225152307-65cace21.png";
const _imports_1 = "/bowenBlog/assets/image-20231217225409233-42927ebf.png";
const _imports_2 = "/bowenBlog/assets/image-20231217225551535-52c64128.png";
const _imports_3 = "/bowenBlog/assets/image-20231217225708033-58a8f4df.png";
const _imports_4 = "/bowenBlog/assets/image-20231217230343125-504f85a6.png";
const _imports_5 = "/bowenBlog/assets/image-20231217230417452-acd32e3d.png";
const _imports_6 = "/bowenBlog/assets/image-20231217230525751-85bdedd5.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><ol><li><h2 id="学习基本概念和语法" tabindex="-1"><a class="header-anchor" href="#学习基本概念和语法" aria-hidden="true">#</a> 学习基本概念和语法：</h2><ul><li>理解面向对象编程（OOP）的概念</li><li>学习 Java 的基本语法、数据类型、变量和运算符</li><li>掌握条件语句（if-else、switch）、循环语句（for、while）和基本的异常处理</li><li>熟悉数组、字符串和常用的数据结构（如列表、集合、映射）</li></ul></li><li><h2 id="深入学习核心-java-特性" tabindex="-1"><a class="header-anchor" href="#深入学习核心-java-特性" aria-hidden="true">#</a> 深入学习核心 Java 特性：</h2><ul><li>理解类与对象的关系，学习如何创建和使用类、对象和构造方法</li><li>学习继承、多态和抽象类的概念和应用</li><li>掌握接口和接口实现、接口的多继承</li><li>学习异常处理机制、自定义异常和异常链</li></ul></li><li><h2 id="学习-java-标准库和常用-api" tabindex="-1"><a class="header-anchor" href="#学习-java-标准库和常用-api" aria-hidden="true">#</a> 学习 Java 标准库和常用 API：</h2><ul><li>掌握输入输出（I/O）操作，包括文件读写和流操作</li><li>学习集合框架（如 ArrayList、LinkedList、HashMap 等）和常用的集合操作</li><li>熟悉 Java 的日期和时间处理、正则表达式等</li><li>学习多线程编程和并发编程的基本概念和技术</li><li>掌握常用的网络编程和 Socket 操作</li></ul></li><li><h2 id="数据库和持久化" tabindex="-1"><a class="header-anchor" href="#数据库和持久化" aria-hidden="true">#</a> 数据库和持久化：</h2><ul><li>学习关系型数据库的基本概念和 SQL 语法</li><li>掌握使用 JDBC 连接数据库、执行 SQL 查询和更新操作</li><li>学习对象关系映射（ORM）框架，如 Hibernate 或 JPA</li></ul></li><li><h2 id="web-开发基础" tabindex="-1"><a class="header-anchor" href="#web-开发基础" aria-hidden="true">#</a> Web 开发基础：</h2><ul><li>理解 Web 应用程序的基本概念和架构</li><li>学习 Servlet 和 JSP 技术，了解 MVC 模式</li><li>掌握基本的 HTTP 协议、表单处理和会话管理</li><li>学习常用的 Web 框架，如 Spring MVC</li></ul></li><li><h2 id="深入学习-java-高级特性" tabindex="-1"><a class="header-anchor" href="#深入学习-java-高级特性" aria-hidden="true">#</a> 深入学习 Java 高级特性：</h2><ul><li>理解泛型编程、反射和注解的概念和应用</li><li>学习函数式编程和 Lambda 表达式</li><li>掌握流式 API（Stream API）和集合操作的函数式编程风格</li><li>理解并发编程的高级概念和技术，如线程池、锁和原子操作</li></ul></li><li><h2 id="构建和部署-java-应用程序" tabindex="-1"><a class="header-anchor" href="#构建和部署-java-应用程序" aria-hidden="true">#</a> 构建和部署 Java 应用程序：</h2><ul><li>学习使用构建工具（如 Maven 或 Gradle）管理项目和依赖</li><li>掌握基本的单元测试和集成测试技术</li><li>学习打包和部署 Java 应用程序，如创建可执行 JAR 文件或 WAR 文件</li></ul></li><li><h2 id="深入学习领域特定知识" tabindex="-1"><a class="header-anchor" href="#深入学习领域特定知识" aria-hidden="true">#</a> 深入学习领域特定知识：</h2><ul><li>学习常用的 Java 框架和库，如 Spring、Spring Boot、Hibernate 等</li><li>掌握常见的开发工具和集成开发环境（IDE），如 IntelliJ IDEA 或 Eclipse</li><li>学习常用的设计模式和架构思想，如 MVC、观察者模式、工厂模式等</li><li>了解分布式系统和微服务架构的基本概念和技术</li></ul></li><li><h2 id="持续学习和实践" tabindex="-1"><a class="header-anchor" href="#持续学习和实践" aria-hidden="true">#</a> 持续学习和实践：</h2><ul><li>阅读 Java 相关的书籍、博客和文档</li><li>参与开源项目或个人项目，实践所学的知识</li><li>参加 Java 相关的培训课程、工作坊或线上学习资源</li><li>参与 Java 相关的社区和论坛，与其他开发者交流和分享经验</li></ul></li></ol><h2 id="一-java背景" tabindex="-1"><a class="header-anchor" href="#一-java背景" aria-hidden="true">#</a> 一，Java背景</h2><h3 id="_1-java历史-了解" tabindex="-1"><a class="header-anchor" href="#_1-java历史-了解" aria-hidden="true">#</a> 1，Java历史（了解）</h3><ul><li><p><strong>Java是哪家公司的产品？</strong></p><p>Java是美国Sun（Stanford University Network，斯坦福大学网络公司）公司在1995年推出的一门计算机<strong>高级编程语言</strong>。但是在2009年是Sun公司被Oracle（甲骨文）公司给收购了，所以目前Java语言是Oracle公司所有产品。</p></li><li><p><strong>Java名称的来历？</strong></p><p>早期这门语言的名字其实不叫Java，当时称为Oak（橡树的意思），为什么叫橡树呢？原因是因为Sun公司的门口种了很多橡树，但是后来由于商标注册时，Oak商标已经其他公司注册了，所以后面改名为Java了。那么有人好奇为什么叫Java呢？Java是印度的一个岛屿，上面盛产咖啡，可能是因为他们公司的程序员喜欢喝咖啡，所以就改名为Java了。</p></li><li><p><strong>Java的创始人是谁？</strong></p><p>说完Java名称的来历之后，接下来我们聊聊Java的祖师爷是谁？ Java的联合创始人有很多，但是行业普遍认可的Java的创始人 是<strong>詹姆斯●高斯林</strong>，被称为Java之父</p></li></ul><h3 id="_2-java能做什么-了解" tabindex="-1"><a class="header-anchor" href="#_2-java能做什么-了解" aria-hidden="true">#</a> 2，Java能做什么（了解）</h3><p>其实Java能做的事情非常多，它可以做桌面应用的开发、企业互联网应用开发、移动应用开发、服务器系统开发、大数据开发、游戏开发等等。</p><ol><li>桌面应用开发：能够在电脑桌面运行的软件 举例：财务管理软件、编写程序用的IDEA开发工具等，可以用Java语言开发</li><li>企业级应用开发：大型的互联网应用程序 举例：淘宝、京东等</li><li>移动应用开发：运行的Android手机端的软件 举例：QQ客户端、抖音APP等</li><li>服务器系统：应用程序的后台（为客户端程序提供数据） 举例：服务器系统为用户推荐那你喜爱的视频</li><li>大数据开发：大数据是一个互联网开发方向 举例：目前最火的大数据开发平台是Hadoop，就是用Java语言开发的</li><li>游戏开发：游戏本质上是给用户提供娱乐的软件，有良好的交互感受 举例：我的世界MineCraft就是用Java语言开发的</li></ol><h3 id="_3-java技术体系" tabindex="-1"><a class="header-anchor" href="#_3-java技术体系" aria-hidden="true">#</a> 3，Java技术体系</h3><p>Java为了满足不同的应用场景提供了不同的技术版本，主要有三个版本。</p><ul><li>Java SE（Java Standard Edition）：叫做标准版，它是后面两个版本的基础，也就是学习后面两个版本必须先学习JavaSE。<strong>我们现阶段学习的就是这个版本中的技术，它是Java技术的核心和基础</strong>。</li><li>Java EE（Java Enterprise Edition）: 叫做企业版，它是为企业级应用开发提供的一套解决方案。<strong>在后面课程中主要学习这个版本中的技术</strong>。</li><li>Java ME（Java Micro Edition）：叫做小型版，它为开发移动设备的应用提供了一套解决方案。<strong>目前已经不被市场认可（淘汰），取而代之的是基于Android系统的应用开发</strong>。</li></ul><h2 id="二-java快速入门" tabindex="-1"><a class="header-anchor" href="#二-java快速入门" aria-hidden="true">#</a> 二，Java快速入门</h2><h3 id="_1-安装jdk" tabindex="-1"><a class="header-anchor" href="#_1-安装jdk" aria-hidden="true">#</a> 1，安装JDK</h3><blockquote><p>要使用Java语言开发程序，我们得先得安装Java的开发环境，所谓的Java开发环境，实际上就是Java官方提供的一个软件，叫做JDK（全称是Java Develop Kit），翻译过来意思就是Java开发工具包。我们先要到官网上去下载JDK，然后安装在自己的电脑上，才可以在自己的电脑上使用JDK来开发Java程序。JDK的版本有很多，下图是JDK版本更新的历程图，有LTS标识的是长期支持版本（意思就是Oracle会不定期更新）。目前公司中用得最多的版本是JDK8版本。</p></blockquote><p><img src="' + _imports_0 + '" alt="image-20231217225152307"></p><blockquote><p>这里我们使用的是 1.8 , 也就是常言版本任你发, 我用 Java 8</p></blockquote><p><strong>JDK 的组成部分</strong>:</p><ol><li>Java 编译器（javac）：用于将 Java 源代码编译为可执行的 Java 字节码。</li><li>Java 运行时环境（JRE）：包含 Java 虚拟机（JVM）和 Java 类库，用于在计算机上执行 Java 应用程序。</li><li>Java 类库：一组预定义的类和方法，用于处理常见的编程任务，如字符串处理、输入输出、网络通信、数据库连接等。</li><li>开发工具：包括调试器、性能分析工具和其他实用工具，用于开发、测试和调试 Java 应用程序。</li><li>文档：JDK 提供了丰富的文档，包括 API 文档、教程和示例代码，用于帮助开发人员学习和使用 Java 编程语言。</li></ol><p><strong>JDK 的安装目录</strong></p><p>文件资源管理器打开JDK的安装目录的bin目录，会发现有两个命令工具 <code>javac.exe</code> <code>java.exe</code> ，这就是JDK提供给我们使用的<strong>编译工具和运行工具</strong>，如下：</p><p><img src="' + _imports_1 + '" alt="image-20231217225409233"></p><p>将来我们写好的Java程序都是高级语言，计算机底层是硬件不能识别这些语言。必须先通过javac编译工具进行翻译，然后再通过java执行工具执行才可以驱动机器干活。</p><h3 id="_2-配置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-配置环境变量" aria-hidden="true">#</a> 2，配置环境变量</h3><p>什么是Path环境变量？</p><ul><li>Path环境变量是让系统程序的路径，方便程序员在命令行窗口的任意目录下启动程序；</li></ul><blockquote><p>把JDK配置到Path中，我们把JDK的bin目录配置到Path环境变量下，这样就可以在任意目录下启动javac和java命令来完成编译和运行了。我们先配置Java_home环境变量，JAVA_HOME：告诉操作系统JDK安装在了哪个位置（将来其他技术要通过这个环境变量找JDK）。</p></blockquote><h3 id="_2-java入门程序" tabindex="-1"><a class="header-anchor" href="#_2-java入门程序" aria-hidden="true">#</a> 2，Java入门程序</h3><p>编写一个Java程序需要经过3个步骤：编写代码，编译代码，运行代码。如下：</p><p><img src="' + _imports_2 + '" alt="image-20231217225551535"></p><ul><li>编写代码：任何一个文本编辑器都可以些代码，如Windows系统自带的记事本</li><li>编译代码：将人能看懂的源代码（.java文件）转换为Java虚拟机能够执行的字节码文件（.class文件）</li><li>运行代码：将字节码文件交给Java虚拟机执行</li></ul><p>第一步：新建一个后缀为.java的文本文件 <code>HelloWorld.java</code> ，用记事本编写代码如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最基本的程序 输出 hello java</p></blockquote><p>第二步：进入 <code>HelloWorld.java</code> 文件所在目录，在地址栏输入cmd回车，即可在此处打开命令行窗口。</p><p>编译：在命令行窗口输入编译命令 <code>javac HelloWorld</code> 完成编译，编译后会生成一个 <code>HelloWorld.class</code> 文件。</p><p>编译后，得到字节码文件，</p><p>第三步：再接着输入 <code>java HelloWorld</code> 就可以运行了，运行结果如下</p><p><img src="' + _imports_3 + '" alt="image-20231217225708033"></p><h3 id="编程中的命名规则" tabindex="-1"><a class="header-anchor" href="#编程中的命名规则" aria-hidden="true">#</a> <strong>编程中的命名规则</strong></h3><p><strong>常见的命名规则：</strong></p><ol><li><strong>驼峰命名法</strong>（Camel Case）：首字母小写，后续单词首字母大写，单词之间没有空格或下划线。例如：myVariable, firstName, calculateArea。</li><li><strong>帕斯卡命名法</strong>（Pascal Case）：所有单词的首字母都大写，单词之间没有空格或下划线。用于类名、接口名等。例如：MyClass, CalculateArea。</li><li>下划线命名法（Snake Case）：单词之间使用下划线分隔。例如：my_variable, first_name, calculate_area。在某些编程语言中，下划线命名法也用于常量或全局变量。</li><li>匈牙利命名法（Hungarian Notation）：在变量名前面加上一个或多个小写字母前缀，表示变量的类型或其他属性。例如：strName（str表示字符串）、nCount（n表示整数）。</li><li>全大写命名法（UPPER CASE）：所有字母都大写，单词之间使用下划线分隔。通常用于表示常量。例如：MAX_VALUE, PI。</li><li>小写命名法（lower case）：所有字母都小写，单词之间使用下划线分隔。例如：my_variable, first_name。</li></ol><p>这些命名规则是为了提高代码的可读性和可</p><blockquote><p>目前最为常用的还是前两名的命名方式</p></blockquote><h2 id="三-idea" tabindex="-1"><a class="header-anchor" href="#三-idea" aria-hidden="true">#</a> 三，IDEA</h2><p>集成开发环境（ IDE, Integrated Development Environment ）</p><ul><li>把代码编写，编译，执行等多种功能综合到一起的开发工具，可以进行代码智能提示，错误提醒，项目管理等</li><li>常见的Java IDE工具有：Eclipse、MyEclipse、IntelliJ IDEA、Jbuilder、NetBeans等。</li></ul><h3 id="_1-idea下载和安装" tabindex="-1"><a class="header-anchor" href="#_1-idea下载和安装" aria-hidden="true">#</a> 1，IDEA下载和安装</h3><p>流程链接</p><h3 id="_2-java程序的工程结构" tabindex="-1"><a class="header-anchor" href="#_2-java程序的工程结构" aria-hidden="true">#</a> 2，Java程序的工程结构</h3><p>想要在IDEA正确的写一个Java程序，必须先认识一下IDEA的管理Java程序的工程结构。</p><ul><li>第一步：首先得在IDEA中创建一个Project（工程、也叫项目），后面统称为工程。理解成小区的院子。</li><li>第二步：需要在Project中创建Module（模块），一个工程中可以包含多个模块。理解成小区院子里面的每一栋楼。</li><li>第三步：需要在Module中新建Package（包），一个模块中可以有多个包。理解成每一栋楼的一层。</li><li>第四步：需要在Package中新建Class（类），一个包中可以包含多个类。理解成每一层的住户。</li></ul><p>创建工程，创建模块，创建包，创建类流程如下：</p><p>创建一个空项目，本质就是一个文件夹，如下：</p><p>创建新模块（module）</p><p>有了模块，就可以创建包（package），包的本质就是文件夹</p><p>在一个包下面的创建一个类, 就可以编写 Java 代码</p><h3 id="_3-idea各种配置" tabindex="-1"><a class="header-anchor" href="#_3-idea各种配置" aria-hidden="true">#</a> 3，IDEA各种配置</h3><ul><li>主题配置</li><li>字体配置</li><li>背景色配置</li></ul><h2 id="四-java基础语法" tabindex="-1"><a class="header-anchor" href="#四-java基础语法" aria-hidden="true">#</a> 四，Java基础语法</h2><h3 id="_1-注释" tabindex="-1"><a class="header-anchor" href="#_1-注释" aria-hidden="true">#</a> 1，注释</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span>单行注释：\n	<span class="token comment">//后面根解释文字</span>\n<span class="token number">2.</span>多行注释\n    <span class="token comment">/*\n    这里写注释文字\n    可以写多行\n    */</span>\n<span class="token number">3.</span>文档注释\n    <span class="token doc-comment comment">/**\n    这里写文档注释\n    也可以写多行，文档注释可以利用JDK的工具生成帮助文档\n    */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快捷键：</p><ul><li>Ctrl + / 单行注释（对当前行进行注释）</li><li>Ctrl + Shift + / 对选中的代码进行多行注释。</li></ul><h3 id="_2-字面量" tabindex="-1"><a class="header-anchor" href="#_2-字面量" aria-hidden="true">#</a> 2，字面量</h3><p>什么是字面量？</p><ul><li>字面量其实就是告诉程序员数据在程序中的书写格式。下面是常用的数据在程序中的书写格式。</li><li>对于字面量，大家只要能够正确写出各种数据就可以了</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 整数</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 小数</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 字符：使用单引号包起来</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 空格也是字符</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \\n是换行，是特殊字符</span>\n        <span class="token comment">//System.out.println(&#39;\\t&#39;);  // \\t是制表符  相当于一个tab键</span>\n        <span class="token comment">// 字符串: 使用双引号包起来</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 布尔值： true  false</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-变量" tabindex="-1"><a class="header-anchor" href="#_3-变量" aria-hidden="true">#</a> 3，变量</h3><p>什么是变量</p><ul><li>变量是用来记录程序中的数据的。其本质上是内存中的一块区域，你可以把这块区域理解成一个小盒子。</li><li>Java中定义变量和JS中定义变量，是有区别的。</li></ul><p>代码演示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;malu&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// int表示整数</span>\n        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        age <span class="token operator">=</span> age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">&quot;wc今年&quot;</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">&quot;岁&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">18.5</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">&quot;beijinig&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;shahe&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量的小细节：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在{}中定义的变量，这个变量只能在{}中访问，变量的有效范围叫变量的作用域</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//System.out.println(a);</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 在同一个作用域内，不能有相同的变量名</span>\n            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token comment">//int b = 2;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 变量没有赋值（初始化），是不能使用的</span>\n            <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n            <span class="token comment">//System.out.println(c);</span>\n\n            <span class="token comment">// 同一行，可以定义多个变量</span>\n            <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-关键字" tabindex="-1"><a class="header-anchor" href="#_4-关键字" aria-hidden="true">#</a> 4，关键字</h3><p>Java中的关键字：</p><ul><li>关键字是java语言中有特殊含义的单词。比如用int表示整数，用double表示小数，等等！</li><li>我们学习Java的语法其本质就是学习这些关键字的含义，一共有50多个关键字，我们不是一次性把这些关键字学完，会在后续的课程中每天学一点，慢慢得你就都学会了。</li><li>关键字都是小写的，关键字在idea中有特殊颜色标记，默认是蓝色的。</li></ul><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><h3 id="_5-标识符" tabindex="-1"><a class="header-anchor" href="#_5-标识符" aria-hidden="true">#</a> 5，标识符</h3><p>标识符：</p><ul><li>类名，变量名其实都是标志符，取名字的规则，不能让我们随即便瞎取。有些规则是强制要求的，不遵守就会报错。还有一些规则是我们建议大家遵守的，这样取名字显得我们更加专业</li></ul><p>强制要求：必须遵守，不遵守就会报错</p><ul><li>最好是字母、数字、下划线、$组成</li><li>不能以数字开头</li><li>不能是Java的关键字</li></ul><p>建议遵守：按照下面的方式取名字会显得更加专业</p><ul><li>所有的名字要见名知意，便于自己和别人阅读</li><li>类名：首字母大写（大驼峰命名）</li><li>变量名：第二个单词开始首字母大写（小驼峰命名）</li></ul><h3 id="_6-数据的表示" tabindex="-1"><a class="header-anchor" href="#_6-数据的表示" aria-hidden="true">#</a> 6，数据的表示</h3><p>任何数据在计算机中都是以<strong>二进制</strong>表示的。整数在计算机中存储都是以二进制形式存储的。现在想要在计算机中存储一个整数6，转换为二进制是110，那么计算机中只是存110吗三位数字吗？ 其实不是的，<strong>计算机中最小的存储单位是字节（Byte），一个字节占8位（bit）</strong>，也就是说即使这个数据不足8位也需要用8位来存储。</p><h3 id="_7-数据类型" tabindex="-1"><a class="header-anchor" href="#_7-数据类型" aria-hidden="true">#</a> 7，数据类型</h3><p>Java的数据类型整体上来说分为两大类：</p><ul><li>基本数据类型</li><li>引用数据类型</li></ul><p><img src="' + _imports_4 + '" alt="image-20231217230343125"></p><p>整数和小数的默认类型：</p><ul><li>比如23，它默认就为int类型；如果加上后缀L，则为long类型</li><li>比如23.8，它默认为double类型；如果加上后缀F，则为float类型</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// java中数据类型分两类：</span>\n        <span class="token comment">//  1)基本数据类型</span>\n        <span class="token comment">//       整型</span>\n        <span class="token comment">//            byte   1个字节</span>\n        <span class="token comment">//            short   2个字节</span>\n        <span class="token comment">//            int(默认的)   4个字节</span>\n        <span class="token comment">//            long     8个字节</span>\n        <span class="token comment">//       浮点数（小数）</span>\n        <span class="token comment">//            float   4个字节</span>\n        <span class="token comment">//            double(默认的)   8个字节</span>\n        <span class="token comment">//       字符</span>\n        <span class="token comment">//            char   2个字节</span>\n        <span class="token comment">//       布尔值</span>\n        <span class="token comment">//            boolean    1个字节</span>\n        <span class="token comment">//  2)引用数据类型</span>\n    \n        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">float</span> e <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span>  <span class="token comment">// 如果是float类型，后面需要加f/F</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">double</span> f <span class="token operator">=</span> <span class="token number">1.1111</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">char</span> h <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-数据类型转化" tabindex="-1"><a class="header-anchor" href="#_8-数据类型转化" aria-hidden="true">#</a> 8，数据类型转化</h3><p>分类：</p><ul><li>自动类型转化</li><li>强制类型转化</li></ul><p><strong>自动类型转化</strong>：</p><p><img src="' + _imports_5 + '" alt="image-20231217230417452"></p><p>自动类型转化之表达式类型转化</p><ul><li>所谓表达式指的是几个变量或者几个数据一起参与运算的式子</li><li>多种数据类型参与运算，其结果以大的数据类型为准</li><li>byte, short, char 三种类型数据在和其他类型数据运算时，都会转换为int类型再运算</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// 自动类型转转的规则：只能把小的类型赋值给大的类型</span>\n        <span class="token comment">// byte =&gt; short =&gt; int =&gt; long =&gt; float = &gt; double</span>\n        <span class="token comment">// char =&gt; int</span>\n        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token comment">// 此时就发生了类型转化（自动类型转化的）</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>\n\n        <span class="token keyword">double</span> q <span class="token operator">=</span> <span class="token number">1.11</span><span class="token punctuation">;</span>\n        <span class="token comment">//float p = q; // 不能把double类型的数据赋值给float类型</span>\n        \n        <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">short</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> res <span class="token operator">=</span> i<span class="token operator">+</span>j<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强制类型转化</strong></p><ul><li>强行将范围大的数据，赋值给范围小的变量也是可以的，这里就需要用到强制类型转换</li><li>格式：目标数据类型 变量名 = (目标数据类型)被转换的数据</li><li>强制类型转化，有数据丢失风险</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// 把大类型转化成小类型，就会用到强制类型转化</span>\n        \n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>\n        <span class="token comment">//byte b = a;  // 失败</span>\n        <span class="token comment">// 强制类型转化  强制把int类型，转化成byte类型</span>\n        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 强制类型转化，有数据丢失的风险</span>\n        <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">66.66</span><span class="token punctuation">;</span>\n        <span class="token comment">//int d = c; // 失败</span>\n        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span> <span class="token comment">// 失败</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-算术运算符" tabindex="-1"><a class="header-anchor" href="#_9-算术运算符" aria-hidden="true">#</a> 9，算术运算符</h3><p>运算符就是参与运算的符号。Java提供的运算符有很多种，可以分为算术下面几种</p><ul><li>基本算术运算符</li><li>自增自减运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>三元运算符</li></ul><h3 id="_10-自增自减运算符" tabindex="-1"><a class="header-anchor" href="#_10-自增自减运算符" aria-hidden="true">#</a> 10，自增自减运算符</h3><p>不管是++在前，还是++在后，自己本身的值肯定要加的，但是如何++在前，整体的值是一个新值，如果++在后，整体的值是一个旧值。和JS是一样的。</p><h3 id="_11-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_11-赋值运算符" aria-hidden="true">#</a> 11，赋值运算符</h3><p>同JS一样。区别如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token comment">// a = a+b;</span>\n        a <span class="token operator">+=</span> b<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">byte</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">byte</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n        <span class="token comment">// 两个byte类型相加，最终会提升成int类型</span>\n        <span class="token comment">//x = x+y;  // 不行</span>\n        x<span class="token operator">+=</span>y<span class="token punctuation">;</span> <span class="token comment">// 等价于：byte x = (byte)(x+y) // ok的</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-关系运算符" tabindex="-1"><a class="header-anchor" href="#_12-关系运算符" aria-hidden="true">#</a> 12，关系运算符</h3><p>和JS一样，关系运算符得到的结果要么为true，要么为false。</p><h3 id="_13-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_13-逻辑运算符" aria-hidden="true">#</a> 13，逻辑运算符</h3><p>这个和我们JS的逻辑运算符略有区别：</p><p><img src="' + _imports_6 + '" alt="image-20231217230525751"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token comment">// 前后两个条件都为true,结果才为true</span>\n        <span class="token keyword">boolean</span> res <span class="token operator">=</span> a<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">&amp;</span> b<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 只要多个条件中有一个是true，结果就是true</span>\n        <span class="token keyword">boolean</span> res2 <span class="token operator">=</span> a<span class="token operator">&gt;</span><span class="token number">2</span> <span class="token operator">|</span> b<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// ! 取反的意思</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 前后条件的结果相同时，返回false，不同时，返回true</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">^</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// f</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">^</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// t</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">^</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// f</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">^</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// t</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-三元运算符" tabindex="-1"><a class="header-anchor" href="#_14-三元运算符" aria-hidden="true">#</a> 14，三元运算符</h3><p>和JS是一样的，格式:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>关系表达式<span class="token operator">?</span> 值<span class="token number">1</span> <span class="token operator">:</span> 值<span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_15-获取用户输入" tabindex="-1"><a class="header-anchor" href="#_15-获取用户输入" aria-hidden="true">#</a> 15，获取用户输入</h3><p>键盘录入数据，第一步：在class类上导包：一般不需要我们自己做，idea工具会自动帮助我们 导包的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步：得到一个用于键盘扫描器对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Scanner是键盘扫描器对象(你就把它理解成一个东西)，这个东西有录入的功能</span>\n<span class="token comment">//sc是给这个东西取的名字</span>\n<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第3步：开始调用sc的功能，来接收用户键盘输入的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入整数</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的年龄是:&quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的名字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入字符串</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的名字是:&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实例对象有哪些常用的方法, 如下:</strong></p><p><code>sc</code> 是一个 <code>Scanner</code> 对象，它提供了多个方法用于读取不同类型的输入</p><ol><li><code>next()</code>：读取并返回输入中的下一个字符串，遇到空格或换行符时停止。</li><li><code>nextInt()</code>：读取并返回输入中的下一个整数。</li><li><code>nextDouble()</code>：读取并返回输入中的下一个双精度浮点数。</li><li><code>nextLine()</code>：读取并返回输入中的下一行字符串，包括空格。</li><li><code>hasNext()</code>：检查输入中是否有下一个标记（字符串、整数等）。</li><li><code>hasNextInt()</code>：检查输入中是否有下一个整数。</li><li><code>hasNextDouble()</code>：检查输入中是否有下一个双精度浮点数。</li><li><code>close()</code>：关闭 <code>Scanner</code> 对象，释放相关资源。</li></ol>', 132);
const _hoisted_133 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_133);
}
const Javajichu_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Javajichu.html.vue"]]);
export {
  Javajichu_html as default
};
