import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, e as createVNode, d as createStaticVNode } from "./app-e761162a.js";
const _imports_0 = "/bowenBlog/assets/image-20231008144139279-aeed4e47.png";
const _imports_1 = "/bowenBlog/assets/image-20231008144436511-764586fc.png";
const _imports_2 = "/bowenBlog/assets/image-20231008144448583-96489da1.png";
const _imports_3 = "/bowenBlog/assets/image-20231008144556289-6ed1f4a1.png";
const _imports_4 = "/bowenBlog/assets/image-20231008144826242-691bd983.png";
const _imports_5 = "/bowenBlog/assets/image-20231008144925567-7e26a5a6.png";
const _imports_6 = "/bowenBlog/assets/image-20231008144940345-70cea1ed.png";
const _imports_7 = "/bowenBlog/assets/image-20231008145114045-505268bb.png";
const _imports_8 = "/bowenBlog/assets/image-20231008145231741-ba99b52d.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="浏览器的工作原理" tabindex="-1"><a class="header-anchor" href="#浏览器的工作原理" aria-hidden="true">#</a> 浏览器的工作原理</h2><p>浏览器是我们常用的<strong>互联网工具</strong>，它能够<em>显示网页内容并提供相应的交互功能</em>。下面是浏览器的工作原理的基本流程：</p><ol><li><p>用户输入URL：用户在浏览器地址栏中<strong>输入一个网址</strong>，如</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(https://www.example.com/)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>DNS解析</strong>：浏览器会解析URL中的域名，找到对应的IP地址。它向本地DNS服务器发送请求，获取域名对应的IP地址。</p></li><li><p><strong>建立连接</strong>：浏览器使用HTTP或HTTPS协议与服务器建立网络连接。通常使用TCP/IP协议栈进行传输。</p></li><li><p>发送HTTP请求：<strong>浏览器向服务器发送HTTP请求</strong>，包括请求方法（GET、POST等）、请求头部（User-Agent、Cookies等）和请求体（POST请求的数据）。</p></li><li><p>接收响应：<strong>服务器处理请求并发送HTTP响应给浏览器</strong>。响应包括状态码（200表示成功，404表示未找到等）、响应头部（Content-Type、Set-Cookie等）和响应体（HTML、CSS、JavaScript等）。</p></li><li><p><strong>渲染页面</strong>：浏览器收到响应后，开始解析响应体中的HTML代码。它构建DOM树（文档对象模型）表示网页的结构，并将CSS样式应用到DOM元素上，最终生成渲染树。浏览器使用渲染引擎将渲染树转化为屏幕上的像素，呈现给用户。</p></li><li><p><strong>执行JavaScript</strong>：如果页面中有JavaScript代码，浏览器会解析并执行它。JavaScript可以修改DOM、发送异步请求、处理用户交互等。</p></li><li><p>用户交互：浏览器监听用户的鼠标点击、键盘输入等交互事件，并触发相应的操作和事件处理函数。</p></li><li><p>缓存处理：浏览器会缓存已经加载过的静态资源，例如图片、CSS和JavaScript文件。当再次请求相同的资源时，浏览器会直接从缓存中获取，提高用户的访问速度。</p></li><li><p>连接关闭：当用户关闭页面或者导航到新的URL时，浏览器会断开与服务器的连接，释放资源。</p></li></ol><p>总结以上 , 浏览器的工作原理包括了从URL输入到页面展示的一系列步骤，涉及到网络请求、文档解析、渲染引擎和JavaScript执行等核心过程。不同浏览器可能有一些细微的差别，但基本流程是类似的。</p><p><strong>用户输入url 后 ,浏览器发生了哪些事情</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>当用户在浏览器地址栏中输入URL时，浏览器会执行以下步骤：\n\n解析URL：浏览器会解析用户输入的URL，分解它为协议（如HTTP、HTTPS）、域名（如www.example.com）和路径（如/index.html）等组成部分。\n\nDNS解析：浏览器会使用域名系统（DNS）来将域名解析为IP地址。它首先检查本地缓存中是否有对应的IP地址，如果有，则直接使用缓存的IP地址。否则，浏览器会向本地DNS服务器发送请求，获取域名对应的IP地址。\n\n建立网络连接：浏览器通过使用HTTP或HTTPS协议与服务器建立网络连接。通常，这个过程使用TCP/IP协议栈实现。浏览器会建立与服务器的三次握手，并建立可靠的双向通信通道。\n\n发送HTTP请求：浏览器向服务器发送HTTP请求。这个请求包括请求方法（如GET、POST等）、请求头部（如User-Agent、Cookies等）和请求体（对应于POST请求的数据）。请求被封装成数据包，并通过网络传输到服务器。\n\n服务器处理请求：服务器接收到浏览器发送的HTTP请求后，会根据请求的内容进行相应的处理。服务器会解析请求，处理业务逻辑，并生成相应的HTTP响应数据。\n\n接收响应：浏览器接收到服务器发送的HTTP响应。响应包括状态码（例如200表示成功、404表示未找到等）、响应头部（如Content-Type、Set-Cookie等）和响应体（HTML、CSS、JavaScript等）。\n\n渲染页面：浏览器开始解析响应体中的HTML代码。它构建DOM树（文档对象模型）表示网页的结构，并将对应的CSS样式应用到DOM元素上，最终生成渲染树。浏览器使用渲染引擎将渲染树转化为屏幕上的像素，以呈现给用户。\n\n下载资源：在渲染页面的过程中，浏览器会解析HTML中的链接（例如CSS、JavaScript、图片等资源）并发送相应的请求。浏览器会同时下载这些资源，以便完整地呈现页面。\n\n执行JavaScript：如果页面中有JavaScript代码，浏览器会解析并执行它。JavaScript可以修改DOM、发送异步请求、处理用户交互等。\n\n用户交互：浏览器监听用户的鼠标点击、键盘输入等交互事件，并触发相应的操作和事件处理函数。\n\n缓存处理：浏览器会缓存已经加载过的静态资源，例如图片、CSS和JavaScript文件。当再次请求相同的资源时，浏览器会直接从缓存中获取，提高用户的访问速度。\n\n连接关闭：当用户关闭页面或者导航到新的URL时，浏览器会断开与服务器的连接，释放资源。\n\n这些步骤描述了用户输入URL后，浏览器内部所发生的一系列动作。其中包含了网络请求、文档解析、资源加载、渲染和JavaScript执行等关键过程。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1、javascript-的基本特性和设计思想" tabindex="-1"><a class="header-anchor" href="#_1、javascript-的基本特性和设计思想" aria-hidden="true">#</a> 1、JavaScript 的基本特性和设计思想</h2><p>JavaScript 的语言设计，借鉴了很多语言的特性，比如: <strong>C 语言的基本语法、Java 的类型系统和内存管理、Scheme 的函数作为一等公民，还有 Self 基于原型（prototype）的继承机制</strong>。JavaScript 是一门非常优秀的语言，特别是**「原型继承机制」和「函数是一等公民」**这两个设计。</p><p>JavaScript也有很多的先天不足，例如：使用 new 加构造函数来创建对象，这种方式的背后隐藏了太多的细节，非常容易增加代码出错概率，而且也大大增加了新手的学习成本；初期的 JavaScript 没有块级作用域机制，使得 JavaScript 需要采取变量提升的策略，而变量提升又是非常反人性的设计。</p><p>了解 V8 我们需要关注 JavaScript 这些独特的设计思想和特性背后的实现。比如，为了实现函数是一等公民的特性，JavaScript 采取了基于对象的策略；再比如为了实现原型继承，V8 为每个对象引入了 <strong>proto</strong> 属性。</p><h2 id="_2、为什么需要-javascript-引擎" tabindex="-1"><a class="header-anchor" href="#_2、为什么需要-javascript-引擎" aria-hidden="true">#</a> 2、为什么需要 JavaScript 引擎？</h2><p>我们写的 JavaScript 代码直接交给浏览器或者 Node 执行时，底层的 CPU 是不认识的，也没法执行。<strong>CPU 只认识自己的指令集，指令集对应的是汇编代码</strong>。写汇编代码是一件很痛苦的事情。并且<strong>不同类型的 CPU 的指令集是不一样的，那就意味着需要给每一种 CPU 重写汇编代码</strong>。</p><p>JavaScript 引擎可以将 JS 代码编译为不同 CPU(Intel, ARM 以及 MIPS 等)对应的汇编代码，这样我们就不需要去翻阅每个 CPU 的指令集手册来编写汇编代码了。当然，<strong>JavaScript 引擎的工作也不只是编译代码，它还要负责执行代码、分配内存以及垃圾回收</strong>。</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code># 将一个寄存器中的数据移动到另外一个寄存器中\n<span class="token number">1000100111011000</span>  #机器指令\nmov ax<span class="token punctuation">,</span>bx         #汇编指令\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JavaScript 引擎的主要功能，就是结合 JavaScript 语言的特性和本质来编译执行它</strong>。</p><h2 id="_3、热门-javascript-的引擎有哪些" tabindex="-1"><a class="header-anchor" href="#_3、热门-javascript-的引擎有哪些" aria-hidden="true">#</a> 3、热门 JavaScript 的引擎有哪些？</h2>', 16);
const _hoisted_17 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3D7dFEJd8%2FiXgh6Z%2BMCGjPjA%3D%3D.dRT5O2vFsUKXSI%2BhoXjSxg%3D%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_18 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DWkKkcaFw0Tb6iDDpfMjR8Q%3D%3D.SIn6vhRgOEB7TZeorK2MlQ2X9FMq%2BnOtzQhAHTrhxY1Y%2Bccpx2J6XJ%2BcyLqkxjvD4mh8p2JEZYeAzqKDcQgaQB%2BFKUI1vchn%2BxUpobreR9U%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_19 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "Rhino，由 Mozilla 基金会管理，开放源代码，完全以 Java 编写，用于 HTMLUnit",
  -1
  /* HOISTED */
);
const _hoisted_20 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3Dr8Zds1UDwLUh%2BznXm0hJzw%3D%3D.SOF%2B5SqtCb9cGCxSdD2CnIooITSS7B8RCadzk7N60S%2F%2FdGjh7cZ%2BOmGw41WRLJE%2BDg4efkLcOXvdjlsI39z9Hx2xycEiSf%2Fbnrhap6Yr6tY%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_21 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "Chakra (JScript 引擎)，用于 Internet Explorer。",
  -1
  /* HOISTED */
);
const _hoisted_22 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "Chakra (JavaScript 引擎)，用于 Microsoft Edge。",
  -1
  /* HOISTED */
);
const _hoisted_23 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "KJS，KDE 的 ECMAScript／JavaScript 引擎，最初由哈里·波顿开发，用于 KDE 项目的 Konqueror 网页浏览器中。",
  -1
  /* HOISTED */
);
const _hoisted_24 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  "JerryScript — 三星推出的适用于嵌入式设备的小型 JavaScript 引擎。",
  -1
  /* HOISTED */
);
const _hoisted_25 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DxHsuZ%2FRlYiA%2BRttkQKYwpg%3D%3D.HjJGXcZX6jjzZ6AYMZsiC5GjcdO%2BmZH7ulrzvWuHyH8%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_26 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DRYiuOw%2Bb5tbGpqC0HEkYPQ%3D%3D.QmZGzNPXj%2BS8C0pRjnD6XLQ2VCX6zhOo1eUNHUMawGg%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_27 = /* @__PURE__ */ createBaseVNode(
  "p",
  null,
  "今天我们的主角是 **V8，**它是当下使用最广泛的 JavaScript 虚拟机，全球有超过 25 亿台安卓设备，而这些设备中都使用了 Chrome 浏览器，所以我们写的 JavaScript 应用，大都跑在 V8 上。",
  -1
  /* HOISTED */
);
const _hoisted_28 = /* @__PURE__ */ createBaseVNode(
  "p",
  null,
  "在正式介绍V8之前我们先来看下V8的调试工具D8。",
  -1
  /* HOISTED */
);
const _hoisted_29 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "_4、什么是-d8",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#_4、什么是-d8",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 4、什么是 D8？")
  ],
  -1
  /* HOISTED */
);
const _hoisted_30 = /* @__PURE__ */ createBaseVNode(
  "blockquote",
  null,
  [
    /* @__PURE__ */ createBaseVNode("p", null, [
      /* @__PURE__ */ createTextVNode("D8 是一个非常有用的调试工具，你可以把它看成是"),
      /* @__PURE__ */ createBaseVNode("strong", null, "debug for V8"),
      /* @__PURE__ */ createTextVNode("的缩写。我们"),
      /* @__PURE__ */ createBaseVNode("strong", null, "可以使用 d8 来查看 V8 在执行 JavaScript 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 d8 提供的私有 API 查看一些内部信息"),
      /* @__PURE__ */ createTextVNode("。")
    ])
  ],
  -1
  /* HOISTED */
);
const _hoisted_31 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "delveloper shell",
  -1
  /* HOISTED */
);
const _hoisted_32 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DgcefUAQfcZ8ohSIODuZMQg%3D%3D.MFZQPQOWJAh%2Fwv%2Bmk8jKzBdlUTYsN7LnFQ%2Fc%2B65Os3Q%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_33 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3DdP%2FJe7JaIxQd7SVFd84uqw%3D%3D.4TZN7upg6lZiidLtbz3MaNSJXAMYBTh3vMJu8HwP%2FP0%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_34 = /* @__PURE__ */ createStaticVNode('<h2 id="_5、什么是-v8" tabindex="-1"><a class="header-anchor" href="#_5、什么是-v8" aria-hidden="true">#</a> 5、什么是 V8？</h2><p>V8 是由 Google 开发的开源<strong>JavaScript 引擎，<strong>是 JavaScript <strong>虚拟机</strong>的一种，模拟实际计算机各种功能来</strong>实现代码的编译和执行</strong>。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的 <strong>编程语言 JavaScript</strong>，翻译成机器能够理解的**机器语言。**目前主要用在 Chrome 浏览器和 Node.js 中。</p><p>如图所示</p><p><img src="' + _imports_0 + '" alt="image-20231008144139279"></p><p>图中中间的**「黑盒」**就是 JavaScript 引擎 V8。目前市面上有很多种 JavaScript 引擎，诸如 SpiderMonkey、V8、JavaScriptCore 等。而由谷歌开发的开源项目 V8 是当下使用最广泛的 JavaScript 虚拟机。</p>', 5);
const _hoisted_39 = {
  href: "https://zhuanlan.zhihu.com/p/438498012",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_40 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "V8 最早被开发用以嵌入到 Google 的开源浏览器 Chrome 中",
  -1
  /* HOISTED */
);
const _hoisted_41 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3D%2Fo9H4XZgq72R8oUcKCmtwA%3D%3D.sfYGE8WmSO4NO5%2FFQcxWvb5xfvq7BnQhnuVln4xmFYyX2gXrOh7jU3SEV0CHjddPwhZjJgyGZDWU%2FLR1L7V8Xw%3D%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_42 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "但是 V8 是一个可以独立运行的模块，完全可以嵌入到任何 C ++应用程序中",
  -1
  /* HOISTED */
);
const _hoisted_43 = /* @__PURE__ */ createStaticVNode('<p>和其他JS引擎一样，<strong>V8 会编译 、执行 JavaScript 代码，管理内存，负责垃圾回收，与宿主语言的交互等。通过暴露宿主对象 ( 变量，函数等 ) 到 JavaScript，JavaScript 可以访问宿主环境中的对象，并在脚本中完成对宿主对象的操</strong></p><h2 id="_6、v8-引擎的内部结构" tabindex="-1"><a class="header-anchor" href="#_6、v8-引擎的内部结构" aria-hidden="true">#</a> 6、V8 引擎的内部结构</h2><p>V8 是一个非常复杂的项目，有超过 100 万行 C++代码。它由许多子模块构成，</p><p><strong>V8引擎</strong></p><hr><p>V8引擎是Google开发的高性能JavaScript引擎，用于解释和执行JavaScript代码。它的源代码包含了数十万行的C++代码，涉及到编译、解释、垃圾回收、优化等多个方面。</p><p>简要介绍:</p><ol><li>解析器（Parser）：负责将JavaScript代码解析成抽象语法树（AST）的形式，以便后续处理和执行。</li><li>编译器（Compiler）：将AST转换成字节码（Bytecode）或机器码（Machine Code），以便能够快速执行。</li><li>高性能的垃圾回收机制：V8使用了先进的垃圾回收算法，如分代式垃圾回收和增量式垃圾回收，以减小内存占用并提高性能。</li><li>即时编译器（Just-In-Time Compiler）：V8引擎使用即时编译技术，将热点代码（Hot Code）编译成高效的机器码，以提高执行速度。</li><li>内存管理：V8使用堆（Heap）和栈（Stack）来管理内存，其中堆用于存储动态分配的对象，栈用于存储函数的调用信息和局部变量。</li><li>引用计数和标记清除：V8使用引用计数和标记清除的方式来管理垃圾对象，并进行垃圾回收。</li></ol><h2 id="_7、解释执行和编译执行区别" tabindex="-1"><a class="header-anchor" href="#_7、解释执行和编译执行区别" aria-hidden="true">#</a> 7、解释执行和编译执行区别？</h2><p><strong>V8 本质上是一个虚拟机</strong>，因为计算机只能识别二进制指令，所以要让计算机执行一段高级语言通常有两种手段：</p><h3 id="解释执行" tabindex="-1"><a class="header-anchor" href="#解释执行" aria-hidden="true">#</a> 解释执行</h3><p>需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。具体流程如下图所示：</p><p><img src="' + _imports_1 + '" alt="image-20231008144436511"></p><h3 id="编译执行" tabindex="-1"><a class="header-anchor" href="#编译执行" aria-hidden="true">#</a> 编译执行</h3><p>采用这种方式时，也需要先将源代码转换为中间代码，然后我们的编译器再将中间代码编译成机器代码。通常编译成的机器代码是以二进制文件形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。</p><p><img src="' + _imports_2 + '" alt="image-20231008144448583"></p><p>以上就是计算机执行高级语言的两种基本的方式：<strong>解释执行和编译执行</strong>。但是针对不同的高级语言，这个实现方式还是有很大差异的，比如要执行 C 语言编写的代码，你需要将其编译为二进制代码的文件，然后再直接执行二进制代码。而对于像 Java 语言、JavaScript 语言等，则需要不同虚拟机，模拟计算机的这个编译执行流程。执行 Java 语言，需要经过 Java 虚拟机的转换，执行 JavaScript 需要经过 JavaScript 虚拟机的转换。</p><h3 id="解释执行和编译执行都有各自的优缺点" tabindex="-1"><a class="header-anchor" href="#解释执行和编译执行都有各自的优缺点" aria-hidden="true">#</a> 解释执行和编译执行都有各自的优缺点</h3><p><strong>解释执行启动速度快，但是执行时速度慢，而编译执行启动速度慢，但是执行速度快</strong>。为了充分地利用解释执行和编译执行的优点，规避其缺点，<strong>V8 采用了一种权衡策略，在启动过程中采用了解释执行的策略，但是如果某段代码的执行频率超过一个值，那么 V8 就会采用优化编译器将其编译成执行效率更加高效的机器代码</strong>。</p><h2 id="_8、v8-是怎么执行一段-javascript-代码的" tabindex="-1"><a class="header-anchor" href="#_8、v8-是怎么执行一段-javascript-代码的" aria-hidden="true">#</a> 8、V8 是怎么执行一段 JavaScript 代码的？</h2><p>在 V8 出现之前，所有的 JavaScript 虚拟机所采用的都是<strong>解释执行</strong>的方式，「这是 JavaScript 执行速度过慢的一个主要原因」。而 V8 率先引入了**即时编译（JIT）**的双轮驱动的设计，这是一种权衡策略，<strong>混合编译执行和解释执行这两种手段</strong>，给 JavaScript 的执行速度带来了极大的提升。</p><p>另外，V8 也是早于其他虚拟机引入了<strong>惰性编译、内联缓存、隐藏类</strong>等机制，进一步优化了 JavaScript 代码的编译执行效率。<strong>V8 的出现，将 JavaScript 虚拟机技术推向了一个全新的高度。</strong></p><p>接着通过下图，我们一起看看 V8 执行 JavaScript 代码的完整流程：</p><p><img src="' + _imports_3 + '" alt="image-20231008144556289"></p><p><strong>V8 执行一段 JavaScript 代码所经历的主要流程</strong>包括：</p><ul><li><ul><li>初始化基础环境；</li><li>解析源码生成 AST 和作用域；</li><li>依据 AST 和作用域生成字节码；</li><li>解释执行字节码；</li><li>监听热点代码；</li><li>优化热点代码为二进制的机器代码；</li><li>反优化生成的二进制机器代码。</li></ul></li></ul><p>V8编译流水线并不复杂，但其中涉及到了很多技术，诸如 <strong>JIT、延迟解析、隐藏类、内联缓存、事件循环系统、垃圾回收机制</strong>等等。这些技术决定着一段 JavaScript 代码能否正常执行，以及代码的执行效率。对提的几个名词做个简单介绍：</p><p>**「隐藏类（Hide Class）」：**是将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题。熟悉 了 V8 的工作机制，在编写 JavaScript 时，就能充分利用好隐藏类这种强大的优化特性，写出更加高效的代码。</p><p><strong>「惰性解析」：<strong>它目的是为了</strong>加速代码的启动速度</strong>，通过对惰性解析机制的学习，可以优化代码更加适应这个机制，从而提高程序性能。</p><p><strong>「V8事件循环系统」</strong>：事件循环系统和 JavaScript 中的难点<strong>异步编程特性</strong>紧密相关。JavaScript 是单线程的，JavaScript 代码都是在一个线程上执行，如果同一时间发送了多个 JavaScript 执行的请求，就需要排队，也就是进行异步编程。<strong>而V8事件循环系统会调度这些排队任务，保证 JavaScript 代码被 V8 有序地执行。因此也可以说，事件循环系统就是 V8 的心脏，它驱动了 V8 的持续工作</strong>。</p><p><strong>「垃圾回收机制」：<strong>自动垃圾回收是一种在堆内存中找出哪些对象在被使用，还有哪些对象没被使用，并且将后者删掉的机制。所谓使用中的对象（已引用对象），指的是程序中有指针指向的对象；而未使用中的对象（未引用对象），则没有被任何指针给指向，因此占用的内存也可以被回收掉。而</strong>JavaScript 也是一种自动垃圾回收的语言</strong>。</p><h2 id="_9、javascript-与-v8" tabindex="-1"><a class="header-anchor" href="#_9、javascript-与-v8" aria-hidden="true">#</a> 9、Javascript 与 V8</h2><h3 id="_9-1、一等公民的定义" tabindex="-1"><a class="header-anchor" href="#_9-1、一等公民的定义" aria-hidden="true">#</a> 9.1、一等公民的定义</h3><p>在编程语言中，<strong>一等公民</strong>可以作为函数参数，可以作为函数返回值，也可以赋值给变量。<strong>如果某个编程语言的函数，可以和这个语言的数据类型做一样的事情，我们就把这个语言中的函数称为一等公民</strong>。</p><p>例如，字符串在几乎所有编程语言中都是一等公民，字符串可以做为函数参数，字符串可以作为函数返回值，字符串也可以赋值给变量。对于各种编程语言来说，函数就不一定是一等公民了，比如 Java 8 之前的版本。</p><p>对于 JavaScript 来说，函数可以赋值给变量，也可以作为函数参数，还可以作为函数返回值，因此 <strong>JavaScript 中函数是一等公民</strong>。</p><h3 id="_9-2、动态作用域与静态作用域" tabindex="-1"><a class="header-anchor" href="#_9-2、动态作用域与静态作用域" aria-hidden="true">#</a> 9.2、动态作用域与静态作用域</h3><p>如果一门语言的作用域是<strong>静态作用域</strong>，那么<strong>符号之间的引用关系能够根据程序代码在编译时就确定清楚，在运行时不会变</strong>。某个函数是在哪声明的，就具有它所在位置的作用域。它能够访问哪些变量，那么就跟这些变量绑定了，在运行时就一直能访问这些变量。即静态作用域可以由程序代码决定，在编译时就能完全确定。大多数语言都是静态作用域的。</p><p><strong>动态作用域（Dynamic Scope）</strong>。也就是说，变量引用跟变量声明不是在编译时就绑定死了的。在运行时，它是在运行环境中动态地找一个相同名称的变量。在 macOS 或 Linux 中用的 bash 脚本语言，就是动态作用域的。</p><h3 id="_9-3、闭包的三个基础特性" tabindex="-1"><a class="header-anchor" href="#_9-3、闭包的三个基础特性" aria-hidden="true">#</a> 9.3、闭包的三个基础特性</h3><ul><li>JavaScript 语言允许在函数内部定义新的函数</li><li>可以在内部函数中访问父函数中定义的变量</li><li>因为 JavaScript 中的函数是一等公民，所以函数可以作为另外一个函数的返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 闭包（静态作用域，一等公民，调用栈的矛盾体）</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> d<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4、惰性解析" tabindex="-1"><a class="header-anchor" href="#_9-4、惰性解析" aria-hidden="true">#</a> 9.4、惰性解析</h3><blockquote><p><strong>惰性解析</strong>是指解析器在解析的过程中，如果遇到函数声明，那么会跳过函数内部的代码，并不会为其生成 AST 和字节码，而仅仅生成顶层代码的 AST 和字节码。</p></blockquote><p>在编译 JavaScript 代码的过程中，V8 并不会一次性将所有的 JavaScript 解析为中间代码，这主要是基于以下两点：</p><ol><li>首先，<strong>如果一次解析和编译所有的 JavaScript 代码</strong>，过多的代码会增加编译时间，这会严重影响到首次执行 JavaScript 代码的速度，让用户感觉到<strong>卡顿</strong>。因为有时候一个页面的 JavaScript 代码很大，如果要将所有的代码一次性解析编译完成，那么会大大增加用户的等待时间；</li><li>其次，解析完成的字节码和编译之后的机器代码都会存放在内存中，如果一次性解析和编译所有 JavaScript 代码，那么这些中间代码和机器代码将会一直<strong>占用内存</strong>。</li></ol><p>基于以上的原因，所有主流的 JavaScript 虚拟机都实现了惰性解析。<strong>闭包给惰性解析带来的问题</strong>：上文的 d 不能随着 foo 函数的执行上下文被销毁掉。</p><h3 id="_9-5、预解析器" tabindex="-1"><a class="header-anchor" href="#_9-5、预解析器" aria-hidden="true">#</a> 9.5、预解析器</h3><blockquote><p>V8 引入<strong>预解析器</strong>，比如当解析顶层代码的时候，遇到了一个函数，那么预解析器并不会直接跳过该函数，而是对该函数做一次快速的预解析。</p></blockquote><ol><li>判断当前函数是不是存在一些语法上的错误，发现了语法错误，那么就会向 V8 抛出语法错误；</li><li>检查函数内部是否引用了外部变量，如果引用了外部的变量，预解析器会将栈中的变量复制到堆中，在下次执行到该函数的时候，直接使用堆中的引用，这样就解决了闭包所带来的问题。</li></ol><h3 id="_9-6、v8-内部是如何存储对象的-快属性和慢属性" tabindex="-1"><a class="header-anchor" href="#_9-6、v8-内部是如何存储对象的-快属性和慢属性" aria-hidden="true">#</a> 9.6、V8 内部是如何存储对象的：快属性和慢属性</h3><p>下面的代码会输出什么：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-200&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-1&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-100&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar-B&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-50&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-9&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-8&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-3&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-5&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar-D&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar-C&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">index:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bar<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//输出：</span>\n<span class="token comment">// index:1  value:test-1</span>\n<span class="token comment">// index:3  value:test-3</span>\n<span class="token comment">// index:5  value:test-5</span>\n<span class="token comment">// index:8  value:test-8</span>\n<span class="token comment">// index:9  value:test-9</span>\n<span class="token comment">// index:50  value:test-50</span>\n<span class="token comment">// index:100  value:test-100</span>\n<span class="token comment">// index:200  value:test-200</span>\n<span class="token comment">// index:B  value:bar-B</span>\n<span class="token comment">// index:D  value:bar-D</span>\n<span class="token comment">// index:C  value:bar-C</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 53);
const _hoisted_96 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3D3ZZ0dumlISZGkYNJUNpHAA%3D%3D.Z9kiu6V9GNFz3bo8rtc0hyws7wC%2FnbwqyM6tWWK27tc6nAVdEif4oXPoeZaxiYvMjj9ZDVIFfwG%2BSl%2F5jHyCtg%3D%3D",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_97 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "数字属性应该按照索引值大小升序排列，字符串属性根据创建时的顺序升序排列",
  -1
  /* HOISTED */
);
const _hoisted_98 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "排序属性",
  -1
  /* HOISTED */
);
const _hoisted_99 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "常规属性",
  -1
  /* HOISTED */
);
const _hoisted_100 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "对象内属性 (in-object properties)",
  -1
  /* HOISTED */
);
const _hoisted_101 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">property_num<span class="token punctuation">,</span> element_num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//添加可索引属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> element_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">element</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//添加常规属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> property_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ppt <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">property</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>ppt<span class="token punctuation">]</span> <span class="token operator">=</span> ppt<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 1);
const _hoisted_102 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "内存快照",
  -1
  /* HOISTED */
);
const _hoisted_103 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "Take heap snapshot",
  -1
  /* HOISTED */
);
const _hoisted_104 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3Drmd%2BgRDCIWfrDDJuDel9vg%3D%3D.bqSNBw7Z3dktC36w%2B8skVUX6A709vSYPGq1eGOTLnzUjBDq%2FhCuMxB5Azn%2F9zxOX",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_105 = /* @__PURE__ */ createStaticVNode('<p>我们将保存在线性数据结构中的属性称之为“<strong>快属性</strong>”，因为线性数据结构中只需要通过索引即可以访问到属性，虽然访问线性结构的速度快，但是<strong>如果从线性结构中添加或者删除大量的属性时，则执行效率会非常低，这主要因为会产生大量时间和内存开销</strong>。因此，如果一个对象的属性过多时，V8 就会采取另外一种存储策略，那就是“<strong>慢属性</strong>”策略，但慢属性的对象内部会有独立的非线性数据结构 (字典) 作为属性存储容器。所有的属性元信息不再是线性存储的，而是直接保存在属性字典中</p><p><img src="' + _imports_4 + '" alt="image-20231008144826242"></p><p>因为 JavaScript 中的对象是由一组组属性和值组成的，所以最简单的方式是使用一个字典来保存属性和值，但是由于字典是非线性结构，所以如果使用字典，读取效率会大大降低。为了提升查找效率，<strong>V8 在对象中添加了两个隐藏属性，排序属性和常规属性</strong>，element 属性指向了 elements 对象，在 elements 对象中，会按照顺序存放排序属性。properties 属性则指向了 properties 对象，在 properties 对象中，会按照创建时的顺序保存常规属性。</p><p>通过引入这两个属性，加速了 V8 查找属性的速度，为了更加进一步提升查找效率，V8 还实现了内置内属性的策略，当常规属性少于一定数量时，V8 就会将这些常规属性直接写进对象中，这样又节省了一个中间步骤。</p><p>但是<strong>如果对象中的属性过多时，或者存在反复添加或者删除属性的操作，那么 V8 就会将线性的存储模式降级为非线性的字典存储模式，这样虽然降低了查找速度，但是却提升了修改对象的属性的速度</strong>。</p><h3 id="_9-7、堆空间和栈空间" tabindex="-1"><a class="header-anchor" href="#_9-7、堆空间和栈空间" aria-hidden="true">#</a> 9.7、堆空间和栈空间</h3><p><strong>栈空间</strong></p><p>现代语言都是基于函数的，每个函数在执行过程中，都有自己的生命周期和作用域，当函数执行结束时，其作用域也会被销毁，因此，我们会使用栈这种数据结构来管理函数的调用过程，我们也把管理函数调用过程的栈结构称之为<strong>调用栈</strong>。</p><p><strong>栈空间</strong>主要是用来管理 JavaScript 函数调用的，栈是内存中连续的一块空间，同时栈结构是“先进后出”的策略。在函数调用过程中，涉及到上下文相关的内容都会存放在栈上，比如原生类型、引用到的对象的地址、函数的执行状态、this 值等都会存在在栈上。当一个函数执行结束，那么该函数的执行上下文便会被销毁掉。</p><p><strong>栈空间的最大的特点是空间连续</strong>，所以在栈中每个元素的地址都是固定的，因此栈空间的查找效率非常高，但是通常在内存中，很难分配到一块很大的连续空间，因此，V8 对栈空间的大小做了限制，如果函数调用层过深，那么 V8 就有可能抛出栈溢出的错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 栈溢出</span>\n<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>栈的优势和缺点：</p><ol><li>栈的结构非常适合函数调用过程。</li><li><strong>在栈上分配资源和销毁资源的速度非常快</strong>，这主要归结于栈空间是连续的，分配空间和销毁空间只需要移动下指针就可以了。</li><li>虽然操作速度非常快，但是栈也是有缺点的，其中最大的缺点也是它的优点所造成的，那就是<strong>栈是连续的</strong>，所以要想在内存中分配一块连续的大空间是非常难的，因此<strong>栈空间是有限的</strong>。</li></ol><p>堆<strong>空间</strong></p><p><strong>堆空间</strong>是一种<strong>树</strong>形的存储结构，<strong>用来存储对象类型的离散的数据</strong>，JavaScript 中除了原生类型的数据，其他的都是对象类型，诸如函数、数组，在浏览器中还有 window 对象、document 对象等，这些都是存在堆空间的。</p><p>宿主在启动 V8 的过程中，会同时创建堆空间和栈空间，再继续往下执行，产生的新数据都会存放在这两个空间中。</p><h3 id="_9-8、继承" tabindex="-1"><a class="header-anchor" href="#_9-8、继承" aria-hidden="true">#</a> 9.8、继承</h3><blockquote><p><strong>继承就是一个对象可以访问另外一个对象中的属性和方法，在 JavaScript 中，我们通过原型和原型链的方式来实现了继承特性</strong></p></blockquote><p>javaScript 的每个对象都包含了一个隐藏属性 <code>__proto__</code> ，我们就把该隐藏属性 <code>__proto__</code> 称之为该对象的原型 (prototype)，<code>__proto__</code> 指向了内存中的另外一个对象，我们就把 <code>__proto__</code> 指向的对象称为该对象的原型对象，那么该对象就可以直接访问其原型对象的方法或者属性。</p><p>JavaScript 中的继承非常简洁，就是每个对象都有一个原型属性，该属性指向了原型对象，查找属性的时候，JavaScript 虚拟机会沿着原型一层一层向上查找，直至找到正确的属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Default&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;Default&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">getInfo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Type is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，color is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Dog&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;Black&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用<code>__proto__</code>实现继承：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dog<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> animal<span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常隐藏属性是不能使用 JavaScript 来直接与之交互的。虽然现代浏览器都开了一个口子，让 JavaScript 可以访问隐藏属性 <code>__proto__</code>，但是在实际项目中，我们不应该直接通过 <code>__proto__</code> 来访问或者修改该属性，其主要原因有两个：</p><ul><li>首先，<strong>这是隐藏属性，并不是标准定义的</strong>;</li><li>其次，<strong>使用该属性会造成严重的性能问题</strong>。因为 JavaScript 通过隐藏类优化了很多原有的对象结构，所以通过直接修改<code>__proto__</code>会直接破坏现有已经优化的结构，触发 V8 重构该对象的隐藏类！</li></ul><h3 id="_9-9、构造函数是怎么创建对象的" tabindex="-1"><a class="header-anchor" href="#_9-9、构造函数是怎么创建对象的" aria-hidden="true">#</a> 9.9、构造函数是怎么创建对象的？</h3><p>在 JavaScript 中，<strong>使用 new 加上构造函数的这种组合来创建对象和实现对象的继承</strong>。不过使用这种方式<strong>隐含的语义过于隐晦</strong>。其实是 JavaScript 为了吸引 Java 程序员、在语法层面去蹭 Java 热点，所以就被硬生生地强制加入了非常不协调的关键字 new。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">DogFactory</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DogFactory</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Black&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实当 V8 执行上面这段代码时，V8 在背后悄悄地做了以下几件事情：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">DogFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n<span class="token function">DogFactory</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>dog<span class="token punctuation">,</span> <span class="token string">&#39;Dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Black&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-10、隐藏类和内联缓存" tabindex="-1"><a class="header-anchor" href="#_9-10、隐藏类和内联缓存" aria-hidden="true">#</a> 9.10、隐藏类和内联缓存</h3><p>JavaScript 是一门动态语言，其执行效率要低于静态语言，V8 为了提升 JavaScript 的执行速度，借鉴了很多静态语言的特性，比如实现了 JIT 机制，<strong>为了提升对象的属性访问速度而引入了隐藏类，为了加速运算而引入了内联缓存。</strong></p><p><strong>为什么静态语言的效率更高?</strong></p><p>静态语言中，如 C++ 在声明一个对象之前需要定义该对象的结构，代码在执行之前需要先被编译，编译的时候，每个对象的形状都是固定的，也就是说，在代码的执行过程中是无法被改变的。可以直接通过<strong>偏移量</strong>查询来查询对象的属性值，这也就是静态语言的执行效率高的一个原因。</p><p>JavaScript 在运行时，对象的属性是可以被修改的，所以当 V8 使用了一个对象时，比如使用了 obj.x 的时候，它并不知道该对象中是否有 x，也不知道 x 相对于对象的偏移量是多少，也就是说 V8 并不知道该对象的具体的形状。那么，当在 JavaScript 中要查询对象 obj 中的 x 属性时，V8 会按照具体的规则一步一步来查询，这个过程非常的慢且耗时。</p><p><strong>将静态的特性引入到 V8</strong></p><p><strong>V8 采用的一个思路就是将 JavaScript 中的对象静态化</strong>，也就是 V8 在运行 JavaScript 的过程中，会假设 JavaScript 中的对象是静态的。</p><p>具体地讲，V8 对每个对象做如下两点假设：</p><ol><li>对象创建好了之后就不会添加新的属性；</li><li>对象创建好了之后也不会删除属性。</li></ol><p>符合这两个假设之后，V8 就可以对 JavaScript 中的对象做深度优化了。V8 会为每个对象创建一个<strong>隐藏类</strong>，对象的隐藏类中记录了该对象一些基础的布局信息，包括以下两点：</p><ol><li>对象中所包含的所有的属性；</li><li>每个属性相对于对象的偏移量。</li></ol><p>有了隐藏类之后，那么当 V8 访问某个对象中的某个属性时，就会<strong>先去隐藏类中查找该属性相对于它的对象的偏移量</strong>，有了偏移量和属性类型，V8 就可以直接去内存中取出对应的属性值，而不需要经历一系列的查找过程，那么这就大大提升了 V8 查找对象的效率。</p><p>在 V8 中，把隐藏类又称为 map，每个对象都有一个 map 属性，其值指向内存中的隐藏类；</p><p>map 描述了对象的内存布局，比如对象都包括了哪些属性，这些数据对应于对象的偏移量是多少。</p><p><strong>通过 d8 查看隐藏类</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">let</span> point1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> point2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> point3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">.</span><span class="token operator">/</span>d8 <span class="token operator">--</span>allow<span class="token operator">-</span>natives<span class="token operator">-</span>syntax <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>js\n\n# <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>\n<span class="token literal-property property">DebugPrint</span><span class="token operator">:</span> <span class="token number">0x1ea3080c5bc5</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">JS_OBJECT_TYPE</span><span class="token punctuation">]</span>\n# <span class="token constant">V8</span> 为 point1 对象创建的隐藏类\n <span class="token operator">-</span> map<span class="token operator">:</span> <span class="token number">0x1ea308284ce9</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>FastProperties<span class="token punctuation">]</span>\n <span class="token operator">-</span> prototype<span class="token operator">:</span> <span class="token number">0x1ea308241395</span> <span class="token operator">&lt;</span>Object map <span class="token operator">=</span> <span class="token number">0x1ea3082801c1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> elements<span class="token operator">:</span> <span class="token number">0x1ea3080406e9</span> <span class="token operator">&lt;</span>FixedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">]</span>\n <span class="token operator">-</span> properties<span class="token operator">:</span> <span class="token number">0x1ea3080406e9</span> <span class="token operator">&lt;</span>FixedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    #x<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data field <span class="token number">0</span><span class="token punctuation">)</span>\n    #y<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data field <span class="token number">1</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token number">0x1ea308284ce9</span><span class="token operator">:</span> <span class="token punctuation">[</span>Map<span class="token punctuation">]</span>\n <span class="token operator">-</span> type<span class="token operator">:</span> <span class="token constant">JS_OBJECT_TYPE</span>\n <span class="token operator">-</span> instance size<span class="token operator">:</span> <span class="token number">20</span>\n <span class="token operator">-</span> inobject properties<span class="token operator">:</span> <span class="token number">2</span>\n <span class="token operator">-</span> elements kind<span class="token operator">:</span> <span class="token constant">HOLEY_ELEMENTS</span>\n <span class="token operator">-</span> unused property fields<span class="token operator">:</span> <span class="token number">0</span>\n <span class="token operator">-</span> <span class="token keyword">enum</span> <span class="token literal-property property">length</span><span class="token operator">:</span> invalid\n <span class="token operator">-</span> stable_map\n <span class="token operator">-</span> back pointer<span class="token operator">:</span> <span class="token number">0x1ea308284cc1</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> prototype_validity cell<span class="token operator">:</span> <span class="token number">0x1ea3081c0451</span> <span class="token operator">&lt;</span>Cell value<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> instance <span class="token function">descriptors</span> <span class="token punctuation">(</span>own<span class="token punctuation">)</span> #<span class="token number">2</span><span class="token operator">:</span> <span class="token number">0x1ea3080c5bf5</span> <span class="token operator">&lt;</span>DescriptorArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> prototype<span class="token operator">:</span> <span class="token number">0x1ea308241395</span> <span class="token operator">&lt;</span>Object map <span class="token operator">=</span> <span class="token number">0x1ea3082801c1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> constructor<span class="token operator">:</span> <span class="token number">0x1ea3082413b1</span> <span class="token operator">&lt;</span>JSFunction <span class="token function">Object</span> <span class="token punctuation">(</span>sfi <span class="token operator">=</span> <span class="token number">0x1ea3081c557d</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> dependent code<span class="token operator">:</span> <span class="token number">0x1ea3080401ed</span> <span class="token operator">&lt;</span>Other heap <span class="token function">object</span> <span class="token punctuation">(</span><span class="token constant">WEAK_FIXED_ARRAY_TYPE</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> construction counter<span class="token operator">:</span> <span class="token number">0</span>\n\n# <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>\n<span class="token literal-property property">DebugPrint</span><span class="token operator">:</span> <span class="token number">0x1ea3080c5c1d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">JS_OBJECT_TYPE</span><span class="token punctuation">]</span>\n# <span class="token constant">V8</span> 为 point2 对象创建的隐藏类\n <span class="token operator">-</span> map<span class="token operator">:</span> <span class="token number">0x1ea308284ce9</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>FastProperties<span class="token punctuation">]</span>\n <span class="token operator">-</span> prototype<span class="token operator">:</span> <span class="token number">0x1ea308241395</span> <span class="token operator">&lt;</span>Object map <span class="token operator">=</span> <span class="token number">0x1ea3082801c1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> elements<span class="token operator">:</span> <span class="token number">0x1ea3080406e9</span> <span class="token operator">&lt;</span>FixedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">]</span>\n <span class="token operator">-</span> properties<span class="token operator">:</span> <span class="token number">0x1ea3080406e9</span> <span class="token operator">&lt;</span>FixedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    #x<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data field <span class="token number">0</span><span class="token punctuation">)</span>\n    #y<span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data field <span class="token number">1</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token number">0x1ea308284ce9</span><span class="token operator">:</span> <span class="token punctuation">[</span>Map<span class="token punctuation">]</span>\n <span class="token operator">-</span> type<span class="token operator">:</span> <span class="token constant">JS_OBJECT_TYPE</span>\n <span class="token operator">-</span> instance size<span class="token operator">:</span> <span class="token number">20</span>\n <span class="token operator">-</span> inobject properties<span class="token operator">:</span> <span class="token number">2</span>\n <span class="token operator">-</span> elements kind<span class="token operator">:</span> <span class="token constant">HOLEY_ELEMENTS</span>\n <span class="token operator">-</span> unused property fields<span class="token operator">:</span> <span class="token number">0</span>\n <span class="token operator">-</span> <span class="token keyword">enum</span> <span class="token literal-property property">length</span><span class="token operator">:</span> invalid\n <span class="token operator">-</span> stable_map\n <span class="token operator">-</span> back pointer<span class="token operator">:</span> <span class="token number">0x1ea308284cc1</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> prototype_validity cell<span class="token operator">:</span> <span class="token number">0x1ea3081c0451</span> <span class="token operator">&lt;</span>Cell value<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> instance <span class="token function">descriptors</span> <span class="token punctuation">(</span>own<span class="token punctuation">)</span> #<span class="token number">2</span><span class="token operator">:</span> <span class="token number">0x1ea3080c5bf5</span> <span class="token operator">&lt;</span>DescriptorArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> prototype<span class="token operator">:</span> <span class="token number">0x1ea308241395</span> <span class="token operator">&lt;</span>Object map <span class="token operator">=</span> <span class="token number">0x1ea3082801c1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> constructor<span class="token operator">:</span> <span class="token number">0x1ea3082413b1</span> <span class="token operator">&lt;</span>JSFunction <span class="token function">Object</span> <span class="token punctuation">(</span>sfi <span class="token operator">=</span> <span class="token number">0x1ea3081c557d</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> dependent code<span class="token operator">:</span> <span class="token number">0x1ea3080401ed</span> <span class="token operator">&lt;</span>Other heap <span class="token function">object</span> <span class="token punctuation">(</span><span class="token constant">WEAK_FIXED_ARRAY_TYPE</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> construction counter<span class="token operator">:</span> <span class="token number">0</span>\n\n# <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>\n<span class="token literal-property property">DebugPrint</span><span class="token operator">:</span> <span class="token number">0x1ea3080c5c31</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">JS_OBJECT_TYPE</span><span class="token punctuation">]</span>\n# <span class="token constant">V8</span> 为 point3 对象创建的隐藏类\n <span class="token operator">-</span> map<span class="token operator">:</span> <span class="token number">0x1ea308284d39</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>FastProperties<span class="token punctuation">]</span>\n <span class="token operator">-</span> prototype<span class="token operator">:</span> <span class="token number">0x1ea308241395</span> <span class="token operator">&lt;</span>Object map <span class="token operator">=</span> <span class="token number">0x1ea3082801c1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> elements<span class="token operator">:</span> <span class="token number">0x1ea3080406e9</span> <span class="token operator">&lt;</span>FixedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">]</span>\n <span class="token operator">-</span> properties<span class="token operator">:</span> <span class="token number">0x1ea3080406e9</span> <span class="token operator">&lt;</span>FixedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    #x<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data field <span class="token number">0</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token number">0x1ea308284d39</span><span class="token operator">:</span> <span class="token punctuation">[</span>Map<span class="token punctuation">]</span>\n <span class="token operator">-</span> type<span class="token operator">:</span> <span class="token constant">JS_OBJECT_TYPE</span>\n <span class="token operator">-</span> instance size<span class="token operator">:</span> <span class="token number">16</span>\n <span class="token operator">-</span> inobject properties<span class="token operator">:</span> <span class="token number">1</span>\n <span class="token operator">-</span> elements kind<span class="token operator">:</span> <span class="token constant">HOLEY_ELEMENTS</span>\n <span class="token operator">-</span> unused property fields<span class="token operator">:</span> <span class="token number">0</span>\n <span class="token operator">-</span> <span class="token keyword">enum</span> <span class="token literal-property property">length</span><span class="token operator">:</span> invalid\n <span class="token operator">-</span> stable_map\n <span class="token operator">-</span> back pointer<span class="token operator">:</span> <span class="token number">0x1ea308284d11</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> prototype_validity cell<span class="token operator">:</span> <span class="token number">0x1ea3081c0451</span> <span class="token operator">&lt;</span>Cell value<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> instance <span class="token function">descriptors</span> <span class="token punctuation">(</span>own<span class="token punctuation">)</span> #<span class="token number">1</span><span class="token operator">:</span> <span class="token number">0x1ea3080c5c41</span> <span class="token operator">&lt;</span>DescriptorArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> prototype<span class="token operator">:</span> <span class="token number">0x1ea308241395</span> <span class="token operator">&lt;</span>Object map <span class="token operator">=</span> <span class="token number">0x1ea3082801c1</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> constructor<span class="token operator">:</span> <span class="token number">0x1ea3082413b1</span> <span class="token operator">&lt;</span>JSFunction <span class="token function">Object</span> <span class="token punctuation">(</span>sfi <span class="token operator">=</span> <span class="token number">0x1ea3081c557d</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> dependent code<span class="token operator">:</span> <span class="token number">0x1ea3080401ed</span> <span class="token operator">&lt;</span>Other heap <span class="token function">object</span> <span class="token punctuation">(</span><span class="token constant">WEAK_FIXED_ARRAY_TYPE</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>\n <span class="token operator">-</span> construction counter<span class="token operator">:</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多个对象共用一个隐藏</strong></p><p>在 V8 中，<strong>每个对象都有一个 map 属性</strong>，该属性值指向该对象的隐藏类。不过<strong>如果两个对象的形状是相同的，V8 就会为其复用同一个隐藏类</strong>，这样有两个好处：</p><ul><li><ul><li>减少隐藏类的创建次数，也间接加速了代码的执行速度；</li><li>减少了隐藏类的存储空间。</li></ul></li></ul><p>那么，什么情况下两个对象的形状是相同的，要满足以下两点：</p><ul><li><ul><li>相同的属性名称；</li><li>相等的属性个数。</li></ul></li></ul><p><strong>重新构建隐藏类</strong></p><p>给一个对象添加新的属性，删除新的属性，或者改变某个属性的数据类型都会改变这个对象的形状，那么势必也就会触发 V8 为改变形状后的对象重建新的隐藏类。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>\npoint<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>\npoint<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n# <span class="token punctuation">.</span><span class="token operator">/</span>d8 <span class="token operator">--</span>allow<span class="token operator">-</span>natives<span class="token operator">-</span>syntax <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>js\n<span class="token literal-property property">DebugPrint</span><span class="token operator">:</span> <span class="token number">0x32c7080c5b2d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">JS_OBJECT_TYPE</span><span class="token punctuation">]</span>\n <span class="token operator">-</span> map<span class="token operator">:</span> <span class="token number">0x32c7082802d9</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>FastProperties<span class="token punctuation">]</span>\n <span class="token operator">...</span>\n\n<span class="token literal-property property">DebugPrint</span><span class="token operator">:</span> <span class="token number">0x32c7080c5b2d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">JS_OBJECT_TYPE</span><span class="token punctuation">]</span>\n <span class="token operator">-</span> map<span class="token operator">:</span> <span class="token number">0x32c708284cc1</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>FastProperties<span class="token punctuation">]</span>\n <span class="token operator">...</span>\n\n<span class="token literal-property property">DebugPrint</span><span class="token operator">:</span> <span class="token number">0x32c7080c5b2d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">JS_OBJECT_TYPE</span><span class="token punctuation">]</span>\n <span class="token operator">-</span> map<span class="token operator">:</span> <span class="token number">0x32c708284ce9</span> <span class="token operator">&lt;</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token constant">HOLEY_ELEMENTS</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>FastProperties<span class="token punctuation">]</span>\n <span class="token operator">...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次给对象添加了一个新属性之后，该对象的隐藏类的地址都会改变，这也就意味着隐藏类也随着改变了；如果删除对象的某个属性，那么对象的形状也就随着发生了改变，这时 V8 也会重建该对象的隐藏类；</p><p><strong>最佳实践</strong></p><ul><li><ul><li>使用字面量初始化对象时，要保证属性的顺序是一致的；</li><li>尽量使用字面量一次性初始化完整对象属性；</li><li>尽量避免使用 delete 方法。</li></ul></li></ul><p><strong>通过内联缓存来提升函数执行效率</strong></p><p>虽然隐藏类能够加速查找对象的速度，但是在 V8 查找对象属性值的过程中，依然有查找对象的隐藏类和根据隐藏类来查找对象属性值的过程。如果一个函数中利用了对象的属性，并且这个函数会被多次执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadX</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 对比时间差异</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">---</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">----</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token function">loadX</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">---</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">----</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token function">loadX</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 产生多态</span>\n  <span class="token function">loadX</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通常 V8 获取 obj.x 的流程</strong>：</p><ul><li>找对象 obj 的隐藏类；</li><li>再通过隐藏类查找 x 属性偏移量；</li><li>然后根据偏移量获取属性值，在这段代码中 loadX 函数会被反复执行，那么获取 obj.x 的流程也需要反复被执行；</li></ul><p><strong>内联缓存及其原理</strong>：</p><ul><li>函数 loadX 在一个 for 循环里面被重复执行了很多次，因此 V8 会想尽一切办法来压缩这个查找过程，以提升对象的查找效率。这个加速函数执行的策略就是<strong>内联缓存 (Inline Cache)</strong>，简称为 IC；</li><li><strong>IC 的原理</strong>：在 V8 执行函数的过程中，会观察函数中一些<strong>调用点 (CallSite)</strong> 上的关键中间数据，然后将这些数据缓存起来，当下次再次执行该函数的时候，V8 就可以直接利用这些中间数据，节省了再次获取这些数据的过程，因此 V8 利用 IC，可以有效提升一些重复代码的执行效率。</li><li>IC 会为每个函数维护一个<strong>反馈向量 (FeedBack Vector)</strong>，反馈向量记录了函数在执行过程中的一些关键的中间数据。</li><li>反馈向量其实就是一个表结构，它由很多项组成的，每一项称为一个插槽 (Slot)，V8 会依次将执行 loadX 函数的中间数据写入到反馈向量的插槽中。</li><li>当 V8 再次调用 loadX 函数时，比如执行到 loadX 函数中的 return obj.x 语句时，它就会在对应的插槽中查找 x 属性的偏移量，之后 V8 就能直接去内存中获取 obj.x 的属性值了。这样就大大提升了 V8 的执行效率。</li></ul><p><strong>单态、多态和超态</strong>：</p><ul><li>如果一个插槽中只包含 1 个隐藏类，那么我们称这种状态为单态 (monomorphic)；</li><li>如果一个插槽中包含了 2 ～ 4 个隐藏类，那我们称这种状态为多态 (polymorphic)；</li><li>如果一个插槽中超过 4 个隐藏类，那我们称这种状态为超态 (magamorphic)。</li><li>单态的性能优于多态和超态，所以我们需要稍微避免多态和超态的情况。要避免多态和超态，那么就尽量默认所有的对象属性是不变的，比如你写了一个 loadX(obj) 的函数，那么当传递参数时，尽量不要使用多个不同形状的 obj 对象。</li></ul><p>V8 引入了内联缓存（IC），<strong>IC 会监听每个函数的执行过程，并在一些关键的地方埋下监听点</strong>，这些包括了加载对象属性 (Load)、给对象属性赋值 (Store)、还有函数调用 (Call)，V8 会将监听到的数据写入一个称为反馈向量 (FeedBack Vector) 的结构中，同时 V8 会为每个执行的函数维护一个反馈向量。有了反馈向量缓存的临时数据，V8 就可以缩短对象属性的查找路径，从而提升执行效率。但是针对函数中的同一段代码，如果对象的隐藏类是不同的，那么反馈向量也会记录这些不同的隐藏类，这就出现了多态和超态的情况。<strong>我们在实际项目中，要尽量避免出现多态或者超态的情况</strong>。</p><h3 id="_9-11、异步编程与消息队列" tabindex="-1"><a class="header-anchor" href="#_9-11、异步编程与消息队列" aria-hidden="true">#</a> 9.11、异步编程与消息队列</h3><p><strong>1、V8 是如何执行回调函数的?</strong></p><p>回调函数有两种类型：同步回调和异步回调，同步回调函数是在执行函数内部被执行的，而异步回调函数是在执行函数外部被执行的。通用 UI 线程宏观架构：</p><p><img src="' + _imports_5 + '" alt="image-20231008144925567"></p><p>UI 线程提供一个<strong>消息队列</strong>，并将待执行的事件添加到消息队列中，然后 UI 线程会不断循环地从消息队列中取出事件、执行事件。关于异步回调，这里也有两种不同的类型，其典型代表是 setTimeout 和 XMLHttpRequest：</p><ul><li>setTimeout 的执行流程其实是比较简单的，在 setTimeout 函数内部封装回调消息，并将回调消息添加进消息队列，然后主线程从消息队列中取出回调事件，并执行回调函数。</li><li>XMLHttpRequest 稍微复杂一点，因为下载过程需要放到单独的一个线程中去执行，所以执行 XMLHttpRequest.send 的时候，宿主会将实际请求转发给网络线程，然后 send 函数退出，主线程继续执行下面的任务。网络线程在执行下载的过程中，会将一些中间信息和回调函数封装成新的消息，并将其添加进消息队列中，然后主线程从消息队列中取出回调事件，并执行回调函数。</li></ul><p><strong>2、宏任务和微任务</strong></p><p><strong>「调用栈」</strong>：调用栈是一种数据结构，用来管理在主线程上执行的函数的调用关系。主线程在执行任务的过程中，如果函数的调用层次过深，可能造成栈溢出的错误，我们<strong>可以使用 setTimeout 来解决栈溢出的问题</strong>。setTimeout 的本质是将同步函数调用改成异步函数调用，这里的异步调用是将回调函数封装成宏任务，并将其添加进消息队列中，然后主线程再按照一定规则循环地从消息队列中读取下一个宏任务。</p><p><strong>「宏任务」</strong>：就是指消息队列中的等待被主线程执行的事件。每个宏任务在执行时，V8 都会重新创建栈，然后随着宏任务中函数调用，栈也随之变化，最终，当该宏任务执行结束时，整个栈又会被清空，接着主线程继续执行下一个宏任务。</p><p><strong>「微任务」</strong>：你可以把微任务看成是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前。</p><p><strong>JavaScript 中之所以要引入微任务，主要是由于主线程执行消息队列中宏任务的时间颗粒度太粗了，无法胜任一些对精度和实时性要求较高的场景，微任务可以在实时性和效率之间做一个有效的权衡</strong>。另外使用微任务，可以改变我们现在的异步编程模型，使得我们可以使用同步形式的代码来编写异步调用。</p><p>微任务是基于消息队列、事件循环、UI 主线程还有堆栈而来的，然后基于微任务，又可以延伸出协程、Promise、Generator、await/async 等现代前端经常使用的一些技术。</p><p><img src="' + _imports_6 + '" alt="image-20231008144940345"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不会使浏览器卡死</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_7 + '" alt="image-20231008145114045"></p><p>如果当前的任务中产生了一个微任务，通过 Promise.resolve() 或者 Promise.reject() 都会触发微任务，触发的微任务不会在当前的函数中被执行，所以<strong>执行微任务时，不会导致栈的无限扩张</strong></p><p>和异步调用不同，微任务依然会在当前任务执行结束之前被执行，这也就意味着<strong>在当前微任务执行结束之前，消息队列中的其他任务是不可能被执行的</strong>。因此在函数内部触发的微任务，一定比在函数内部触发的宏任务要优先执行。</p><p>微任务依然是在当前的任务中执行的，所以如果在微任务中循环触发新的微任务，那么将导致消息队列中的其他任务没有机会被执行。</p><p><strong>3、前端异步编程方案史</strong></p><p><img src="' + _imports_8 + '" alt="image-20231008145231741"></p><p><strong>Callback 模式的异步编程模型</strong>需要实现大量的回调函数，大量的回调函数会打乱代码的正常逻辑，使得代码变得不线性、不易阅读，这就是我们所说的<strong>回调地狱问题</strong>。</p><p><strong>Promise</strong> 能很好地解决回调地狱的问题，我们可以按照线性的思路来编写代码，这个过程是线性的，非常符合人的直觉。</p><p>但是这种方式<strong>充满了 Promise 的 then() 方法</strong>，如果处理流程比较复杂的话，那么整段代码将<strong>充斥着大量的 then，语义化不明显，代码不能很好地表示执行流程</strong>。我们想要通过<strong>线性的方式</strong>来编写异步代码，要实现这个理想，<strong>最关键的是要能实现函数暂停和恢复执行的功能</strong>。而<strong>生成器</strong>就可以实现函数暂停和恢复，我们可以在生成器中使用同步代码的逻辑来异步代码 (实现该逻辑的核心是协程)。</p><p>但是在生成器之外，我们还需要一个<strong>触发器</strong>来驱动生成器的执行。前端的最终方案就是 async/await，async 是一个可以暂停和恢复执行的函数，在 async 函数内部使用 await 来暂停 async 函数的执行，await 等待的是一个 Promise 对象，如果 Promise 的状态变成 resolve 或者 reject，那么 async 函数会恢复执行。因此，使用 async/await 可以实现以同步的方式编写异步代码这一目标。和生成器函数一样，使用了 async 声明的函数在执行时，也是一个单独的协程，我们可以使用 await 来暂停该协程，由于 await 等待的是一个 Promise 对象，我们可以 resolve 来恢复该协程</p><p><strong>协程</strong> 是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程。比如，当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。</p><p><strong>正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程</strong>。每一时刻，该线程只能执行其中某一个协程。最重要的是，<strong>协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）</strong>。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。</p><h3 id="_9-12、垃圾回收" tabindex="-1"><a class="header-anchor" href="#_9-12、垃圾回收" aria-hidden="true">#</a> 9.12、垃圾回收</h3><p><strong>1、垃圾数据</strong></p><p>从 <strong>GC Roots</strong> 对象出发，遍历 GC Root 中的所有对象，如果通过 GC Roots 没有遍历到的对象，则这些对象便是垃圾数据。V8 会有专门的垃圾回收器来回收这些垃圾数据。</p><p><strong>2、垃圾回收算法</strong></p><p>垃圾回收大致可以分为以下几个步骤：</p><ul><li><p>第一步，<strong>通过 GC Root 标记空间中活动对象和非活动对象</strong>。目前 V8 采用的<strong>可访问性（reachability）算法</strong>来判断堆中的对象是否是活动对象。具体地讲，这个算法是将一些 GC Root 作为初始存活的对象的集合，从 GC Roots 对象出发，遍历 GC Root 中的所有对象：</p></li><li><ul><li><p>通过 GC Root 遍历到的对象，我们就认为该对象是<strong>可访问的（reachable）</strong>，那么必须保证这些对象应该在内存中保留，我们也称可访问的对象为<strong>活动对象</strong>；</p></li><li><p>通过 GC Roots 没有遍历到的对象，则是<strong>不可访问的（unreachable）</strong>，那么这些不可访问的对象就可能被回收，我们称不可访问的对象为<strong>非活动对象</strong>。</p></li><li><p>在<strong>浏览器环境中，GC Root 有很多</strong>，通常包括了以下几种 (但是不止于这几种)：</p></li><li><ul><li>全局的 window 对象（位于每个 iframe 中）；</li><li>文档 DOM 树，由可以通过遍历文档到达的所有原生 DOM 节点组成；</li><li>存放栈上变量。</li></ul></li></ul></li><li><p>第二步，<strong>回收非活动对象所占据的内存</strong>。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。</p></li><li><p>第三步，<strong>做内存整理</strong>。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为<strong>内存碎片</strong>。当内存中出现了大量的内存碎片之后，如果需要分配较大的连续内存时，就有可能出现内存不足的情况，所以最后一步需要整理这些内存碎片。但这步其实是可选的，因为<strong>有的垃圾回收器不会产生内存碎片(比如副垃圾回收器)</strong>。</p></li></ul><p><strong>3、垃圾回收</strong></p><p>V8 依据<strong>代际假说</strong>，将堆内存划分为<strong>新生代和老生代</strong>两个区域，新生代中存放的是生存时间短的对象，老生代中存放生存时间久的对象。代际假说有两个特点：</p><ul><li><ul><li>第一个是大部分对象都是“<strong>朝生夕死</strong>”的，也就是说<strong>大部分对象在内存中存活的时间很短</strong>，比如函数内部声明的变量，或者块级作用域中的变量，当函数或者代码块执行结束时，作用域中定义的变量就会被销毁。因此这一类对象一经分配内存，很快就变得不可访问；</li><li>第二个是<strong>不死的对象，会活得更久</strong>，比如全局的 window、DOM、Web API 等对象。</li></ul></li></ul><p>为了提升垃圾回收的效率，V8 设置了两个垃圾回收器，主垃圾回收器和副垃圾回收器。</p><ul><li><ul><li><p><strong>主垃圾回收器</strong>负责收集老生代中的垃圾数据，<strong>副垃圾回收器</strong>负责收集新生代中的垃圾数据。</p></li><li><p><strong>副垃圾回收器采用了 Scavenge 算法</strong>，是把新生代空间对半划分为两个区域（有些地方也称作From和To空间），一半是对象区域，一半是空闲区域。新的数据都分配在对象区域，等待对象区域快分配满的时候，垃圾回收器便执行垃圾回收操作，之后将存活的对象从对象区域拷贝到空闲区域，并将两个区域互换。</p></li><li><ul><li>这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。</li><li>副垃圾回收器每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域，复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般<strong>新生区的空间会被设置得比较小</strong>。</li><li>副垃圾回收器还会采用<strong>对象晋升策略</strong>，也就是移动那些经过两次垃圾回收依然还存活的对象到老生代中。</li></ul></li><li><p>主垃圾回收器回收器主要负责<strong>老生代中的垃圾数据的回收操作，会经历标记、清除和整理过程</strong>。</p></li><li><ul><li>主垃圾回收器主要负责老生代中的垃圾回收。除了新生代中晋升的对象，一些大的对象会直接被分配到老生代里。</li><li>老生代中的对象有两个特点：一个是对象占用空间大；另一个是对象存活时间长。</li></ul></li></ul></li></ul><p><strong>4、Stop-The-World</strong></p><blockquote><p>由于 JavaScript 是运行在主线程之上的，因此，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做<strong>全停顿（Stop-The-World）</strong>。</p></blockquote><p>V8 最开始的垃圾回收器有两个特点：</p><ul><li>第一个是垃圾回收在主线程上执行，</li><li>第二个特点是一次执行一个完整的垃圾回收流程。</li></ul><p><strong>由于这两个原因，很容易造成主线程卡顿，所以 V8 采用了很多优化执行效率的方案。</strong></p><ul><li>第一个方案是<strong>并行回收</strong>，在执行一个完整的垃圾回收过程中，垃圾回收器会使用多个辅助线程来并行执行垃圾回收。</li><li>第二个方案是<strong>增量式垃圾回收</strong>，垃圾回收器将标记工作分解为更小的块，并且穿插在主线程不同的任务之间执行。采用增量垃圾回收时，垃圾回收器没有必要一次执行完整的垃圾回收过程，每次执行的只是整个垃圾回收过程中的一小部分工作。</li><li>第三个方案是<strong>并发回收</strong>，回收线程在执行 JavaScript 的过程，辅助线程能够在后台完成的执行垃圾回收的操作。</li></ul><h2 id="_10、机器码、字节码" tabindex="-1"><a class="header-anchor" href="#_10、机器码、字节码" aria-hidden="true">#</a> 10、机器码、字节码</h2><p><strong>1、字节码</strong></p><p><strong>早期的 V8</strong> 为了提升代码的<strong>执行速度</strong>，直接将 JavaScript 源代码编译成了<strong>没有优化的二进制机器代码</strong>，如果某一段二进制代码执行频率过高，那么 V8 会将其标记为<strong>热点代码</strong>，热点代码会被优化编译器优化，优化后的机器代码执行效率更高。</p><p>随着移动设备的普及，V8 团队逐渐发现将 JavaScript 源码直接编译成二进制代码存在两个致命的问题：</p><ol><li><strong>时间问题</strong>：编译时间过久，影响代码启动速度；</li><li><strong>空间问题</strong>：缓存编译后的二进制代码占用更多的内存。</li></ol><p>这两个问题无疑会阻碍 V8 在移动设备上的普及，于是 V8 团队大规模重构代码，引入了中间的字节码。字节码的优势有如下三点：</p><ul><li><strong>解决启动问题</strong>：生成字节码的时间很短；</li><li><strong>解决空间问题</strong>：字节码虽然占用的空间比原始的 JavaScript 多，但是相较于机器代码，字节码还是小了太多，缓存字节码会大大降低内存的使用。</li><li><strong>代码架构清晰</strong>：采用字节码，可以简化程序的复杂度，使得 V8 移植到不同的 CPU 架构平台更加容易。</li></ul><h3 id="如何查看字节码" tabindex="-1"><a class="header-anchor" href="#如何查看字节码" aria-hidden="true">#</a> 如何查看字节码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> z<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>./d8 ./test.js --print-bytecode</code>:</p><div class="language-abap line-numbers-mode" data-ext="abap"><pre class="language-abap"><code>[generated bytecode <span class="token keyword">for</span> <span class="token keyword">function</span><span class="token punctuation">:</span> <span class="token keyword">add</span> <span class="token punctuation">(</span>0x01000824fe59 &lt;SharedFunctionInfo <span class="token keyword">add</span>&gt;<span class="token punctuation">)</span>]\n<span class="token keyword">Parameter</span> <span class="token keyword">count</span> <span class="token number">3</span> #三个参数，包括了显式地传入的 <span class="token keyword">x</span> 和 y，还有一个隐式地传入的 this\nRegister <span class="token keyword">count</span> <span class="token number">1</span>\n<span class="token keyword">Frame</span> <span class="token keyword">size</span> <span class="token number">8</span>\n         0x10008250026 @    <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">25</span> <span class="token number">02</span>             Ldar a1 #将a1寄存器中的值加载到累加器中，LoaD Accumulator <span class="token keyword">from</span> Register\n         0x10008250028 @    <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">34</span> <span class="token number">03</span> <span class="token number">00</span>          <span class="token keyword">Add</span> a0<span class="token punctuation">,</span> [<span class="token number">0</span>]\n         0x1000825002b @    <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">26</span> fb             Star r0 #Store Accumulator <span class="token keyword">to</span> Register，把累加器中的值保存到r0寄存器中\n         0x1000825002d @    <span class="token number">7</span> <span class="token punctuation">:</span> aa                <span class="token keyword">Return</span>  #结束当前函数的执行，并将控制权传回给调用方\nConstant <span class="token keyword">pool</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">Handler</span> <span class="token keyword">Table</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">Source</span> <span class="token keyword">Position</span> <span class="token keyword">Table</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token number">3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用字节码指令</strong>：</p><ul><li>Ldar：表示将寄存器中的值加载到累加器中，你可以把它理解为 LoaD Accumulator from Register，就是把某个寄存器中的值，加载到累加器中。</li><li>Star：表示 Store Accumulator Register， 你可以把它理解为 Store Accumulator to Register，就是把累加器中的值保存到某个寄存器中</li><li>Add：<code>Add a0, [0]</code>是从 a0 寄存器加载值并将其与累加器中的值相加，然后将结果再次放入累加器。 add a0 后面的[0]称之为 feedback vector slot，又叫<strong>反馈向量槽</strong>，它是一个数组，解释器将解释执行过程中的一些数据类型的分析信息都保存在这个反馈向量槽中了，目的是为了给 TurboFan 优化编译器提供优化信息，很多字节码都会为反馈向量槽提供运行时信息。</li><li>LdaSmi：将小整数（Smi）加载到累加器寄存器中</li><li>Return：结束当前函数的执行，并将控制权传回给调用方。返回的值是累加器中的值。</li></ul><p><strong>2、机器码（Bytecode）</strong></p><p><strong>某种程度上就是汇编语言，只是它没有对应特定的 CPU，或者说它对应的是虚拟的 CPU</strong>。这样的话，生成 Bytecode 时简单很多，无需为不同的 CPU 生产不同的代码。要知道，V8 支持 9 种不同的 CPU，引入一个中间层 Bytecode，可以简化 V8 的编译流程，提高可扩展性。</p><p>如果我们在不同硬件上去生成 Bytecode，会发现生成代码的指令是一样的。</p><h2 id="_11、13-个-javascript-性能提升技巧" tabindex="-1"><a class="header-anchor" href="#_11、13-个-javascript-性能提升技巧" aria-hidden="true">#</a> 11、<strong>13 个 JavaScript 性能提升技巧</strong></h2>', 127);
const _hoisted_232 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3Dvr9nFPFp42ek%2B%2FhRY3kwzQ%3D%3D.%2FqOZjV0EuGOR1tcNX4m3VE%2FLNgeW8BkeEBv%2Bno%2F5KUOd0loLtecbiCb3T7aezEgq",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_233 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "Breaking the JavaScript Speed Limit with V8",
  -1
  /* HOISTED */
);
const _hoisted_234 = /* @__PURE__ */ createBaseVNode(
  "strong",
  null,
  "13 个 JavaScript 性能提升技巧",
  -1
  /* HOISTED */
);
const _hoisted_235 = /* @__PURE__ */ createStaticVNode('<ol><li>在构造函数里初始化所有对象的成员(所以这些实例之后不会改变其隐藏类)；</li><li>总是以相同的次序初始化对象成员；</li><li>尽量使用可以用 31 位有符号整数表示的数；</li><li>为数组使用从 0 开始的连续的主键；</li><li>别预分配大数组(比如大于 64K 个元素)到其最大尺寸，令其尺寸顺其自然发展就好；</li><li>别删除数组里的元素，尤其是数字数组；</li><li>别加载未初始化或已删除的元素；</li><li>对于固定大小的数组，使用”array literals“初始化（初始化小额定长数组时，用字面量进行初始化）；</li><li>小数组(小于 64k)在使用之前先预分配正确的尺寸；</li><li>请勿在数字数组中存放非数字的值(对象)；</li><li>尽量使用单一类型（monomorphic）而不是多类型（polymorphic）（如果通过非字面量进行初始化小数组时，切勿触发类型的重新转换）；</li><li>不要使用 <code>try{} catch{}</code>（如果存在 <code>try/catch</code> 代码快，则将性能敏感的代码放到一个嵌套的函数中）；</li><li>在优化后避免在方法中修改隐藏类。</li></ol><h2 id="_12、在-v8-引擎里-5-个优化代码的技巧" tabindex="-1"><a class="header-anchor" href="#_12、在-v8-引擎里-5-个优化代码的技巧" aria-hidden="true">#</a> 12、在 V8 引擎里 5 个优化代码的技巧</h2><ol><li><strong>对象属性的顺序</strong>: 在实例化你的对象属性的时候一定要使用相同的顺序，这样隐藏类和随后的优化代码才能共享；</li><li><strong>动态属性</strong>: 在对象实例化之后再添加属性会强制使得隐藏类变化，并且会减慢为旧隐藏类所优化的代码的执行。所以，要在对象的构造函数中完成所有属性的分配；</li><li><strong>方法</strong>: 重复执行相同的方法会运行的比不同的方法只执行一次要快 (因为内联缓存)；</li><li><strong>数组</strong>: 避免使用 keys 不是递增的数字的稀疏数组，这种 key 值不是递增数字的稀疏数组其实是一个 hash 表。在这种数组中每一个元素的获取都是昂贵的代价。同时，要避免提前申请大数组。最好的做法是随着你的需要慢慢的增大数组。最后，不要删除数组中的元素，因为这会使得 keys 变得稀疏；</li><li><strong>标记值 (Tagged values)</strong>: V8 用 32 位来表示对象和数字。它使用一位来区分它是对象 (flag = 1) 还是一个整型 (flag = 0)，也被叫做小整型(SMI)，因为它只有 31 位。然后，如果一个数值大于 31 位，V8 将会对其进行 <strong>box 操作</strong>，然后将其转换成 double 型，并且创建一个新的对象来装这个数。所以，为了避免代价很高的 box 操作，尽量使用 31 位的有符号数。</li></ol><h2 id="_13、javascript-启动性能瓶颈分析与解决方案" tabindex="-1"><a class="header-anchor" href="#_13、javascript-启动性能瓶颈分析与解决方案" aria-hidden="true">#</a> 13、JavaScript 启动性能瓶颈分析与解决方案</h2>', 4);
const _hoisted_239 = {
  href: "https://link.zhihu.com/?target=https%3A//link.segmentfault.com/%3Fenc%3D6BsNUQgy5gke3kUnfPgORw%3D%3D.fEGda0I02EeriXMCisjweU8KjLJcsLuHyP%2BRjy09PuqvIfXGfZKFlNWpO2Ca2J8P",
  target: "_blank",
  rel: "noopener noreferrer"
};
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("ul", null, [
      createBaseVNode("li", null, [
        createBaseVNode("a", _hoisted_17, [
          createTextVNode("V8 (Google)"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("，用 C++编写，开放源代码，由 Google 丹麦开发，是 Google Chrome 的一部分，也用于 Node.js。")
      ]),
      createBaseVNode("li", null, [
        createBaseVNode("a", _hoisted_18, [
          createTextVNode("JavaScriptCore (Apple)"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("，开放源代码，用于 webkit 型浏览器，如 Safari ，2008 年实现了编译器和字节码解释器，升级为了 SquirrelFish。苹果内部代号为“Nitro”的 JavaScript 引擎也是基于 JavaScriptCore 引擎的。")
      ]),
      _hoisted_19,
      createBaseVNode("li", null, [
        createBaseVNode("a", _hoisted_20, [
          createTextVNode("SpiderMonkey (Mozilla)"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("，第一款 JavaScript 引擎，早期用于 Netscape Navigator，现时用于 Mozilla Firefox。")
      ]),
      _hoisted_21,
      _hoisted_22,
      _hoisted_23,
      _hoisted_24,
      createBaseVNode("li", null, [
        createTextVNode("其他：Nashorn、"),
        createBaseVNode("a", _hoisted_25, [
          createTextVNode("QuickJS"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode(" 、 "),
        createBaseVNode("a", _hoisted_26, [
          createTextVNode("Hermes"),
          createVNode(_component_ExternalLinkIcon)
        ])
      ])
    ]),
    _hoisted_27,
    _hoisted_28,
    _hoisted_29,
    _hoisted_30,
    createBaseVNode("p", null, [
      createTextVNode("V8源码编译出来的可执行程序名为d8。d8作为V8引擎在命令行中可以使用的交互shell存在。Google官方已经不记得d8这个名字的由来，但是做为 "),
      _hoisted_31,
      createTextVNode(" 的缩写，用首字母d和8结合，恰到好处。还有一种说法是d8最初叫 developer shell，因为d后面有8个字符，因此简写为d8，类似于"),
      createBaseVNode("a", _hoisted_32, [
        createTextVNode("i18n"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("(internationalization)这样的简写。参考："),
      createBaseVNode("a", _hoisted_33, [
        createTextVNode("Using d8"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_34,
    createBaseVNode("p", null, [
      createTextVNode("V8 是用 C ++ 编写的开源高性能 JavaScript 和 "),
      createBaseVNode("a", _hoisted_39, [
        createTextVNode("WebAssembly"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" 引擎，它已被用于 Chrome 和 Node.js 等。可以运行在 Windows 7+，macOS 10.12+和使用 x64，IA-32，ARM 或 MIPS 处理器的 Linux 系统上。"),
      _hoisted_40,
      createTextVNode("，第一个版本随着第一版 "),
      createBaseVNode("a", _hoisted_41, [
        createTextVNode("Chrome"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" 于 2008 年 9 月 2 日发布。"),
      _hoisted_42,
      createTextVNode("。著名的 Node.js ( 一个异步的服务器框架，可以在服务端使用 JavaScript 写出高效的网络服务器 ) 就是基于 V8 引擎的，Couchbase, MongoDB 也使用了 V8 引擎。")
    ]),
    _hoisted_43,
    createBaseVNode("p", null, [
      createTextVNode("在"),
      createBaseVNode("a", _hoisted_96, [
        createTextVNode("ECMAScript 规范"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("中定义了"),
      _hoisted_97,
      createTextVNode("。在这里我们把对象中的数字属性称为"),
      _hoisted_98,
      createTextVNode("，在 V8 中被称为 elements，字符串属性就被称为"),
      _hoisted_99,
      createTextVNode("，在 V8 中被称为 properties。在 V8 内部，为了有效地提升存储和访问这两种属性的性能，分别使用了两个线性数据结构来分别保存排序属性和常规属性。同时 v8 将部分常规属性直接存储到对象本身，我们把这称为"),
      _hoisted_100,
      createTextVNode("，不过对象内属性的数量是固定的，默认是 10 个。")
    ]),
    _hoisted_101,
    createBaseVNode("p", null, [
      createTextVNode("可以通过 Chrome 开发者工具的 Memory 标签，捕获查看当前的"),
      _hoisted_102,
      createTextVNode("。通过增大第一个参数来查看存储变化。（Console面板运行以上代码，打开Memory面板，通过点击"),
      _hoisted_103,
      createTextVNode("记录内存快照，点击快照，筛选出Foo进行查看。可参考"),
      createBaseVNode("a", _hoisted_104, [
        createTextVNode("使用 chrome-devtools Memory 面板"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("了解Memory面板。）")
    ]),
    _hoisted_105,
    createBaseVNode("p", null, [
      createTextVNode("Daniel Clifford 在"),
      createBaseVNode("a", _hoisted_232, [
        createTextVNode("Google I/O"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("2012 上做了一个精彩的演讲“"),
      _hoisted_233,
      createTextVNode("”。在演讲中，他深入解释了 13 个简单的代码优化方法，可以让你的JavaScript代码在 Chrome V8 引擎编译/运行时更加快速。在演讲中，他介绍了怎么优化，并解释了原因。下面简明的列出了"),
      _hoisted_234,
      createTextVNode("：")
    ]),
    _hoisted_235,
    createBaseVNode("p", null, [
      createTextVNode("Chrome插件"),
      createBaseVNode("a", _hoisted_239, [
        createTextVNode("Console Importer"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("推荐：Easily import JS and CSS resources from Chrome console. （可以在浏览器控制台安装 loadsh、moment、jQuery 等库，在控制台直接验证、使用这些库。）")
    ])
  ]);
}
const liulanqi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "liulanqi.html.vue"]]);
export {
  liulanqi_html as default
};
