import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, b as createBaseVNode, d as createTextVNode, e as createVNode, a as createStaticVNode } from "./app-03169c7a.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="前端面试-html" tabindex="-1"><a class="header-anchor" href="#前端面试-html" aria-hidden="true">#</a> 前端面试-HTML</h1><hr><h2 id="doctyple-html-的作用" tabindex="-1"><a class="header-anchor" href="#doctyple-html-的作用" aria-hidden="true">#</a> &lt;! DOCTYPLE html&gt;的作用</h2><div class="language-\\ line-numbers-mode" data-ext="\\"><pre class="language-\\"><code>\n&lt;!DOCTYPE html&gt; 是 HTML 文档类型声明（Document Type Declaration）的一种形式，它的作用是告诉浏览器当前文档使用的是 HTML5 规范。\n\n具体而言，&lt;!DOCTYPE html&gt; 的作用包括：\n\n1. 规范浏览器的渲染模式：&lt;!DOCTYPE html&gt; 声明指示浏览器使用标准模式（Standards Mode）来解析和渲染页面。标准模式确保页面按照 HTML5 规范进行解析和显示，以保证一致的行为和布局。\n2. 激活最新的 HTML 功能：HTML5 引入了一系列新的功能、元素和属性，包括语义化标签、表单验证、多媒体支持等。通过使用 &lt;!DOCTYPE html&gt; 声明，浏览器可以识别并启用这些新功能，以便正确解析和处理页面内容。\n3. 提供向后兼容性：HTML5 规范是对之前 HTML 版本的扩展和改进，通过使用 &lt;!DOCTYPE html&gt; 声明，即使在旧版本的浏览器中，也可以提供一定程度的向后兼容性，使页面在各种浏览器中以尽可能一致的方式呈现。\n\n\n\n**如果页面没有正确声明 HTML，可能会导致以下问题：**\n\n1. 缺少文档类型声明：缺少 `&lt;!DOCTYPE&gt;` 声明可能导致浏览器以怪异模式（Quirks Mode）解析页面，这可能引发与标准模式（Standards Mode）下不同的布局和渲染行为。\n2. 字符集未指定：缺少 `&lt;meta charset=&quot;...&quot;&gt;` 标签可能会导致浏览器无法正确解析和显示页面的字符集，从而导致乱码或显示异常。\n3. 视口设置问题：缺少 `&lt;meta name=&quot;viewport&quot; content=&quot;...&quot;&gt;` 标签可能导致在移动设备上无法正确缩放和适应屏幕，影响页面在不同设备上的显示效果和用户体验。\n4. 缺少必要的结构和语义：缺少 HTML 标签和正确的语义结构可能使页面结构混乱，无法被搜索引擎正确解析和索引。此外，缺少适当的标记和语义元素也可能导致辅助技术无法正确解读和访问页面内容，影响可访问性。\n5. 缺少必要的标签和属性：例如，缺少 `&lt;title&gt;` 标签可能导致页面在浏览器标签上显示不友好的标题，同时也会影响搜索引擎对页面主题的理解。\n6. 兼容性问题：缺少 HTML 声明可能导致不同浏览器在解析和呈现页面时存在差异，从而引发兼容性问题。\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-html5有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_1-html5有哪些新特性" aria-hidden="true">#</a> 1. html5有哪些新特性？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(1)Canvas绘图\n(2)SVG绘图\n(3)地理定位\n(4)Web Worker\n    web worker 是运行在后台的 JS，独立于其他脚本，不会影响页面的性能。\n(5)Web Storage\n    1.Cookie技术 （ 兼容性好,数据不能超4kb,操作复杂）\n    2.（兼容性差,数据8MB,操作简单）sessionStorage\n    3.localStorage\n(6)Web Socket\n    WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-position有哪些属性" tabindex="-1"><a class="header-anchor" href="#_2-position有哪些属性" aria-hidden="true">#</a> 2. position有哪些属性？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. position: relative;相对定位\n2. position: absolute;绝对定位\n3. position: fixed;固定定位\n4. position:static：默认值\n5. position: sticky 粘性定位\n6. position: inherit 规定应该从父元素继承 position 属性的值\n7. position: initial 设置该属性为默认值\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-请说出1px-1rem-1vh-1em各自代表的含义" tabindex="-1"><a class="header-anchor" href="#_3-请说出1px-1rem-1vh-1em各自代表的含义" aria-hidden="true">#</a> 3. 请说出1px，1rem，1vh，1em各自代表的含义？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rem\n    rem是全部的长度都相对于根元素&amp;lt;html&gt;元素。通常做法是给html元素设置一个字体大小，然后其他元素的长度单位就为rem。\n\nem \n    元素用em的话是相对于该元素的font-size\n\nvw/vh\n    全称是 Viewport Width 和 Viewport Height，视窗的宽度和高度，相当于 屏幕宽度和高度的 1%，不过，处理宽度的时候%单位更合适，处理高度的 话 vh 单位更好。\n\npx\n    px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。\n\n一般电脑的分辨率有{1920 * 1024}等不同的分辨率，1920 * 1024 前者是屏幕宽度总共有1920个像素,后者则是高度为1024个像素\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-简述优雅降级与渐进增强" tabindex="-1"><a class="header-anchor" href="#_4-简述优雅降级与渐进增强" aria-hidden="true">#</a> 4. 简述优雅降级与渐进增强</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>渐进增强（progressive enhancement）\n    针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n优雅降级（graceful degradation）\n    一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n区别：\n    1)优雅降级是从复杂的现状开始，并试图减少用户体验的供给；渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。\n    2)渐进增强观点认为应该关注于内容本身，这使得渐进增强成为一种更为合理的设计范例；优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-重绘与重排" tabindex="-1"><a class="header-anchor" href="#_5-重绘与重排" aria-hidden="true">#</a> 5. 重绘与重排</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>重绘:\n    重绘是一个元素外观的改变所触发的浏览器行为（例如改变visibility，outline，background等属性），浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。\n\n重排:\n    重排时更明显的一种改变，可以理解为渲染树需要重新计算。常见的触发重排的操作：\n    1)DOM元素的几何属性变化\n    2)DOM树的结构变化（例如节点的增减、移动）\n    3)获取某些属性（例如offsetTop，offsetLeft，offsetHeight，offsetWidth，clientWidth，clientHeight等）\n    4)改变元素的一些样式（例如调整浏览器窗口大小）\n\n两者的区别:\n    1)重绘不会带来重新布局，并不一定伴随着重排。\n    2)在实践中，应该尽量减少重排次数和缩小重排的影响范围。有以下几种方法：\n    3)[ ] 将多次改变样式属性的操作合并成一次操作\n    4)[ ] 将需要多次重排的元素，position属性设为absolute或fixed，使其脱离文档流，这样它的变化就不会影响到其他元素\n    5)[ ] 在内存中多次操作节点，完成后再添加到文档中去\n    6)[ ] 如果要对一个元素进行复杂的操作，可以将其display属性设置为none使其隐藏，待操作完成后再显示\n    7)[ ] 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-解释下浮动和它的工作原理-清除浮动的方法" tabindex="-1"><a class="header-anchor" href="#_6-解释下浮动和它的工作原理-清除浮动的方法" aria-hidden="true">#</a> 6. 解释下浮动和它的工作原理？清除浮动的方法</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。\n\n使用空标签清除浮动:\n    这种方法是在所有浮动标签后面添加一个空标签 定义css clear:both. 弊端就是增加了无意义标签。\n\n使用after伪对象清除浮动:\n    该方法只适用于非IE浏览器。具体写法可参照以下示例。使用中需注意以下几点。一、该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；\n\noverflow: hidden;\n\n浮动外部元素\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-如何让一个盒子在页面垂直水平居中" tabindex="-1"><a class="header-anchor" href="#_7-如何让一个盒子在页面垂直水平居中" aria-hidden="true">#</a> 7. 如何让一个盒子在页面垂直水平居中</h2><ul><li>方法一：<strong>已知宽高</strong></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法一：<strong>未知宽高</strong></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-前端性能优化方案" tabindex="-1"><a class="header-anchor" href="#_8-前端性能优化方案" aria-hidden="true">#</a> 8. 前端性能优化方案</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、减少DOM操作 \n2、部署前，图片压缩，代码压缩 \n3、优化js代码结构，减少冗余代码 \n4、减少http请求，合理设置HTTP缓存 \n5、使用内容分发cdn加速 \n6、静态资源缓存 \n7、图片延迟加载\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-css选择器优先级顺序" tabindex="-1"><a class="header-anchor" href="#_9-css选择器优先级顺序" aria-hidden="true">#</a> 9. css选择器优先级顺序</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>由上到下依次降低：\n    ID 选择器， 如 #id{}\n    类选择器， 如 .class{}\n    属性选择器， 如 a[href=&quot;segmentfault.com&quot;]{}\n    伪类选择器， 如 :hover{}\n    伪元素选择器， 如 ::before{}\n    标签选择器， 如 span{}\n    通配选择器， 如 *{}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-css3有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_10-css3有哪些新特性" aria-hidden="true">#</a> 10. CSS3有哪些新特性</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>border-radius   圆角\nbox-shadow   阴影\ntext-shadow   文字阴影\ngradient   线性渐变\ntransform  旋转、缩放、移动或倾斜\nscale  缩放\ntranslate   位移\n媒体查询   多栏布局   多背景\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-什么是空元素" tabindex="-1"><a class="header-anchor" href="#_11-什么是空元素" aria-hidden="true">#</a> 11. 什么是空元素？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>即没有内容的HTML元素，例如：br、meta、hr、link、input、img\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_12-如何实现浏览器内多个标签页之间的通讯" tabindex="-1"><a class="header-anchor" href="#_12-如何实现浏览器内多个标签页之间的通讯" aria-hidden="true">#</a> 12. 如何实现浏览器内多个标签页之间的通讯</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>定时器setInterval + cookie：\n    1）在页面A设置一个使用 setInterval 定时器不断刷新，检查 Cookies 的值是否发生变化，如果变化就进行刷新的操作。\n    2）由于 Cookies 是在同域可读的，所以在页面 B 审核的时候改变 Cookies 的值，页面 A 自然是可以拿到的。\n    3）这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优雅。\n\n使用localstorage：\n    1）localstorage是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：session是会话级的存储空间，每个标签页都是单独的）。\n    2）直接在window对象上添加监听即可：window.addEventListener(&#39;storage&#39;, (e) =&gt; console.log(e))\n    3）onstorage以及storage事件，针对都是非当前页面对localStorage进行修改时才会触发，当前页面修改localStorage不会触发监听函数。然后就是在对原有的数据的值进行修改时才会触发，比如原本已经有一个key会a值为b的localStorage，你再执行：localStorage.setItem(&#39;a&#39;, &#39;b&#39;)代码，同样是不会触发监听函数的。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-为什么要初始化css样式" tabindex="-1"><a class="header-anchor" href="#_13-为什么要初始化css样式" aria-hidden="true">#</a> 13. 为什么要初始化css样式</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>浏览器差异：\n    不同浏览器对有些标签的默认值是不同的，如果没对css初始化会出现浏览器之间的页面显示差异\n\n提高编码质量：\n    如果不初始化，整个页面做完会很糟糕，重复的css样式很多\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-css3新增的伪类有哪些" tabindex="-1"><a class="header-anchor" href="#_14-css3新增的伪类有哪些" aria-hidden="true">#</a> 14. CSS3新增的伪类有哪些？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>p:first-of-type 选择属于其父元素的首个元素\np:last-of-type 选择属于其父元素的最后元素\np:only-of-type 选择属于其父元素唯一的元素\np:only-child 选择属于其父元素的唯一子元素\np:nth-child(2) 选择属于其父元素的第二个子元素\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-说说对canvas-svg-webgl的理解" tabindex="-1"><a class="header-anchor" href="#_15-说说对canvas-svg-webgl的理解" aria-hidden="true">#</a> 15. 说说对canvas，svg，webgl的理解</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1）Canvas 是HTML5新增的一个元素对象，名副其实就是一个画布，浏览器 js 配有相应的操作api，可以不再依赖其他的API或组件而直接绘图，相当于2D的API。Canvas 适用于位图，高数据量高绘制频率（帧率）的场景，如动画、游戏；\n2）SVG 是给数据就可以绘制点、线、图形的，基于 XML 的标记语言；SVG 适用于矢量图，低数据量低绘制频率的场景，如图形、图表；\n3）WebGL（全写Web Graphics Library）是一种3D绘图标准，通俗说WebGL是canvas绘图中的3D版本。因为原生的WebGL很复杂，我们经常会使用一些三方的库，如three.js等，WebGL 主要用来做 3D 展示、动画、游戏。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-浏览器是如何渲染ui的" tabindex="-1"><a class="header-anchor" href="#_16-浏览器是如何渲染ui的" aria-hidden="true">#</a> 16. 浏览器是如何渲染UI的？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1）浏览器获取HTML文件，然后对文件进行解析，形成DOM Tree\n2）与此同时，进行CSS解析，生成Style Rules\n3）接着将DOM Tree与Style Rules合成为 Render Tree\n4）接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标\n5）随后调用GPU进行绘制（Paint），遍历Render Tree的节点，并将元素呈现出来\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-em、rem的区别" tabindex="-1"><a class="header-anchor" href="#_17-em、rem的区别" aria-hidden="true">#</a> 17. em、rem的区别</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>em是相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对浏览器的默认字体尺寸。它会继承父级元素的字体大小，因此并不是一个固定的值。\n\nrem是CSS3新增的一个相对单位(root em,根em),使用rem为元素设定字体大小事，仍然是相对大小但相对的只是HTML根元素。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-解释csssprites-如何使用。" tabindex="-1"><a class="header-anchor" href="#_18-解释csssprites-如何使用。" aria-hidden="true">#</a> 18. 解释csssprites，如何使用。</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Css精灵把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_19-浏览器工作原理" tabindex="-1"><a class="header-anchor" href="#_19-浏览器工作原理" aria-hidden="true">#</a> 19. 浏览器工作原理</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用户界面 、2. 网络 、3. UI后端 、4. 数据存储 、5. 浏览器引擎 、6. 渲染引擎 、7. js解释器\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_20-介绍一下你对浏览器内核的理解" tabindex="-1"><a class="header-anchor" href="#_20-介绍一下你对浏览器内核的理解" aria-hidden="true">#</a> 20. 介绍一下你对浏览器内核的理解？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\n渲染引擎：\n    负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\nJS引擎则：\n    解析和执行javascript来实现网页的动态效果。最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-常见的浏览器内核有哪些" tabindex="-1"><a class="header-anchor" href="#_21-常见的浏览器内核有哪些" aria-hidden="true">#</a> 21. 常见的浏览器内核有哪些？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Trident内核：IE,360，傲游，搜狗，世界之窗，腾讯等。[又称MSHTML]\nGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\nPresto内核：Opera7及以上。 [Opera内核原为：Presto，现为：Blink;]\nWebkit内核：Safari,Chrome等。 [ Chrome的：Blink（WebKit的分支）]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-一个页面上有大量的图片-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验。" tabindex="-1"><a class="header-anchor" href="#_22-一个页面上有大量的图片-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验。" aria-hidden="true">#</a> 22. 一个页面上有大量的图片，加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>（1）图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。\n（2）如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。\n（3）如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。\n（4）如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-如何进行seo优化" tabindex="-1"><a class="header-anchor" href="#_23-如何进行seo优化" aria-hidden="true">#</a> 23. 如何进行seo优化？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可；description把页面内容高度概括，不可过分堆砌关键词；keywords列举出重要关键词。\n2、语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页\n3、重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，保证重要内容一定会被抓取\n4、重要内容不要用js输出：爬虫不会执行js获取内容\n5、少用iframe：搜索引擎不会抓取iframe中的内容\n6、非装饰性图片必须加alt属性\n7、提高网站速度：网站速度是搜索引擎排序的一个重要指标。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-如何实现0-5px边框" tabindex="-1"><a class="header-anchor" href="#_24-如何实现0-5px边框" aria-hidden="true">#</a> 24. 如何实现0.5px边框</h2><ul><li>border+border-image+linear-gradient的方式</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* &lt;div class=&quot;border&quot;&gt;&lt;/div&gt; */</span>\n<span class="token selector">.border</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>\n    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>\n    <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom<span class="token punctuation">,</span> transparent 50%<span class="token punctuation">,</span> Green 50%<span class="token punctuation">)</span> 0 0 100% 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>伪元素+background-image的方式</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* &lt;div class=&quot;border&quot;&gt;&lt;/div&gt; */</span>\n<span class="token selector">.border</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.border:before</span> <span class="token punctuation">{</span>\n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom transparent 50%<span class="token punctuation">,</span> blue 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定位+伪元素+transfrom缩放(scale)的方式</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token comment">/* &lt;div class=&quot;border&quot;&gt;&lt;/div&gt; */</span>\n <span class="token selector">.border</span> <span class="token punctuation">{</span>\n     <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n     <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n     <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n     <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>\n     <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_25-less和sass的区别" tabindex="-1"><a class="header-anchor" href="#_25-less和sass的区别" aria-hidden="true">#</a> 25. less和sass的区别</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Less是基于JavaScript，是在客户端处理的；Sass是基于Ruby的，是在服务器端处理的。\n\n关于变量在Less和Sass中的唯一区别就是Less用@，Sass用$。\n\n输出设置，Less没有输出设置，Sass提供4中输出选项：nested, compact, compressed 和 expanded。\n\nSass支持条件语句，可以使用if{}else{},for{}循环等等，而Less不支持。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_26-页面导入样式时-使用link和-import有什么区别" tabindex="-1"><a class="header-anchor" href="#_26-页面导入样式时-使用link和-import有什么区别" aria-hidden="true">#</a> 26. 页面导入样式时，使用link和@import有什么区别</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、link属于XHTML标签，除了加载CSS外，还能用于定义RSS（简易信息聚合，是一种基于XML标准，在互联网上被广泛采用的内容包装和投递协议），rel连接属性等作用；@import是CSS提供的，只能用于加载CSS；\n2、页面被加载时，link会同时被加载；而@import引用的CSS会等到页面被加载完成后再加载；\n3、link是XHTML标签，没有兼容问题；而@import只有在IE5以上才能被识别；\n4、link支持使用JavaScript控制DOM修改样式；而@import不支持。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-谈谈你对-bfc-的理解" tabindex="-1"><a class="header-anchor" href="#_27-谈谈你对-bfc-的理解" aria-hidden="true">#</a> 27. 谈谈你对 BFC 的理解？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BFC: 块级格式化上下文, 是一块独立的渲染区域 (触发了BFC, 这块区域就是一块独立的渲染区域)\n    会将处于BFC的内容 和 处于BFC外的内容 隔离\n\n触发BFC的方式:\n    1. position: absolute/fixed\n    2. float: left / right;   浮动的元素多个放在一起, 会互相隔开\n    3. overflow: 非visible hidden/auto/scroll\n    4. display: inline-block\n\nBFC应用:\n    1. 处理块级元素, 上下margin合并的问题\n    2. 处理margin塌陷\n    3. 清除浮动\n    4. 实现自适应布局\n        左边固定, 右边自适应\n        flex =&gt; display: flex; 左边定宽, 右边 flex: 1;\n        浮动 =&gt; 先浮动占位置, 再中间盒子overflow: hidden\n        定位 =&gt; 先定位, 再设置padding即可\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_28-说说你对元素语义化的理解" tabindex="-1"><a class="header-anchor" href="#_28-说说你对元素语义化的理解" aria-hidden="true">#</a> 28. 说说你对元素语义化的理解</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>元素语义化就是⽤正确的元素做正确的事情。虽然在理论上，所以的html元素都可以通过css样式实现相同的事情，但是这么做会使事情复杂化，所以我们需要元素语义化来降低复杂度。\n\n元素语义化在我们实际的开发中有很多好处，⽐如：\n    1)提⾼代码的阅读性和可维护性;\n    2)减少coder之间的沟通成本;\n    3)能让语⾳合成⼯具正确识别⽹⻚元素的⽤途，以便做出正确的反应\n    4)有利于SEO(Search Engine Optimization)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-html-中有哪些语义化标签" tabindex="-1"><a class="header-anchor" href="#_29-html-中有哪些语义化标签" aria-hidden="true">#</a> 29. HTML 中有哪些语义化标签</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>header\nfooter\nmain\naside\narticle\nsection\naddress\nsummary/details\nmenu\nh1/h2/h3/h4/h5/h6\nimg\np\nstrong/italic\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_30-什么是-url-编码-url-encode" tabindex="-1"><a class="header-anchor" href="#_30-什么是-url-编码-url-encode" aria-hidden="true">#</a> 30. 什么是 URL 编码 (URL Encode)</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>encodeURI ⽤来编码URI，其不会编码保留字符。\n\nencodeURIComponent ⽤来编码 URI参数，除了字符：A-Z a-z 0-9 - _ . ! ~ * &#39; ( )，都将会转义。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-说说你对seo的理解" tabindex="-1"><a class="header-anchor" href="#_31-说说你对seo的理解" aria-hidden="true">#</a> 31. 说说你对SEO的理解</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SEO就是搜索引擎优化(Search Engine Optimization)，SEO通过了解搜索引擎的运⾏规则来调整⽹站，以提⾼⽹站的曝光度,以及⽹站的排名。\n\nGoogle 搜索引擎的⼯作流程主要分为三个阶段：\n\n抓取：\n    Google 会使⽤名为“抓取⼯具”的⾃动程序搜索⽹络，以查找新⽹⻚或更新后的⽹⻚。Google 会将这些⽹⻚的地址（即⽹址）存储在⼀个⼤型列表中，以便⽇后查看。我们会通过许多不同的⽅法查找⽹⻚，但主要⽅法是跟踪我们已知的⽹⻚中的链接。\n\n编⼊索引：\n    Google 会访问它通过抓取得知的⽹⻚，并会尝试分析每个⽹⻚的主题。Google 会分析⽹⻚中的内容、图⽚和视频⽂件，尝试了解⽹⻚的主题。这些信息存储在 Google 索引中，⽽ Google 索引是⼀个存储在海量计算机中的巨⼤数据库。\n\n呈现搜索结果：\n    当⽤户在 Google 上进⾏搜索时，Google 会尝试确定最优质的搜索结果。“最佳”结果取决于许多因素，包括⽤户的位置、语⾔、设备（桌⾯设备或⼿机）以及先前⽤过的搜索查询。例如，在⽤户搜索“⾃⾏⻋维修店”后，Google 向巴黎⽤户显示的答案与向⾹港⽤户显示的答案有所不同。⽀付费⽤不能提⾼⽹⻚在 Google 搜索结果中的排名，⽹⻚排名是完全依靠算法完成的。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-说明text-align居中的条件" tabindex="-1"><a class="header-anchor" href="#_32-说明text-align居中的条件" aria-hidden="true">#</a> 32. 说明text-align居中的条件</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>text-align : 直接翻译过来设置⽂本的⽔平对⻬⽅式 (是继承属性)(是继承属性)\ntext-align 并不控制块元素⾃⼰的对⻬，只控制它的⾏内内容的对⻬\nMDN解释: 定义⾏内内容（例如⽂字）如何相对它的块⽗元素对⻬(可以设置图⽚居中)\nW3C官⽅⽂档解释: 设置⾏内(inline-level)元素(没有填满⽗元素)在快级⽗元素的对⻬⽅式\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_33-说说盒子模型包含哪些内容" tabindex="-1"><a class="header-anchor" href="#_33-说说盒子模型包含哪些内容" aria-hidden="true">#</a> 33. 说说盒⼦模型包含哪些内容？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>内容\n    通过宽度和⾼度设置\n\n内边距\n    通过padding设置\n    padding: padding-top padding-right padding-bottom padding-left;\n\n边框\n    通过border设置\n    border: border-width border-style border-color\n\n外边距\n    通过margin设置\n    margin: margin-top margin-right margin-bottom margin-left\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_34-说说你对margin的传递和折叠的理解" tabindex="-1"><a class="header-anchor" href="#_34-说说你对margin的传递和折叠的理解" aria-hidden="true">#</a> 34. 说说你对margin的传递和折叠的理解</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>margin的传递⼀般是⽗⼦块元素之间,有margin-top传递,margin-bottom传递.\n    1)margin-top传递: 当块级元素的顶部线和⽗元素的顶部线重叠，那么这个块级元素的margin-top值会传递给⽗元素\n    2)margin-bottom传递:当块级元素的底部线和⽗元素的底部线重叠，那么这个块级元素的marginbottom值会传递给⽗元素\n\n折叠: 指的是 垂直⽅向上相邻的2个margin（margin-top、margin-bottom）有可能会合并为1个margin.\n\n它有两个兄弟块级元素之间的上下margin的折叠,也有⽗⼦块元素之间的margin折叠\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_35-css-隐藏⻚面中某个元素的几种方法" tabindex="-1"><a class="header-anchor" href="#_35-css-隐藏⻚面中某个元素的几种方法" aria-hidden="true">#</a> 35. CSS 隐藏⻚⾯中某个元素的⼏种⽅法</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>display: none\n    通过 CSS 操控 display，移出⽂档流\n\nopacity: 0\n    透明度为 0，仍在⽂档流中，当作⽤于其上的事件(如点击)仍有效\n\nvisibility: hidden\n    透明度为 0，仍在⽂档流中，但作⽤于其上的事件(如点击)⽆效，这也是visibility:hidden 与 opacity: 0 的区别\n\ncontent-visibility\n    移出⽂档流，但是再次显示时消耗性能低\n\n绝对定位于当前⻚⾯的不可⻅位置\n    position: absolute;\n    top: -9000px;\n    left: -9000px;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_36-box-sizing有什么作用-content-box和border-box的区别" tabindex="-1"><a class="header-anchor" href="#_36-box-sizing有什么作用-content-box和border-box的区别" aria-hidden="true">#</a> 36. box-sizing有什么作⽤？content-box和border-box的区别</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>box-sizing⽤来设置盒⼦模型中宽⾼的计算⽅式：\n    content-box: padding、border都布置在width、height外边\n    border-box: padding、border都布置在width、height⾥边\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_37-为什么会发生样式抖动" tabindex="-1"><a class="header-anchor" href="#_37-为什么会发生样式抖动" aria-hidden="true">#</a> 37. 为什么会发⽣样式抖动</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>因为没有指定元素具体⾼度和宽度,⽐如数据还没有加载进来时元素⾼度是 100px(假设这⾥是100px)\n数据加载进来后,因为有了数据,然后元素被撑⼤,所有出现了抖动\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_38-伪类与伪元素有什么区别" tabindex="-1"><a class="header-anchor" href="#_38-伪类与伪元素有什么区别" aria-hidden="true">#</a> 38. 伪类与伪元素有什么区别?</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>伪类使⽤单冒号，⽽伪元素使⽤双冒号。如 :hover 是伪类， ::before 是伪元素\n伪元素会在⽂档流⽣成⼀个新的元素，并且可以使⽤ content 属性设置内容\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_39-什么是视口-viewport" tabindex="-1"><a class="header-anchor" href="#_39-什么是视口-viewport" aria-hidden="true">#</a> 39. 什么是视⼝(viewport)？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pc端的视⼝:\n    就是浏览器的可视区域\n\n移动端视⼝:\n    布局视⼝\n        会按照⼀个默认宽度980px,来布局⼀个⻚⾯盒⼦的内容\n        为了可以显示完整的⻚⾯,会对整个⻚⾯进⾏缩⼩\n    视觉视⼝\n        显示在可视区域的视⼝,就是视觉视⼝\n    理想视⼝\n        当布局视⼝ = 视觉视⼝的时候,就是理想视⼝\n        怎样是这理想视⼝呢?\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_40-移动端适配的方案有哪些" tabindex="-1"><a class="header-anchor" href="#_40-移动端适配的方案有哪些" aria-hidden="true">#</a> 40. 移动端适配的⽅案有哪些？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>百分⽐布局:\n    因为不同属性百分⽐的值，相对的可能是不同的参照物，所以百分⽐往很难统⼀。\n\n视⼝ + ( rem + 动态HTML的 font-size ):\n    动态计算 HTML font-zise：\n        ⽤媒体查询来修改HTML font-size( 缺点不能实时改变font-size的⼤⼩ )\n        ⾃⼰编写JS来实现修改HTML font-size的⼤⼩(可以实时修改字体⼤⼩)\n        是引⽤lib-flexiable库来实现（原理是JS动态改HTML font-size⼤⼩）\n    px 转成rem：\n        ⼿动计算 rem\n        Less的映射来计算\n        postcss-pxtorem插件来实现（需依赖webpack或Vite）\n        cssrem VSCode插件来实现\n视⼝ + vw\n    px转成rem\n        ⼿动计算vw\n        Less的映射来计算\n        postcss-px-to-viewport的插件（需依赖webpack或Vite）\n        ccsrem VSCode插件\n\nflex弹性布局\n    flex container 属性\n    flex item 属性\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_41-说出不同像素之间的差异" tabindex="-1"><a class="header-anchor" href="#_41-说出不同像素之间的差异" aria-hidden="true">#</a> 41. 说出不同像素之间的差异？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>分为三种像素:设备像素(物理像素),设备独⽴像素(逻辑像素),css像素\n\n设备像素(物理像素)\n    1)是指显示器上真实的像素,在购买显示器或者⼿机的时候，提到的设备分辨率就是设备像素的⼤⼩\n    2)iPhone X的分辨率 1125 x 2436，指的就是设备像素\n\n设备独⽴像素(逻辑像素)\n    1)如果⾯向开发者我们使⽤设备像素显示⼀个100px的宽度，那么在不同屏幕上显示效果会是不同的\n    2)开发者针对不同的屏幕很难进⾏较好的适配，编写程序必须了解⽤户的分辨率来进⾏开发\n    3)所以在设备像素之上，操作系统为开发者进⾏抽象，提供了逻辑像素的概念\n    4)⽐如你购买了⼀台显示器，在操作系统上是以1920x1080设置的显示分辨率，那么⽆论你购买的是2k、4k的显示器，对于开发者来说，都是1920x1080的⼤⼩\n    5)如果物理像素很⼤的时候,⽐如2k,4k等,可以理解为⼀个逻辑像素⾥⾯由多个物理像素来渲染的\n\ncss像素\n    1)默认情况下就是设备独⽴像素(也就是逻辑像素)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_42-如何解决移动端-retina-屏-1px-像素问题" tabindex="-1"><a class="header-anchor" href="#_42-如何解决移动端-retina-屏-1px-像素问题" aria-hidden="true">#</a> 42. 如何解决移动端 Retina 屏 1px 像素问题</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在移动端 Web 开发中，UI 设计稿中设置边框为 1 像素，前端在开发过程中如果出现 border:1px ，测试会发现在 Retina 屏机型中，1px 会⽐较粗，即是较经典的移动端 1px 像素问题。\n\n以 iphone6 为例，iphone6 的屏幕宽度为 375px ，设计师做的视觉稿⼀般是750px ，也就是 2x ，这个时候设计师在视觉稿上画了 1px 的边框，于是你就写了 border:1px ，所以1px边框问题产⽣了。\n\n对设计师来说它的 1px 是相对于 750px 的（物理像素），对你来说你的 1px 是相对于 375px 的（css像素），实际上你应该是 border:0.5px 。下⾯来看⼀下解决⽅案：\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>0.5px 实现</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.border-1px</span> <span class="token punctuation">{</span>\n    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #999\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> 2<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token selector">.border-1px</span> <span class="token punctuation">{</span>\n        <span class="token property">border</span><span class="token punctuation">:</span> 0.5px solid #999\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* dpr=2 和 dpr=3 情况下 border 相差⽆⼏，下⾯代码可以省略*/</span>\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> 3<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token selector">.border-1px</span> <span class="token punctuation">{</span>\n        <span class="token property">border</span><span class="token punctuation">:</span> 0.333333px solid #999\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>但在 IOS7 及以下和 Android 等其他系统⾥， 0.5px 将会被显示为 0px 。所以我们需要通过 JS 检测浏览器能否处理 0.5px 的边框</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span> devicePixelRatio <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> testElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    testElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;.5px solid transparent&#39;</span><span class="token punctuation">;</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>testElem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>testElem<span class="token punctuation">.</span>offsetHeight <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hairlines&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>testElem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 优点：简单，没有副作⽤</span>\n<span class="token comment">// 缺点：⽀持 iOS 8+，安卓待兼容</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>viewport + rem 实现, 通过设置缩放，让 CSS 像素等于真正的物理像素。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">;</span>\n<span class="token keyword">const</span> viewport <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;meta[name=&quot;viewport&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>viewport<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    viewport <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;meta&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    viewport<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;viewport&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>viewport<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nviewport<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=device-width,user-scalable=no,initialscale=&#39;</span> <span class="token operator">+</span>\n    scale <span class="token operator">+</span> <span class="token string">&#39;,maximum-scale=&#39;</span> <span class="token operator">+</span> scale <span class="token operator">+</span> <span class="token string">&#39;,minimum-scale=&#39;</span> <span class="token operator">+</span> scale<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置根字体⼤⼩</span>\n<span class="token keyword">var</span> docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>\n<span class="token keyword">var</span> fontsize <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">320</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>\ndocEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> fontsize<span class="token punctuation">;</span>\n<span class="token comment">// 在CSS中⽤rem单位就⾏了</span>\n\n<span class="token comment">// 缺点：</span>\n<span class="token comment">// 通过 JS 对⽂档进⾏修改，所以性能上有⼀定影响</span>\n<span class="token comment">// 会对项⽬中所有使⽤ rem 单位的对象进⾏影响。如果是⽼项⽬，则会全部更改 css 样式（不适合⽼项⽬改造）</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>伪元素 + transform 实现（推荐）</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 为什么⽤伪元素？ 因为伪元素 ::after 或 ::before 是独⽴于当前元素，可以单独对其缩放⽽不影\n响元素本身的缩放\n基于 media 查询判断不同的设备像素⽐对线条进⾏缩放： */</span>\n\n<span class="token selector">.border-1px:before</span> <span class="token punctuation">{</span>\n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>\n    <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50% 0%<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span>2<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token selector">.border-1px:before</span> <span class="token punctuation">{</span>\n        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span>3<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token selector">.border-1px:before</span> <span class="token punctuation">{</span>\n        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.33<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 注意：如果需要满⾜圆⻆，需要给伪类也加上 border-radius\n优点：兼容性好，⽆副作⽤，推荐使⽤ */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>svg 实现(推荐)</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 因为 svg 是⽮量图形，它的 1px 对应的物理像素就是 1px\n可以搭配 PostCSS 的 postcss-write-svg 使⽤： */</span>\n<span class="token atrule"><span class="token rule">@svg</span> border-1px</span> <span class="token punctuation">{</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>\n\n    <span class="token atrule"><span class="token rule">@rect</span></span> <span class="token punctuation">{</span>\n        <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color<span class="token punctuation">,</span> black<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n        <span class="token property">height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.svg</span> <span class="token punctuation">{</span>\n    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid transparent<span class="token punctuation">;</span>\n    <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token function">svg</span><span class="token punctuation">(</span>border_1px <span class="token function">param</span><span class="token punctuation">(</span>--color #00b1ff<span class="token punctuation">)</span><span class="token punctuation">)</span> 2 2 stretch<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 优点：实现简单，可以实现圆⻆，\n缺点：需要学习 svg 语法 */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_43-如何计算白屏时间和首屏加载时间" tabindex="-1"><a class="header-anchor" href="#_43-如何计算白屏时间和首屏加载时间" aria-hidden="true">#</a> 43. 如何计算⽩屏时间和⾸屏加载时间</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>⽩屏时间:\n    window.performance.timing.domLoading - window.performance.timing.navigationStart\n\n⾸屏时间:\n    window.performance.timing.domInteractive - window.performace.timing.navigationStart\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_44-如何自定义滚动条的样式" tabindex="-1"><a class="header-anchor" href="#_44-如何自定义滚动条的样式" aria-hidden="true">#</a> 44. 如何⾃定义滚动条的样式</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>滚动条相关样式都是伪元素，以 scrollbar 打头，有以下伪元素，从 -webkit 中可⻅兼容性⼀般，不过⽆所谓，现在 Chrome 浏览器占⼤头\n::-webkit-scrollbar — 整个滚动条.\n::-webkit-scrollbar-button — 滚动条上的按钮 (上下箭头).\n::-webkit-scrollbar-thumb — 滚动条上的滚动滑块.\n::-webkit-scrollbar-track — 滚动条轨道.\n::-webkit-scrollbar-track-piece — 滚动条没有滑块的轨道部分.\n::-webkit-scrollbar-corner — 当同时有垂直滚动条和⽔平滚动条时交汇的部分.\n::-webkit-resizer — 某些元素的 corner 部分的部分样式(例:textarea 的可拖动按钮).\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>但其实最常⽤的是以下⼏个伪元素：滚动条、滑块、轨道，如下滚动条设置成功</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">{</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.08<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0 0 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_45-实现滑动到底部加载更多-bilibili官网效果" tabindex="-1"><a class="header-anchor" href="#_45-实现滑动到底部加载更多-bilibili官网效果" aria-hidden="true">#</a> 45.实现滑动到底部加载更多 (bilibili官网效果)</h2><p><strong>1.在列表底部添加一个div，通过监听页面滚动事件，如果div距离视口顶部的高度小于视口高度则加载数据：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Beatae tempora blanditiis fuga.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Quod ratione sequi eum?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Inventore aperiam sapiente maiores.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Facere repudiandae explicabo quod!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Dicta sit praesentium eius.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Reiciendis eveniet voluptate incidunt?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bottom<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token comment">// 监听滚动事件</span>\n        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;scroll&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 通过getBoundingClientRect获取元素相对于视口的位置，window.innerHeight代表视口的高度</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;Lorem ipsum dolor sit.&lt;/li&gt;\n                                &lt;li&gt;Beatae tempora blanditiis fuga.&lt;/li&gt;\n                                &lt;li&gt;Quod ratione sequi eum?&lt;/li&gt;\n                                &lt;li&gt;Inventore aperiam sapiente maiores.&lt;/li&gt;\n                                &lt;li&gt;Facere repudiandae explicabo quod!&lt;/li&gt;\n                                &lt;li&gt;Dicta sit praesentium eius.&lt;/li&gt;\n                                &lt;li&gt;Reiciendis eveniet voluptate incidunt?&lt;/li&gt;\n                                &lt;li&gt;Facere beatae maiores ad.&lt;/li&gt;\n                                &lt;li&gt;Expedita minus corrupti cum?&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.直接使用web api来计算文档是否滚动到底部</strong>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Beatae tempora blanditiis fuga.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Quod ratione sequi eum?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Inventore aperiam sapiente maiores.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Facere repudiandae explicabo quod!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Dicta sit praesentium eius.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Reiciendis eveniet voluptate incidunt?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token comment">// 监听滚动事件</span>\n        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;scroll&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> bodyHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight <span class="token comment">// 获得文档的整体高度，包括滚动到屏幕以外的地方</span>\n            <span class="token keyword">let</span> viewHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token comment">// 获得当前视口高度</span>\n            <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>scrollY <span class="token comment">// 活动滚动条滚动的距离，它等于文档溢出到视口外的高度</span>\n            <span class="token comment">// 如果文档整体高度 - 溢出到视口外的高度 - 当前视口高度小于等于0，所以文档滚动到了底部</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>bodyHeight <span class="token operator">-</span> viewHeight <span class="token operator">-</span> scrollTop <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;Lorem ipsum dolor sit.&lt;/li&gt;\n                                &lt;li&gt;Beatae tempora blanditiis fuga.&lt;/li&gt;\n                                &lt;li&gt;Quod ratione sequi eum?&lt;/li&gt;\n                                &lt;li&gt;Inventore aperiam sapiente maiores.&lt;/li&gt;\n                                &lt;li&gt;Facere repudiandae explicabo quod!&lt;/li&gt;\n                                &lt;li&gt;Dicta sit praesentium eius.&lt;/li&gt;\n                                &lt;li&gt;Reiciendis eveniet voluptate incidunt?&lt;/li&gt;\n                                &lt;li&gt;Facere beatae maiores ad.&lt;/li&gt;\n                                &lt;li&gt;Expedita minus corrupti cum?&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 118);
const _hoisted_119 = {
  href: "https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_120 = /* @__PURE__ */ createStaticVNode('<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Beatae tempora blanditiis fuga.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Quod ratione sequi eum?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Inventore aperiam sapiente maiores.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Facere repudiandae explicabo quod!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Dicta sit praesentium eius.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Reiciendis eveniet voluptate incidunt?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bottom<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n        <span class="token comment">// 使用IntersectionObserver来创建一个observer</span>\n        <span class="token comment">// IntersectionObserver第一个参数是一个回调函数，该回调函数：</span>\n        <span class="token comment">// 将会在目标 (这里是bottom) 元素和根 (root，这里指浏览器视窗) 元素的交集大小超过阈值 (threshold，默认为0，意味着只要目标一出现就运行回调函数) 规定的大小时候被执行</span>\n        <span class="token comment">// IntersectionObserver第二个参数是配置对象，可以配置用于检查目标元素可见的根元素（root，必须是目标元素的父级元素），默认是浏览器视口；</span>\n        <span class="token comment">// 还可以配置目标出现的阈值（threshold）和根 (root) 元素的外边距（rootMargin）</span>\n        <span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">Intersection</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 回调函数接收一个包含所有目标元素的状态对象的数组</span>\n            <span class="token comment">// 该回调函数在目标元素出现和离开根（root）元素可见区域时都会执行，所有需要判断一下是出现还是离开</span>\n            <span class="token comment">// 状态对象中isIntersecting字段表示目标元素是否在根（root）元素中可见</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>Intersection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;加载更多&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;Lorem ipsum dolor sit.&lt;/li&gt;\n                                &lt;li&gt;Beatae tempora blanditiis fuga.&lt;/li&gt;\n                                &lt;li&gt;Quod ratione sequi eum?&lt;/li&gt;\n                                &lt;li&gt;Inventore aperiam sapiente maiores.&lt;/li&gt;\n                                &lt;li&gt;Facere repudiandae explicabo quod!&lt;/li&gt;\n                                &lt;li&gt;Dicta sit praesentium eius.&lt;/li&gt;\n                                &lt;li&gt;Reiciendis eveniet voluptate incidunt?&lt;/li&gt;\n                                &lt;li&gt;Facere beatae maiores ad.&lt;/li&gt;\n                                &lt;li&gt;Expedita minus corrupti cum?&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> bottom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#bottom&#39;</span><span class="token punctuation">)</span>\n        observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听bottom元素</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_46-h5新增语义化标签的理解" tabindex="-1"><a class="header-anchor" href="#_46-h5新增语义化标签的理解" aria-hidden="true">#</a> 46.H5新增语义化标签的理解</h2><p>HTML语义化标签指的是一些<strong>有明确含义的标签</strong>，例如header、footer、article、section等，这些标签并<strong>不仅仅只是用来控制样式，更重要的是定义了页面中内容的结构和意义。</strong></p><p>使用语义化标签的好处在于可以<strong>帮助搜索引擎更好地理解页面的内容，从而提高页面的搜索排名</strong>。同时，也能<strong>让屏幕阅读器等辅助技术更加准确地识别页面中的信息，以更好地帮助视觉障碍人士访问网站</strong>。此外，使用语义化标签还可以<strong>使得代码更易于维护和理解</strong>，因为标签本身就已经具有了一定的描述性，开发者在阅读代码时可以更加方便地理解其含义和作用。</p><p>除了使用语义化标签之外，还应该注意遵循一些其他的HTML最佳实践，例如避免使用过多的嵌套标签、去掉不必要的div标签等，都可以帮助我们编写出更加优雅和健壮的HTML代码。</p><p>另外对 h 标签使用时注意各个的权重，最重要的用 h1</p>', 6);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createBaseVNode("strong", null, [
        createTextVNode("3.使用"),
        createBaseVNode("a", _hoisted_119, [
          createTextVNode("Intersection Observer APIopen in new window"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("：")
      ])
    ]),
    _hoisted_120
  ]);
}
const qianduanmianshiHTML_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "qianduanmianshi-HTML.html.vue"]]);
export {
  qianduanmianshiHTML_html as default
};
