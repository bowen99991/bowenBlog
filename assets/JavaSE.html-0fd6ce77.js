import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, e as createVNode, d as createStaticVNode } from "./app-0bcd8dca.js";
const _imports_0 = "/bowenBlog/assets/image-20240112172057630-a6eff09d.png";
const _imports_1 = "/bowenBlog/assets/image-20231226163348727-7a657b30.png";
const _imports_2 = "/bowenBlog/assets/image-20231213184502103-a79aee6a.png";
const _imports_3 = "/bowenBlog/assets/image-20231213175650092-65b8c422.png";
const _imports_4 = "/bowenBlog/assets/image-20231213175757343-7295d287.png";
const _imports_5 = "/bowenBlog/assets/image-20231213184613547-33bcff4e.png";
const _imports_6 = "/bowenBlog/assets/image-20231213184701841-36968733.png";
const _imports_7 = "/bowenBlog/assets/image-20231213183352489-467c2e19.png";
const _imports_8 = "/bowenBlog/assets/image-20231215163357800-c429eb37.png";
const _imports_9 = "/bowenBlog/assets/image-20231215163545260-42f10354.png";
const _imports_10 = "/bowenBlog/assets/image-20231215163926117-6ed51c0e.png";
const _imports_11 = "/bowenBlog/assets/image-20231215164002125-6d1ffca0.png";
const _imports_12 = "/bowenBlog/assets/image-20231226162943630-bfdf8527.png";
const _imports_13 = "/bowenBlog/assets/image-20231226163133344-2541a4a6.png";
const _imports_14 = "/bowenBlog/assets/image-20231219133147622-1e3a4b8a.png";
const _imports_15 = "/bowenBlog/assets/image-20231219133231914-212616b0.png";
const _imports_16 = "/bowenBlog/assets/image-20231219133754190-21de27e3.png";
const _imports_17 = "/bowenBlog/assets/image-20231219133706012-d2417608.png";
const _imports_18 = "/bowenBlog/assets/image-20231226163520733-87d0c6b3.png";
const _imports_19 = "/bowenBlog/assets/image-20231226163534966-ae997c4e.png";
const _imports_20 = "/bowenBlog/assets/image-20231226163545331-d3369672.png";
const _imports_21 = "/bowenBlog/assets/image-20231226163552515-0ce0e26f.png";
const _imports_22 = "/bowenBlog/assets/image-20231226163557099-d2db0773.png";
const _imports_23 = "/bowenBlog/assets/image-20231226163603140-fa81f8ab.png";
const _imports_24 = "/bowenBlog/assets/image-20231226163611275-cee5450e.png";
const _imports_25 = "/bowenBlog/assets/image-20231226163645496-bde144e1.png";
const _imports_26 = "/bowenBlog/assets/image-20240103175431324-8e8d8e21.png";
const _imports_27 = "/bowenBlog/assets/image-20240103184911499-95df5cb2.png";
const _imports_28 = "/bowenBlog/assets/image-20240103184940618-2589eeb3.png";
const _imports_29 = "/bowenBlog/assets/image-20240103185926747-6e1c0151.png";
const _imports_30 = "/bowenBlog/assets/image-20240102090818012-dbb411a7.png";
const _imports_31 = "/bowenBlog/assets/image-20231213184038362-0141147c.png";
const _imports_32 = "/bowenBlog/assets/image-20231213184729588-9220f946.png";
const _imports_33 = "/bowenBlog/assets/image-20231213191555684-4c4b7c5d.png";
const _imports_34 = "/bowenBlog/assets/image-20231214123059723-18ae60f7.png";
const _imports_35 = "/bowenBlog/assets/image-20231214123818829-013663b4.png";
const _imports_36 = "/bowenBlog/assets/image-20231214123024654-6c61a5a3.png";
const _imports_37 = "/bowenBlog/assets/image-20231226163919464-a9dd1741.png";
const _imports_38 = "/bowenBlog/assets/image-20231226164009906-a0f5f287.png";
const _imports_39 = "/bowenBlog/assets/image-20231226164202129-2a6b1f25.png";
const _imports_40 = "/bowenBlog/assets/image-20231226164246374-71b0680b.png";
const _imports_41 = "/bowenBlog/assets/image-20231226164613990-546c38c4.png";
const _imports_42 = "/bowenBlog/assets/image-20231226164626804-71f78985.png";
const _imports_43 = "/bowenBlog/assets/image-20231226164709402-1cae541d.png";
const _imports_44 = "/bowenBlog/assets/image-20231215143916271-22e9c472.png";
const _imports_45 = "/bowenBlog/assets/image-20231215144329948-a11f47e6.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="一-java" tabindex="-1"><a class="header-anchor" href="#一-java" aria-hidden="true">#</a> 一, Java</h2><hr><p><strong>Java程序的工程结构</strong></p><p>IDEA正确的写一个Java程序，必须先认识一下IDEA的管理Java程序的工程结构。</p><ul><li>第一步：首先得在IDEA中创建一个Project（工程、也叫项目），后面统称为工程。理解成小区的院子。</li><li>第二步：需要在Project中创建Module（模块），一个工程中可以包含多个模块。理解成小区院子里面的每一栋楼。</li><li>第三步：需要在Module中新建Package（包），一个模块中可以有多个包。理解成每一栋楼的一层。</li><li>第四步：需要在Package中新建Class（类），一个包中可以包含多个类。理解成每一层的住户。</li></ul><h2 id="idea-必备设置" tabindex="-1"><a class="header-anchor" href="#idea-必备设置" aria-hidden="true">#</a> ==Idea 必备设置==</h2><blockquote><p><strong>建议主题使用原本编辑器自带的深色主题</strong></p></blockquote><h4 id="编辑器字体样式大小调整" tabindex="-1"><a class="header-anchor" href="#编辑器字体样式大小调整" aria-hidden="true">#</a> 编辑器字体样式大小调整</h4><p><img src="' + _imports_0 + '" alt="image-20240112172057630"></p><h4 id="设置自动展开项目工程结构" tabindex="-1"><a class="header-anchor" href="#设置自动展开项目工程结构" aria-hidden="true">#</a> 设置自动展开项目工程结构</h4><p>idea 中的目录结构默认是折叠的, 默认不逐级展开 , 需要设置让层级嵌套更加明显直观</p><p><img src="' + _imports_1 + '" alt="image-20231226163348727"></p><h4 id="代码自动补全不区分首字母大小写" tabindex="-1"><a class="header-anchor" href="#代码自动补全不区分首字母大小写" aria-hidden="true">#</a> <strong>代码自动补全不区分首字母大小写</strong></h4><p><img src="' + _imports_2 + '" alt="image-20231213184502103"></p><h4 id="代码最大行数和自动换行处理" tabindex="-1"><a class="header-anchor" href="#代码最大行数和自动换行处理" aria-hidden="true">#</a> <strong>代码最大行数和自动换行处理</strong></h4><p><img src="' + _imports_3 + '" alt="image-20231213175650092"></p><h4 id="自动导入包和自动删除未使用的包" tabindex="-1"><a class="header-anchor" href="#自动导入包和自动删除未使用的包" aria-hidden="true">#</a> <strong>自动导入包和自动删除未使用的包</strong></h4><p><img src="' + _imports_4 + '" alt="image-20231213175757343"></p><h4 id="代码改变-文件夹提示-git-版本控制文件" tabindex="-1"><a class="header-anchor" href="#代码改变-文件夹提示-git-版本控制文件" aria-hidden="true">#</a> <strong>代码改变, 文件夹提示, Git 版本控制文件</strong></h4><p><img src="' + _imports_5 + '" alt="image-20231213184613547"></p><h4 id="工具开启时可手动选择需要编辑的项目" tabindex="-1"><a class="header-anchor" href="#工具开启时可手动选择需要编辑的项目" aria-hidden="true">#</a> <strong>工具开启时可手动选择需要编辑的项目</strong></h4><p><img src="' + _imports_6 + '" alt="image-20231213184701841"></p><h4 id="添加文件描述信息模板等" tabindex="-1"><a class="header-anchor" href="#添加文件描述信息模板等" aria-hidden="true">#</a> <strong>添加文件描述信息模板等</strong></h4><p><img src="' + _imports_7 + '" alt="image-20231213183352489"></p><h4 id="设置文件类型超出屏幕自动换行" tabindex="-1"><a class="header-anchor" href="#设置文件类型超出屏幕自动换行" aria-hidden="true">#</a> <strong>设置文件类型超出屏幕自动换行</strong></h4><p><img src="' + _imports_8 + '" alt="image-20231215163357800"></p><h4 id="控制字体大小" tabindex="-1"><a class="header-anchor" href="#控制字体大小" aria-hidden="true">#</a> <strong>控制字体大小</strong></h4><p><img src="' + _imports_9 + '" alt="image-20231215163545260"></p><h4 id="导出-idea-常用的设置配置文件" tabindex="-1"><a class="header-anchor" href="#导出-idea-常用的设置配置文件" aria-hidden="true">#</a> <strong>导出 idea 常用的设置配置文件</strong></h4><p><img src="' + _imports_10 + '" alt="image-20231215163926117"></p><p><img src="' + _imports_11 + '" alt="image-20231215164002125"></p><p>导出为 zip , 在其他 idea 直接导入这个文件即可</p><h4 id="修改注释快捷键只显示首行" tabindex="-1"><a class="header-anchor" href="#修改注释快捷键只显示首行" aria-hidden="true">#</a> 修改注释快捷键只显示首行</h4><p>Java 的设置</p><p><img src="' + _imports_12 + '" alt="image-20231226162943630"></p><p>xml 文件的设置</p><p><img src="' + _imports_13 + '" alt="image-20231226163133344"></p><h4 id="修改本地配置文件" tabindex="-1"><a class="header-anchor" href="#修改本地配置文件" aria-hidden="true">#</a> <strong>修改本地配置文件</strong></h4><p>intellij idea的安装目录中去，找到其中的bin文件夹，在bin文件夹中有两个文件，分别叫做:idea.exe.vmoptions与idea64.exe.vmoptions</p><blockquote><p>电脑是windows 10 内存是16G，所以分配了4G内存堆，可以根据自己电脑的实际内存设置。</p></blockquote><p><img src="' + _imports_14 + '" alt="image-20231219133147622"></p><p>手动修改</p><p>关键的三个参数的说明</p><ul><li>1.-Xms 是最小启动内存参数</li><li>2.-Xmx 是最大运行内存参数</li><li>3.-XX:ReservedCodeCacheSize 保留代码占用的内存容量参数</li></ul><p><img src="' + _imports_15 + '" alt="image-20231219133231914"></p><h4 id="关闭阿里插件-alibaba-java-coding-guide" tabindex="-1"><a class="header-anchor" href="#关闭阿里插件-alibaba-java-coding-guide" aria-hidden="true">#</a> <strong>关闭阿里插件 Alibaba Java Coding guide</strong></h4><p>【阿里插件】在开发的时候可以关闭掉， 阿里巴巴检查插件 Alibaba Java Coding guide</p><p><img src="' + _imports_16 + '" alt="image-20231219133754190"></p><h4 id="关闭重复代码检查" tabindex="-1"><a class="header-anchor" href="#关闭重复代码检查" aria-hidden="true">#</a> <strong>关闭重复代码检查</strong></h4><p>【编译器自带】适当关闭idea的Inspections的检查或者开发时完全关闭Inspections的检查，等开发完后在开启检查。可以全部关闭，idea右下角有一个 人头标志，可以点击，调准idea检查级别~</p><blockquote><p>路径</p><p>File -&gt; Settings -&gt; Editor -&gt; Inspections</p></blockquote><p><img src="' + _imports_17 + '" alt="image-20231219133706012"></p><blockquote><p>如果其他项目也要关闭这项检查，打开File-&gt;Other Settings-&gt;Settings For New Projects，再操作一遍即可。</p></blockquote><h4 id="error-报错的解决办法" tabindex="-1"><a class="header-anchor" href="#error-报错的解决办法" aria-hidden="true">#</a> Error 报错的解决办法</h4><p><img src="' + _imports_18 + '" alt="image-20231226163520733"></p><p>解决办法</p><p><img src="' + _imports_19 + '" alt="image-20231226163534966"></p><p><img src="' + _imports_20 + '" alt="image-20231226163545331"></p><p><img src="' + _imports_21 + '" alt="image-20231226163552515"></p><p><img src="' + _imports_22 + '" alt="image-20231226163557099"></p><p><img src="' + _imports_23 + '" alt="image-20231226163603140"></p><p><img src="' + _imports_24 + '" alt="image-20231226163611275"></p><p><strong>解决办法</strong>：</p><ul><li>类⽂件版本指的是java class file version，java类⽂件版本</li><li>该版本号与jdk版本号存在对应关系，61.0对应jdk17，52.0对应jdk8</li><li>在pom.xml⽂件中把下⾯这个版本改成2.7.6或者更低版本即可</li></ul><p><img src="' + _imports_25 + '" alt="image-20231226163645496"></p><h4 id="导入自己从其他地方下载的-jar-包-可以使插件也可以是项目所需" tabindex="-1"><a class="header-anchor" href="#导入自己从其他地方下载的-jar-包-可以使插件也可以是项目所需" aria-hidden="true">#</a> 导入自己从其他地方下载的 jar 包, (可以使插件也可以是项目所需)</h4><p><img src="' + _imports_26 + '" alt="image-20240103175431324"></p><h4 id="优化-idea-更改-vmoption-设置" tabindex="-1"><a class="header-anchor" href="#优化-idea-更改-vmoption-设置" aria-hidden="true">#</a> 优化 idea ,更改 VMoption 设置</h4><p><strong>打开选项设置页面</strong></p><p><img src="' + _imports_27 + '" alt="image-20240103184911499"></p><p><strong>右键勾选, 显示出占用空间大小</strong></p><p><img src="' + _imports_28 + '" alt="image-20240103184940618"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xmx1024m    // 最大内存上限为：1024MB（1GB）\n-Xms256m     // 初始内存分配大小为：256MB\n-XX:ReservedCodeCacheSize=128m    //代码缓冲区大小：128MB\n-XX:+UseG1GC\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们对其进行适当的修改（具体根据个人电脑配置），并保存文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xmx4096m\n-Xms4096m\n-XX:ReservedCodeCacheSize=256m\n-XX:+UseG1GC\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清理缓存</strong></p><p>选择 <code>File ---&gt; Invalidate Caches</code>（清理无效的缓存）</p><p>默认勾选, 直接点击重启 idea</p><p><img src="' + _imports_29 + '" alt="image-20240103185926747"></p><p>重启之后查询所占用空间, 对于 16G 的内存相关应该使用更少的需求</p><p>类似相关的开发工具的配置参数说明：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-server:一定要作为第一个参数，在多个CPU时性能佳\n-Xms：初始Heap大小，使用的最小内存,cpu性能高时此值应设的大一些\n-Xmx：java heap最大值，使用的最大内存\n-XX:PermSize:设定内存的永久保存区域\n-XX:MaxPermSize:设定最大内存的永久保存区域\n-XX:MaxNewSize:\n+XX:AggressiveHeap 使 Xms 失去意义。\n-Xss：每个线程的Stack大小\n-verbose:gc 现实垃圾收集信息\n-Xloggc:gc.log 指定垃圾收集日志文件\n-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一\n-XX:+UseParNewGC ：缩短minor收集的时间\n-XX:+UseConcMarkSweepGC ：缩短major收集的时间\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭-idea-更新" tabindex="-1"><a class="header-anchor" href="#关闭-idea-更新" aria-hidden="true">#</a> 关闭 idea 更新</h3><blockquote><p>由于大多数我们使用的是破解idea , 所以一定不要更新</p></blockquote><p><img src="' + _imports_30 + '" alt="image-20240102090818012"></p><h3 id="_2-idea-快捷键" tabindex="-1"><a class="header-anchor" href="#_2-idea-快捷键" aria-hidden="true">#</a> 2, idea 快捷键</h3><table><thead><tr><th><strong>快捷键</strong></th><th><strong>功能效果</strong></th></tr></thead><tbody><tr><td>main/psvm、sout、…</td><td>快速键入相关代码</td></tr><tr><td>Ctrl + D</td><td>复制当前行数据到下一行</td></tr><tr><td>Ctrl + Y</td><td>删除所在行，建议用Ctrl + X</td></tr><tr><td>Ctrl + ALT + L</td><td>格式化代码</td></tr><tr><td>ALT + SHIFT + ↑ , ALT + SHIFT + ↓</td><td>上下移动当前代码</td></tr><tr><td>Ctrl + / , Ctrl + Shift + /</td><td>对代码进行注释(讲注释的时候再说)</td></tr></tbody></table><p><strong>捕获异常</strong> ctrl + alt + T</p><p><img src="' + _imports_31 + '" alt="image-20231213184038362"></p><p>**快速换行 ** shift + enter</p><p><strong>删除行</strong> ctrl + X</p><p>**添加书签和书签管理 ** shift + F11</p><p><img src="' + _imports_32 + '" alt="image-20231213184729588"></p><p>**打开本地 Git 仓库 ** alt + F12</p><p><strong>查看参数</strong> Ctrl + P</p><h3 id="_3-工具插件" tabindex="-1"><a class="header-anchor" href="#_3-工具插件" aria-hidden="true">#</a> 3, 工具插件</h3><p><img src="' + _imports_33 + '" alt="image-20231213191555684"></p><ul><li>Extra Icon 文件图标</li><li>Alibaba Java Coding 检测代码规范</li><li>SonarLint 优化代码检查</li><li>Tabnine Ai Code 代码提示</li><li>GenerateAllSetter 快速生成set 方法</li><li>GsonFormatPlus 快速将json 转换为类</li><li>Grep Console 控制台颜色</li><li>ignore 创建 ignore文件</li><li>Nyan Progress Bar 彩虹进度条</li><li>Code Glance pro 代码右侧缩略图</li><li>highlight-bracket-pair 高连显示当前括号内部</li><li>MyBatisX .....</li></ul><h3 id="_4-使用技巧-了解" tabindex="-1"><a class="header-anchor" href="#_4-使用技巧-了解" aria-hidden="true">#</a> 4, 使用技巧 (了解)</h3><p>1 ,</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>写代码时用 Alt-Insert （ Code|Generate… ）可以创建类里面任何字段的 getter 与 setter 方法。&lt;?xml:namespace prefix = v ns = “urn:schemas-microsoft-com:vml” /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、右键点击断点标记（在文本的左边栏里）激活速查菜单，你可以快速设置 enable/disable 断点或者条件它的属性。</p><p>3 、 CodeCompletion （代码完成）属性里的一个特殊的变量是，激活 Ctrl-Alt-Space 可以完成在或不在当前文件里的类名。如果类没有引入则 import 标志会自动创建。</p><p>4 、使用 Ctrl-Shift-V 快捷键可以将最近使用的剪贴板内容选择插入到文本。使用时系统会弹出一个含有剪贴内容的对话框，从中你可以选择你要粘贴的部分。</p><p>5 、利用 CodeCompletion （代码完成）属性可以快速地在代码中完成各种不同地语句，方法是先键入一个类名地前几个字母然后再用 Ctrl-Space 完成全称。如果有多个选项，它们会列在速查列表里。</p><p>6 、用 Ctrl-/ 与 Ctrl-Shift-/ 来注释 / 反注释代码行与代码块。 -/ 用单行注释标记（“ //… ”）来注释 / 反注释当前行或者选择地代码块。而 Ctrl-Shift-/ 则可以用块注释标记（“ /…/ ”）把所选块包围起来。要反注释一个代码块就在块中任何一个地方按 Ctrl-Shift-/ 即可。</p><p>7 、按 Alt-Q （ View|Context Info ）可以不需要移动代码就能查看当前方法地声明。连续按两次会显示当前所编辑的类名。</p><p>8 、使用 Refactor|Copy Class… 可以创建一个所选择的类的“副本”。这一点很有用，比如，在你想要创建一个大部分内容都和已存在类相同的类时。</p><p>9 、在编辑器里 Ctrl-D 可以复制选择的块或者没有所选块是的当前行。</p><p>10 、 Ctrl-W （选择字）在编辑器里的功能是先选择脱字符处的单词，然后选择源代码的扩展区域。举例来说，先选择一个方法名，然后是调用这个方法的表达式，然后是整个语句，然后包容块，等等。</p><p>11 、如果你不想让指示事件细节的“亮球”图标在编辑器上显示，通过按 Alt-Enter 组合键打开所有事件列表然后用鼠标点击它就可以把这个事件文本附件的亮球置成非活动状态。 这样以后就不会有指示特殊事件的亮球出现了，但是你仍然可以用 Alt-Enter 快捷键使用它。</p><p>12 、在使用 CodeCompletion 时，可以用逗点（ . ）字符，逗号（，）分号（；），空格和其它字符输入弹出列表里的当前高亮部分。选择的名字会随着输入的字符自动输入到编辑器里。</p><p>13 、在任何工具窗口里使用 Escape 键都可以把焦点移到编辑器上。 Shift-Escape 不仅可以把焦点移到编辑器上而且还可以隐藏当前（或最后活动的）工具窗口。 F12 键把焦点从编辑器移到最近使用的工具窗口。</p><p>14 、在调试程序时查看任何表达式值的一个容易的方法就是在编辑器中选择文本（可以按几次 Ctrl-W 组合键更有效地执行这个操作）然后按 Alt-F8 。</p><p>15 、要打开编辑器脱字符处使用的类或者方法 Java 文档的浏览器，就按 Shift-F1 （右键菜单的 External JavaDoc ）。 要使用这个功能须要把加入浏览器的路径，在“ General ”选项中设置（ Options | IDE Settings ），另外还要把创建的 Java 文档加入到工程中（ File | Project Properties ）。</p><p>16 、用 Ctrl-F12 （ View | File Structure Popup ）键你可以在当前编辑的文件中快速导航。 这时它会显示当前类的成员列表。选中一个要导航的元素然后按 Enter 键或 F4 键。要轻松地定位到列表中的一个条目，只需键入它的名字即可。</p><p>17 、在代码中把光标置于标记符或者它的检查点上再按 Alt-F7 （右键菜单中的 Find Usages… ）会很快地查找到在整个工程中使用地某一个类、方法或者变量的位置。</p><p>18 、按 Ctrl-N （ Go to | Class… ）再键入类的名字可以快速地在编辑器里打开任何一个类。从显示出来的下拉列表里选择类。 同样的方法你可以通过使用 Ctrl-Shift-N （ Go to | File… ）打开工程中的非 Java 文件。</p><p>19 、要导航代码中一些地方使用到的类、方法或者变量的声明，把光标放在查看项上再按 Ctrl-B 即可。也可以通过按 Ctrl 键的同时在查看点上单击鼠标键调转到声明处。</p><p>20 、把光标放到查看点上再按 Ctrl-Alt-B 可以导航到一个抽象方法的实现代码。</p><p>21 、要看一个所选择的类的继承层次，按 Ctrl-H （ Browse Type Hierarchy ）即可。也可以激活编辑器中的继承关系视图查看当前编辑类的继承关系。22 、使用 Ctrl-Shift-F7 （ Search | Highlight Usages in File ）可以快速高亮显示当前文件中某一变量的使用地方。按 Escape 清除高亮显示。</p><p>23 、用 Alt-F3 （ Search | Incremental Search ）在编辑器中实现快速查查找功能。 在“ Search for: ”提示工具里输入字符，使用箭头键朝前和朝后搜索。按 Escape 退出。</p><p>24 、按 Ctrl-J 组合键来执行一些你记不起来的 Live Template 缩写。比如，键“ it ”然后按 Ctrl-J 看看有什么发生。</p><p>25 、 Introduce Variable 整合帮助你简化代码中复杂的声明。举个例子，在下面的代码片断里，在代码中选择一个表达式：然后按 Ctrl-Alt-V 。</p><p>26 、 Ctrl-Shift-J 快捷键把两行合成一行并把不必要的空格去掉以匹配你的代码格式。</p><p>27 、 Ctrl-Shift-Backspace （ Go to | Last Edit Location ）让你调转到代码中所做改变的最后一个地方。 多按几次 Ctrl-Shift-Backspace 查看更深的修改历史。</p><p>28 、用 Tools | Reformat Code… 根据你的代码样式参考（查看 Options | IDE Setting | Code Style ）格式化代码。 使用 Tools | Optimize Imports… 可以根据设置（查看 Options | IDE Setting | Code Style | Imports ）自动“优化” imports （清除无用的 imports 等）。</p><p>29 、使用 IDEA 的 Live Templates | Live Templates 让你在眨眼间创建许多典型代码。比如，在一个方法里键入。再按 Tab 键看有什么事情发生了。 用 Tab 键在不同的模板域内移动。查看 Options | Live Templates 获取更多的细节。</p><p>30 、要查看一个文件中修改的本地历史，激活右键菜单里的 Local VCS | Show History… 。也许你可以导航不同的文件版本，看看它们的不同之处再回滚到以前的任何一个版本吧。 使用同样的右键菜单条目还可以看到一个目录里修改的历史。有了这个特性你就不会丢失任何代码了。</p><p>31 、如果要了解主菜单里每一个条目的用途，把鼠标指针移到菜单条目上再应用程序框架的底部的状态栏里就会显示它们的一些简短描述，也许会对你有帮助。</p><p>32 、要在编辑器里显示方法间的分隔线，打开 Options | IDE Settings | Editor ，选中“ Show method separators ”检查盒（ checkbox ）。</p><p>33 、用 Alt-Up 和 Alt-Down 键可以在编辑器里不同的方法之间快速移动。</p><p>34 、用 F2/Shift-F2 键在高亮显示的语法错误间跳转。用 Ctrl-Alt-Down/Ctrl-Alt-Up 快捷键则可以在编译器错误信息或者查找操作结果间跳转。</p><p>35 、通过按 Ctrl-O （ Code | Override Methods… ）可以很容易地重载基本类地方法。要完成当前类 implements 的（或者抽象基本类的）接口的方法，就使用 Ctrl-I （ Code | Implement Methods… ）。</p><p>36 、如果光标置于一个方法调用的括号间，按 Ctrl-P 会显示一个可用参数的列表。</p><p>37 、要快速查看编辑器脱字符处使用的类或方法的 Java 文档，按 Ctrl-Q （在弹出菜单的 Show Quick JavaDoc 里）即可。</p><p>38 、像 Ctrl-Q （ Show Quick JavaDoc 显示简洁 Java 文档）， Ctrl-P （ Show Parameter Info 显示参数信息）， Ctrl-B （ Go to Declaration 跳转到声明）， Shift-F1 （ External JavaDoc 外部 Java 文档）以及其它一些快捷键不仅可以在编辑器里使用，也可以应用在代码完成右键列表里。</p><p>39 、 Ctrl-E （ View | Recent Files ）弹出最近访问的文件右键列表。选中文件按 Enter 键打开。</p><p>40 、在 IDEA 中可以很容易地对你的类，方法以及变量进行重命名并在所有使用到它们的地方自动更正。试一下，把编辑器脱字符置于任何一个变量名字上然后按 Shift-F6 （ Refactor | Rename… ）。在对话框里键入要显示地新名字再按 Enter 。你会浏览到使用这个变量地所有地方然后按“ Do Refactor ”按钮结束重命名操作。</p><p>41 、要在任何视图（ Project View 工程视图， Structure View 结构视图或者其它视图）里快速选择当前编辑地部分（类，文件，方法或者字段），按 Alt-F1 （ View | Select in… ）。</p><p>42 、在“ new ”字符后实例化一个已知类型对象时也许你会用到 SmartType 代码完成这个特性。比如，键入再按 Ctrl-Shift-Space ：</p><p>43 、通过使用 SmartType 代码完成，在 IDEA 中创建接口的整个匿名 implementation 也是非常容易的，比如，对于一些 listener （监听器），可以键入 Component component; component.addMouseListener( new );</p><p>然后再按 Ctrl-Shift-Space 看看有什么发生了。</p><p>44 、在你需要设置一个已知类型的表达式的值时用 SmartType 代码完成也很有帮助。比如，键入 String s = ( 再按 Ctrl-Shift-Space 看看会有什么出现。</p><p>45 、在所有视图里都提供了速查功能：在树里只需键入字符就可以快速定位到一个条目。</p><p>46 、当你想用代码片断捕捉异常时，在编辑器里选中这个片断，按 Ctrl-Alt-T （ Code | Surround with… ）然后选择“ try/catch ”。它会自动产生代码片断中抛出的所有异常的捕捉块。在 Options | File Templates | Code tab 中你还可以自己定制产生捕捉块的模板。 用列表中的其它项可以包围别的一些结构。</p><p>47 、在使用代码完成时，用 Tab 键可以输入弹出列表里的高亮显示部分。 不像用 Enter 键接受输入，这个选中的名字会覆盖掉脱字符右边名字的其它部分。这一点在用一个方法或者变量名替换另一个时特别有用。</p><p>48 、在声明一个变量时代码完成特性会给你显示一个建议名。比如，开始键入“ private FileOutputStream ”然后按 Ctrl-Space 在 Options | IDE Setting | Code Style 中还可以为本地变量，参数，实例及静态字段定制名字。</p><h3 id="_5-基本调试功能" tabindex="-1"><a class="header-anchor" href="#_5-基本调试功能" aria-hidden="true">#</a> 5, 基本调试功能</h3><ol><li><strong>调试按钮解释</strong></li></ol><p><img src="' + _imports_34 + '" alt="image-20231214123059723"></p><blockquote><p>注意：debug的过程中，也可以设置断点。</p></blockquote><ol start="2"><li><strong>删除调试断点</strong></li></ol><p><img src="' + _imports_35 + '" alt="image-20231214123818829"></p><ol start="3"><li><strong>设置调试可以进入源码查看</strong></li></ol><p><img src="' + _imports_36 + '" alt="image-20231214123024654"></p><h3 id="_6-java-常用模板" tabindex="-1"><a class="header-anchor" href="#_6-java-常用模板" aria-hidden="true">#</a> 6, Java 常用模板</h3><p>yml⽇志格式</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># ⽇志格式</span>\n<span class="token key atrule">logging</span><span class="token punctuation">:</span>\n <span class="token key atrule">pattern</span><span class="token punctuation">:</span>\n <span class="token key atrule">console</span><span class="token punctuation">:</span> &#39;%d<span class="token punctuation">{</span>HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss.SSS<span class="token punctuation">}</span> %clr(%<span class="token punctuation">-</span>5level) <span class="token punctuation">---</span> <span class="token punctuation">[</span>%<span class="token punctuation">-</span>15thread<span class="token punctuation">]</span> %cyan(%<span class="token punctuation">-</span>50lo\ngger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span>)<span class="token punctuation">:</span>%msg%n&#39;\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-专业解释" tabindex="-1"><a class="header-anchor" href="#_7-专业解释" aria-hidden="true">#</a> 7, 专业解释</h3><p><img src="' + _imports_37 + '" alt="image-20231226163919464"></p><h3 id="_8-java-虚拟机内存模型" tabindex="-1"><a class="header-anchor" href="#_8-java-虚拟机内存模型" aria-hidden="true">#</a> 8, Java 虚拟机内存模型</h3><p><img src="' + _imports_38 + '" alt="image-20231226164009906"></p><h3 id="_9-总结-java-基础" tabindex="-1"><a class="header-anchor" href="#_9-总结-java-基础" aria-hidden="true">#</a> 9, ==总结 Java 基础==</h3><p><strong>Java 的运行机制</strong></p><p><img src="' + _imports_39 + '" alt="image-20231226164202129"></p><p><strong>Java 的书写规范</strong></p><p><img src="' + _imports_40 + '" alt="image-20231226164246374"></p>', 168);
const _hoisted_169 = {
  href: "https://tool.lu/hexconvert/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_170 = /* @__PURE__ */ createStaticVNode('<h2 id="二-java-基础" tabindex="-1"><a class="header-anchor" href="#二-java-基础" aria-hidden="true">#</a> 二, Java 基础</h2><hr><p><strong>注释</strong></p><ul><li>单行</li><li>多行</li><li>文档注释</li></ul><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h3><p><img src="' + _imports_41 + '" alt="image-20231226164613990"></p><p>标识符的使用规范</p><p><img src="' + _imports_42 + '" alt="image-20231226164626804"></p><p><strong>字面量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;malu&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// int表示整数</span>\n        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        age <span class="token operator">=</span> age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">&quot;wc今年&quot;</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">&quot;岁&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">18.5</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">&quot;beijinig&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;shahe&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在{}中定义的变量，这个变量只能在{}中访问，变量的有效范围叫变量的作用域</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//System.out.println(a);</span>\n\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 在同一个作用域内，不能有相同的变量名</span>\n            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token comment">//int b = 2;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 变量没有赋值（初始化），是不能使用的</span>\n            <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n            <span class="token comment">//System.out.println(c);</span>\n\n            <span class="token comment">// 同一行，可以定义多个变量</span>\n            <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键字</strong></p><ul><li>关键字是java语言中有特殊含义的单词。比如用int表示整数，用double表示小数，等等！</li><li>我们学习Java的语法其本质就是学习这些关键字的含义，一共有50多个关键字，我们不是一次性把这些关键字学完，会在后续的课程中每天学一点，慢慢得你就都学会了。</li><li>关键字都是小写的，关键字在idea中有特殊颜色标记，默认是蓝色的。</li></ul><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><p><strong>标识符</strong></p><p>标识符：</p><ul><li>类名，变量名其实都是标志符，取名字的规则，不能让我们随即便瞎取。有些规则是强制要求的，不遵守就会报错。还有一些规则是我们建议大家遵守的，这样取名字显得我们更加专业</li></ul><p>强制要求</p><ul><li>最好是字母、数字、下划线、$组成</li><li>不能以数字开头</li><li>不能是Java的关键字</li></ul><p>建议遵守：按照下面的方式取名字会显得更加专业</p><ul><li>所有的名字要见名知意，便于自己和别人阅读</li><li>类名：首字母大写（大驼峰命名）</li><li>变量名：第二个单词开始首字母大写（小驼峰命名）</li></ul><p><strong>数据类型转换</strong></p><p>分类：</p><ul><li>自动类型转化</li><li>强制类型转化</li></ul><p>自动类型转化之表达式类型转化</p><ul><li>所谓表达式指的是几个变量或者几个数据一起参与运算的式子</li><li>多种数据类型参与运算，其结果以大的数据类型为准</li><li>byte, short, char 三种类型数据在和其他类型数据运算时，都会转换为int类型再运算</li></ul><p>强制类型转化</p><ul><li>强行将范围大的数据，赋值给范围小的变量也是可以的，这里就需要用到强制类型转换</li><li>格式：目标数据类型 变量名 = (目标数据类型)被转换的数据</li><li>强制类型转化，有数据丢失风险</li></ul><p><strong>算术运算符</strong></p><p><strong>自增减运算符</strong></p><p><strong>赋值运算符</strong></p><p><strong>关系运算符</strong></p><p><strong>逻辑运算符</strong></p><p><strong>三元运算符</strong></p><p><strong>Scanner 获取用户输入</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入整数</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的年龄是:&quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的名字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入字符串</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的名字是:&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支结构" tabindex="-1"><a class="header-anchor" href="#分支结构" aria-hidden="true">#</a> 分支结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">298</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您的绩效级别是： D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您的绩效级别是： C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您的绩效级别是： B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您的绩效级别是： A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您录入的分数有毛病~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构" aria-hidden="true">#</a> 循环结构</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> week <span class="token operator">=</span> <span class="token string">&quot;周三&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周一&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;埋头苦干，解决bug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周二&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求大牛程序员帮忙&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周三&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;今晚啤酒、龙虾、小烧烤&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周四&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主动帮助新来的女程序解决bug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周五&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;今晚吃鸡&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周六&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;与王婆介绍的小芳相亲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;周日&quot;</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;郁郁寡欢、准备上班&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的星期信息不存在~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="随机类-random" tabindex="-1"><a class="header-anchor" href="#随机类-random" aria-hidden="true">#</a> 随机类 Random</h3><p>生成随机数的功能，其实 Java已经给我们提供了，在JDK中提供了一个类叫做Random，我们只需要调用Random这个类提供的功能就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// r表示random对象，用于生成随机数</span>\n        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 生成一个0~10之间的随机数，不包含10的</span>\n        <span class="token comment">//System.out.println(r.nextInt(10));</span>\n        <span class="token comment">//System.out.println(r.nextInt());</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 生成0-9之间的随机数</span>\n            <span class="token keyword">int</span> data <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scanner-类" tabindex="-1"><a class="header-anchor" href="#scanner-类" aria-hidden="true">#</a> Scanner 类</h3><blockquote><p><code>Scanner</code> 类是 Java 标准库中的一个类，用于从输入流中读取用户的输入。</p></blockquote><p>代码示例, 基本步骤：</p><ol><li>首先创建了一个 <code>Scanner</code> 对象</li><li>将标准输入流 <code>System.in</code> 作为输入流传递给它</li><li>使用 <code>nextInt()</code> 方法读取用户输入的整数</li><li>并使用 <code>next()</code> 方法读取用户输入的字符串</li><li>最后将读取到的数据输出到控制台</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token comment">// 创建 Scanner 对象，使用标准输入作为输入流</span>\n        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入整数: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取整数</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取字符串</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的整数是: &quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的字符串是: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭 Scanner 对象</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Scanner</code> 类还提供了其他一些便捷的方法，用于读取不同类型的数据，如 <code>nextLine()</code> 读取整行文本、<code>nextDouble()</code> 读取浮点数等。可以根据需要选择合适的方法进行输入的解析。</p></blockquote><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p><img src="' + _imports_43 + '" alt="image-20231226164709402"></p><ul><li>基本数据类型</li><li>引用数据类型</li></ul><ol><li><h4 id="基本数据类型-primitive-data-types" tabindex="-1"><a class="header-anchor" href="#基本数据类型-primitive-data-types" aria-hidden="true">#</a> 基本数据类型（Primitive Data Types）：</h4><ul><li><code>boolean</code>：布尔类型，表示<code>true</code>或<code>false</code>。</li><li><code>byte</code>：字节类型，表示范围为 -128 到 127 的整数。</li><li><code>short</code>：短整型，表示范围为 -32,768 到 32,767 的整数。</li><li><code>int</code>：整型，表示范围为 -2,147,483,648 到 2,147,483,647 的整数。</li><li><code>long</code>：长整型，表示范围为 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 的整数。</li><li><code>float</code>：单精度浮点型，表示带有小数部分的数字。</li><li><code>double</code>：双精度浮点型，表示带有小数部分的数字。</li><li><code>char</code>：字符类型，表示单个Unicode字符。</li></ul></li><li><h4 id="引用数据类型-reference-data-types" tabindex="-1"><a class="header-anchor" href="#引用数据类型-reference-data-types" aria-hidden="true">#</a> 引用数据类型（Reference Data Types）：</h4><ul><li><code>String</code>：字符串类型，表示一组字符序列。</li><li><code>Array</code>：数组类型，表示相同类型的多个元素的集合。</li><li><code>Class</code>：类类型，表示对象的类。</li><li><code>Interface</code>：接口类型，表示定义一组方法的协议。</li><li><code>Enum</code>：枚举类型，表示一组预定义的常量。</li><li><code>Object</code>：对象类型，表示任意类型的对象。</li></ul><p>整数和小数的默认类型：</p><ul><li>比如23，它默认就为int类型；如果加上后缀L，则为long类型</li><li>比如23.8，它默认为double类型；如果加上后缀F，则为float类型</li></ul></li></ol><blockquote><p>Java 还支持自定义的类、接口和枚举类型，以及包装类（如<code>Integer</code>、<code>Double</code>等），用于将基本数据类型封装为对象。</p></blockquote><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>Java中的数组和JS中的数组还是有区别的，Java中的数组是用来存一批同种类型的数据的。如：想要存储 20, 10, 80, 60, 90 这些数据。 我们可以把代码写成这样：</p><blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组变量名中存储的是数组在内存中的地址，数组是一种引用数据类型。</p></blockquote><p><strong>int[] 和 ArrayList</strong></p><p>在Java中，int[] 和 ArrayList 是两种不同的数据结构，它们有以下区别：</p><blockquote><ol><li>类型：int[] 是一个原生的数组类型，而 ArrayList 是 Java 集合框架中的一个类。</li><li>大小：int[] 是一个固定大小的数组，一旦创建后，大小就无法改变。而 ArrayList 是一个可变大小的动态数组，可以根据需要自动调整大小。</li><li>泛型：int[] 只能存储 int 类型的元素，而 ArrayList 可以存储任意对象类型。ArrayList 使用泛型，可以指定存储的元素类型，例如 ArrayList <em>Integer</em> 只能存储 Integer 类型的对象。</li><li>功能：int[] 是基本的数组类型，提供了一些基本操作，如通过索引访问元素、修改元素值等。ArrayList 是一个类，提供了丰富的方法和功能，如添加元素、删除元素、查找元素、插入元素、排序等。</li><li>自动装箱和拆箱：int[] 中的元素是原生数据类型，没有自动装箱和拆箱的概念。而 ArrayList 中的元素是对象，当需要存储原生数据类型时，会自动进行装箱和拆箱操作。</li><li>内存占用：int[] 在内存中占用的空间比 ArrayList 小，因为 int[] 只存储原生数据类型的值，而 ArrayList 存储的是对象，并且还需要额外的内存来存储对象的引用。</li></ol></blockquote><p><strong>数组初始化</strong></p><p>数组有两种初始化的方式：</p><ul><li>静态初始化</li><li>动态初始化</li></ul><blockquote><p>数组的静态初始化: 在定义数组时直接给数组中的数据赋值。</p></blockquote><p><strong>数组的元素访问</strong></p><p><strong>数组遍历</strong></p><p><strong>数组的动态初始化</strong></p><p>另一个初始化数组的方式叫 <strong>动态初始化</strong>。动态初始化不需要我们写出具体的元素，而是指定元素类型和长度就行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 数据类型[]  数组名 = new 数据类型[长度];</span>\n<span class="token comment">// 数组中的元素默认值是0</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用动态初始化定义数组时，根据元素类型不同，默认值也有所不同。</p><ul><li>byte, short, char, int, long 默认值是0</li><li>float, double 默认值是0.0</li><li>boolean 默认值是false</li><li>引用类型（类，接口，数组，String） 默认值是null</li></ul><p><strong>案例需求</strong>：某歌唱比赛，需要开发一个系统：可以录入6名评委的打分，录入完毕后立即输出平均分</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请你输入当前第&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;个评委的分数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">double</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;选手最终得分是&quot;</span><span class="token operator">+</span>sum<span class="token operator">/</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="程序的运行" tabindex="-1"><a class="header-anchor" href="#程序的运行" aria-hidden="true">#</a> 程序的运行</h3><p>Java为了便于虚拟机执行Java程序，将虚拟机的内存划分为 方法区、栈、堆、本地方法栈、寄存器 这5块区域。同学们需要重点关注的是 <strong>方法区、栈、堆</strong>。</p><p>下面把每一个块内存区域作用介绍一下，我们大致只需要知道每一部分存储什么内容就行。</p><ul><li><strong>方法区</strong>：字节码文件先加载到这里</li><li><strong>栈</strong>：方法运行时所进入的内存区域，由于变量在方法中，所以变量也在这一块区域中</li><li><strong>堆</strong>：存储new出来的东西，并分配地址。由于数组是new 出来的，所以数组也在这块区域。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// java虚拟机，执行的不是java源码，执行的是.class文件（字节码）</span>\n        <span class="token comment">// .class文件（字节码）是在JVM中执行的。JVM把内存分成几个区域？</span>\n        <span class="token comment">//    方法区</span>\n        <span class="token comment">//    栈</span>\n        <span class="token comment">//    堆</span>\n        <span class="token comment">//    本地方法栈</span>\n        <span class="token comment">//    寄存器</span>\n        <span class="token comment">// 上面的5个区域中，目前我们重点关注三个区域：方法区，栈，堆</span>\n        <span class="token comment">//   字节码文件，是先加载到方法区的</span>\n        <span class="token comment">//   定义的一些变量是存储在栈区的</span>\n        <span class="token comment">//   new出来的对象，是存储在堆区的</span>\n\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_44 + '" alt="image-20231215143916271"></p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>在一个类中可以写多个方法，格式：</p><p><img src="' + _imports_45 + '" alt="image-20231215144329948"></p><p>说明：</p><ul><li>方法的修饰符：暂时都使用public static 修饰。（目前看做是固定写法，后面是可以改动的）</li><li>方法申明了具体的返回值类型，内部必须使用return返回对应类型的数据。</li><li>形参列表可以有多个，甚至可以没有； 如果有多个形参，多个形参必须用“，”隔开，且不能给初始化值。</li></ul><p>设计一个方法原则：</p><ul><li>如果方法不需要返回数据，返回值类型必须申明成void（无返回值申明）, 此时方法内部不可以使用return返回数据。</li><li>方法如果不需要接收外部传递进来的数据，则不需要定义形参，且调用方法时也不可以传数据给方法。</li><li>没有参数，且没有返回值类型（void）的方法，称为值无参数、无返回值方法。此时调用方法时不能传递数据给方法。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// void 指定无返回值</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>print 和 println</strong></p><p>下面是两者的区别：</p><ol><li><code>println()</code>：<code>println()</code> 方法用于打印输出后会自动换行。它接受一个参数并将其打印到输出流，然后在最后添加一个换行符 <code>\\n</code>。例如，<code>System.out.println(&quot;Hello, World!&quot;)</code> 会打印出字符串 &quot;Hello, World!&quot; 并换行。</li><li><code>print()</code>：<code>print()</code> 方法用于打印输出，但不会自动换行。它接受一个参数并将其打印到输出流，但不会在最后添加换行符。例如，<code>System.out.print(&quot;Hello, World!&quot;)</code> 会打印出字符串 &quot;Hello, World!&quot;，但不会换行。</li></ol><p><strong>方法到执行原理</strong></p><p>每次调用方法，方法都会进栈执行；执行完后，又会弹栈出去。假设在main方法中依次调用A方法、B方法、C方法，在内存中的执行流程如下：</p><ul><li>每次调用方法，方法都会从栈顶压栈执行没执行</li><li>每个方法执行完后，会从栈顶弹栈出去</li></ul><h3 id="方法的重载" tabindex="-1"><a class="header-anchor" href="#方法的重载" aria-hidden="true">#</a> 方法的重载</h3><p>重载指的是：一个类中，出现多个相同的方法名，但是它们的形参列表是不同的，那么这些方法就称为方法重载了。其它的都不管（如：修饰符，返回值类型是否一样都无所谓）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 方法重截：1）方法名一样  2）形参列表不一样（返回值类型和修饰符无所谓）</span>\n    <span class="token comment">//   形参的数据类型不一样也是所谓的形参列表一样</span>\n    <span class="token comment">//   形参的个数不一样，也是所谓的形参列表不一样</span>\n  \n    <span class="token comment">// 在调用方法，就会根据你传递的参数来确定你要调用哪一个方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====第1上fn执行了====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====第2上fn执行了====&quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====第3上fn执行了====&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====第4上fn执行了====&quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====第5上fn执行了====&quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span>  <span class="token number">110</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>return 单独使用</p><blockquote><p>单独使用return语句，可以结束函数调用。</p></blockquote><h3 id="编程练习" tabindex="-1"><a class="header-anchor" href="#编程练习" aria-hidden="true">#</a> 编程练习</h3><p><strong>99 乘法表</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> code02 <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span>  str <span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n                str <span class="token operator">+=</span> j <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> i  <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span>  <span class="token operator">+</span> j <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-java-面向对象" tabindex="-1"><a class="header-anchor" href="#三-java-面向对象" aria-hidden="true">#</a> 三, Java 面向对象</h2><hr><p>类和对象注意点：</p><ul><li>类名首字母大写，满足驼峰命名</li><li>类中定义的变量叫成员变量，说白了就是封装的数据</li><li>类中定义的方法叫成员方法，说白了就是操作数据的</li><li>成员变量都有默认值（和基本类型默认值一样），在定义成员变量时，一般不赋初始</li><li>一个文件中，可以有多个类，但只能一个用public修饰，且public修饰的类名必须是文件名。</li></ul><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h3><blockquote><p>this 表示 new 出来的对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>malu<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 想想，js中的new的实例原理</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this=&gt;&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this表示new出来的对象    </span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s1=&gt;&quot;</span><span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// s1是一个地址</span>\n        s1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过this在方法中可以访问本类对象的成员变量。</p></blockquote><h3 id="this-基本使用" tabindex="-1"><a class="header-anchor" href="#this-基本使用" aria-hidden="true">#</a> this 基本使用</h3><blockquote><p>在 Java 中，关键字 <code>this</code> 用于引用当前对象。</p></blockquote><p>this 可以用于以下几种情况：</p><p><strong>访问当前对象的成员变量</strong>：当成员变量与方法的参数或局部变量同名时，可以使用 <code>this</code> 关键字来引用对象的成员变量。这样可以明确指定要访问的是对象的成员变量，而不是方法的参数或局部变量。</p><p><strong>访问当前对象的成员变量</strong>：当成员变量与方法的参数或局部变量同名时，可以使用 <code>this</code> 关键字来引用对象的成员变量。这样可以明确指定要访问的是对象的成员变量，而不是方法的参数或局部变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 使用 this 引用成员变量</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>调用当前对象的其他方法</strong>：在对象的方法内部，可以使用 <code>this</code> 关键字来调用当前对象的其他方法。这样可以在方法之间进行交互和调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 调用 method2 方法</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 方法逻辑</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在构造器中调用其他构造器</strong>：在一个构造器中，可以使用 <code>this</code> 关键字来调用该类的其他构造器。这样可以在构造器之间进行重用和调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 调用带参数的构造器</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructor-构造器" tabindex="-1"><a class="header-anchor" href="#constructor-构造器" aria-hidden="true">#</a> <strong>Constructor 构造器</strong></h3><blockquote><p>在 Java 中，构造器（Constructor）是一种特殊的方法，用于创建和初始化类的对象。</p></blockquote><p>构造器其实是一种特殊的方法，但是这个方法没有返回值类型，方法名必须和类名相同。构造器可以有形参，也可以没有形参，构造器是没有返回值类型。</p><p>当new一个类时，构造器会自动执行，构造器执行完毕，就意味着这个对象创建完毕了。new的时候，如果传递了参数，那么就会调用有参构建器。</p><p><strong>构造器的特点:</strong></p><ol><li><strong>与类同名</strong>：构造器的名称必须与所在类的名称完全相同，包括大小写。</li><li><strong>没有返回类型</strong>：构造器没有显式的返回类型声明。它们不会使用 <code>void</code>、<code>int</code> 或其他类型来指定返回类型。实际上，构造器的返回类型是隐含的，始终是所在类的实例。</li><li><strong>用于对象初始化</strong>：构造器的主要目的是创建对象并初始化其状态。当使用 <code>new</code> 关键字创建类的实例时，构造器会被调用来执行对象的初始化操作。</li><li><strong>可以重载</strong>：类可以定义多个构造器，它们之间可以根据参数列表的不同进行重载。这样可以支持使用不同的参数组合来创建对象。</li><li><strong>隐式调用</strong>：构造器在创建对象时会被隐式调用。当调用 <code>new</code> 关键字创建对象时，会根据参数匹配调用相应的构造器。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n    <span class="token comment">// 无参构造器</span>\n    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 带参数的构造器</span>\n    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Getter 方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用构造器创建对象</span>\n<span class="token class-name">MyClass</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用无参构造器</span>\n<span class="token class-name">MyClass</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用带参数的构造器</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出: 0</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出: 10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new-的执行" tabindex="-1"><a class="header-anchor" href="#new-的执行" aria-hidden="true">#</a> new 的执行</h3><p><code>new</code> 关键字创建一个类的实例时，会发生以下几个步骤：</p><ol><li><strong>内存分配</strong>：首先，Java 虚拟机（JVM）会在堆（Heap）内存中为该类的实例分配内存空间。堆是用于动态分配对象的一块内存区域。</li><li><strong>初始化</strong>：在分配内存后，JVM 会对新创建的对象进行初始化。这包括执行实例变量的默认初始化（按类型赋予默认值）以及执行构造器中的初始化代码。</li><li><strong>调用构造器</strong>：根据 <code>new</code> 关键字后面的类名和参数列表，JVM 会调用相应的构造器来完成对象的初始化。构造器是一种特殊的方法，负责对对象进行初始化操作。</li><li><strong>返回对象的引用</strong>：在对象初始化完成后，<code>new</code> 表达式返回对象的引用。该引用可以存储在变量中，以后可以使用它来访问和操作该对象。</li></ol><p>示例代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">// 私有成员变量</span>\n		\n  	<span class="token comment">// 构造器</span>\n    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n   	<span class="token comment">// getter方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用 new 关键字创建对象</span>\n<span class="token class-name">MyClass</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> objValue <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过引用 obj 访问对象的方法</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: 10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实体类" tabindex="-1"><a class="header-anchor" href="#实体类" aria-hidden="true">#</a> <strong>实体类</strong></h3><blockquote><p>实体类（Entity Class）是面向对象编程中的一个概念，用于表示具体的实体或对象。实体类通常用于模拟现实世界中的各种事物，如人、物、事件等，并封装了与该实体相关的属性和行为。</p></blockquote><p>代码示例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Getter 和 Setter 方法</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> address<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 其他方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, I am &quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot; years old.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I live at &quot;</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建具体的 Person 对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出：My name is Alice, I am 25 years old.</span>\n<span class="token comment">//       I live at 123 Main St.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="业务类" tabindex="-1"><a class="header-anchor" href="#业务类" aria-hidden="true">#</a> <strong>业务类</strong></h3><blockquote><p>业务类是用于封装和处理特定业务逻辑的类。它们通常包含与业务相关的属性、方法和行为，用于实现特定的业务需求。</p></blockquote><h3 id="测试类" tabindex="-1"><a class="header-anchor" href="#测试类" aria-hidden="true">#</a> 测试类</h3><h3 id="javabean" tabindex="-1"><a class="header-anchor" href="#javabean" aria-hidden="true">#</a> <strong>JavaBean</strong></h3><blockquote><p><strong>JavaBean是指符合特定规范的Java类</strong>，用于封装数据和提供访问方法。它是一种可重用组件，广泛应用于 Java 开发中，特别是在图形用户界面（GUI）、持久化和传输数据等方面。</p></blockquote><p><strong>JavaBean的特点</strong>包括：</p><ol><li><strong>公共无参构造方法</strong>：JavaBean类必须提供一个公共的无参构造方法，以便其他代码可以通过调用该构造方法来创建对象。</li><li><strong>私有属性</strong>：JavaBean类通常包含私有的属性（成员变量），用于封装数据。这些属性应该使用私有访问修饰符（private）来保证封装性。</li><li><strong>公共访问方法</strong>：JavaBean类应该提供公共的访问方法（Getter和Setter方法）来获取和修改私有属性的值。Getter方法用于获取属性的值，Setter方法用于设置属性的值。</li><li><strong>可序列化支持</strong>：JavaBean类可以实现<code>java.io.Serializable</code>接口，以支持对象的序列化和反序列化。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 无参构造器</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Getter 和 Setter 方法</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在上述示例中，Person 类是一个简单的 JavaBean。它封装了 name 和 age 两个私有属性，并提供了对应的 getter 和 setter 方法。它还实现了 Serializable 接口，以支持对象的序列化。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="package-包" tabindex="-1"><a class="header-anchor" href="#package-包" aria-hidden="true">#</a> package 包</h3><blockquote><p>在Java中，包（Package）是一种用于组织和管理类和接口的机制。包提供了一种<strong>命名空间</strong>，用于防止类名冲突，并提供了一种层次结构来组织和管理相关的类。</p></blockquote><p>包的重要概念和用法：</p><ol><li><strong>包的声明</strong>：在Java源文件的顶部，使用<code>package</code>关键字来声明类所属的包。例如，<code>package com.example.mypackage;</code> 表示类属于名为 <code>com.example.mypackage</code> 的包。</li><li><strong>包的命名规范</strong>：包名通常使用小写字母，并按照反向域名的方式进行命名，以确保唯一性。例如，<code>com.example</code> 是一个常见的包名前缀。</li><li><strong>包的目录结构</strong>：Java源文件按照包的层次结构组织在文件系统中的相应目录中。例如，包名为 <code>com.example.mypackage</code> 的类的源文件应该位于 <code>com/example/mypackage</code> 目录下。</li><li><strong>包的导入</strong>：在Java源文件中，可以使用 <code>import</code> 关键字导入其他包中的类，以便在当前文件中直接使用这些类，而无需完全限定类名。例如，<code>import com.example.otherpackage.OtherClass;</code> 导入了 <code>com.example.otherpackage</code> 包中的 <code>OtherClass</code> 类。</li><li><strong>标准库包</strong>：Java标准库提供了许多预定义的包，用于支持各种常见的功能和任务，例如 <code>java.util</code> 用于提供实用工具类，<code>java.io</code> 用于输入输出操作，<code>java.lang</code> 是Java的核心包，包含基础类和异常类等。</li><li><strong>自定义包</strong>：开发者可以创建自己的包来组织和管理自己编写的类。通过使用包，可以将相关的类组织在一起，提高代码的可读性、可维护性和可重用性。</li></ol><h3 id="string-类" tabindex="-1"><a class="header-anchor" href="#string-类" aria-hidden="true">#</a> String 类</h3><blockquote><p>String是一个类，用于表示字符串。Java提供了一系列操作和方法，用于处理String对象。</p></blockquote><ol><li>创建String对象： <ul><li>直接赋值：<code>String str = &quot;Hello&quot;;</code></li><li>使用构造方法：<code>String str = new String(&quot;Hello&quot;);</code></li></ul></li><li>拼接字符串： <ul><li>使用加号操作符：<code>String fullName = firstName + &quot; &quot; + lastName;</code></li><li>使用concat()方法：<code>String fullName = firstName.concat(&quot; &quot;).concat(lastName);</code></li></ul></li><li>获取字符串长度： <ul><li>使用length()方法：<code>int length = str.length();</code></li></ul></li><li>判断字符串是否为空： <ul><li>使用isEmpty()方法：<code>boolean isEmpty = str.isEmpty();</code></li></ul></li><li>比较字符串： <ul><li>使用equals()方法：<code>boolean isEqual = str1.equals(str2);</code></li><li>忽略大小写比较：<code>boolean isEqualIgnoreCase = str1.equalsIgnoreCase(str2);</code></li></ul></li><li>获取子串： <ul><li>使用substring()方法：<code>String subStr = str.substring(startIndex, endIndex);</code></li><li>获取从索引位置开始的子串：<code>String subStr = str.substring(startIndex);</code></li></ul></li><li>查找子串： <ul><li>使用indexOf()方法：<code>int index = str.indexOf(subStr);</code></li><li>从指定索引位置开始查找：<code>int index = str.indexOf(subStr, startIndex);</code></li><li>查找最后一次出现的位置：<code>int lastIndex = str.lastIndexOf(subStr);</code></li></ul></li><li>替换字符串： <ul><li>使用replace()方法：<code>String newStr = str.replace(oldStr, newStr);</code></li></ul></li><li>分割字符串： <ul><li>使用split()方法：<code>String[] parts = str.split(delimiter);</code></li></ul></li><li>转换大小写：</li></ol><ul><li>使用toLowerCase()方法：<code>String lowerCaseStr = str.toLowerCase();</code></li><li>使用toUpperCase()方法：<code>String upperCaseStr = str.toUpperCase();</code></li></ul><h3 id="arraylist-类" tabindex="-1"><a class="header-anchor" href="#arraylist-类" aria-hidden="true">#</a> ArrayList 类</h3><p><em>Java 中的数组创建后大小不会发生改变</em></p><blockquote><p>ArrayList 是Java集合框架中的一个类，它实现了List接口，用于存储和操作动态大小的元素序列。(ArrayList 集合, 可以暂且当做 JS 中的数组)</p></blockquote><ol><li><strong>添加元素</strong>： <ul><li><code>add(element)</code>：将元素添加到 ArrayList 的末尾。</li><li><code>add(index, element)</code>：将元素插入到指定索引位置。</li><li><code>addAll(collection)</code>：将另一个集合中的所有元素添加到 ArrayList 的末尾。</li></ul></li><li><strong>访问元素</strong>： <ul><li><code>get(index)</code>：获取指定索引位置的元素。</li><li><code>set(index, element)</code>：将指定索引位置的元素替换为新元素。</li></ul></li><li><strong>删除元素</strong>： <ul><li><code>remove(index)</code>：删除指定索引位置的元素。</li><li><code>remove(element)</code>：从 ArrayList 中删除指定元素的第一个匹配项。</li><li><code>clear()</code>：清空 ArrayList 中的所有元素。</li></ul></li><li><strong>查询元素</strong>： <ul><li><code>contains(element)</code>：检查 ArrayList 是否包含指定元素。</li><li><code>indexOf(element)</code>：返回指定元素在 ArrayList 中的第一个匹配项的索引。</li><li><code>lastIndexOf(element)</code>：返回指定元素在 ArrayList 中最后一个匹配项的索引。</li></ul></li><li><strong>集合信息</strong>： <ul><li><code>size()</code>：返回 ArrayList 中的元素数量。</li><li><code>isEmpty()</code>：检查 ArrayList 是否为空。</li></ul></li><li><strong>遍历 ArrayList</strong>： <ul><li>使用增强型 for 循环：<code>for (Type element : arrayList) { ... }</code></li><li>使用普通 for 循环和索引：<code>for (int i = 0; i &lt; arrayList.size(); i++) { ... }</code></li><li>使用迭代器进行遍历：<code>Iterator&lt;Type&gt; iterator = arrayList.iterator();</code></li></ul></li></ol>', 158);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_169, [
        createTextVNode("进制转换 - 在线工具 (tool.lu)"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_170
  ]);
}
const JavaSE_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JavaSE.html.vue"]]);
export {
  JavaSE_html as default
};
