import { _ as _export_sfc, o as openBlock, c as createElementBlock, b as createStaticVNode } from "./app-f755b3a9.js";
const _imports_0 = "/bowenBlog/assets/image-20230915093047479-1abe2a1c.png";
const _imports_1 = "/bowenBlog/assets/image-20230915102733671-fa4fad55.png";
const _imports_2 = "/bowenBlog/assets/image-20230915102236204-16947445730781-272dc5ca.png";
const _imports_3 = "/bowenBlog/assets/image-20230915143543810-9dc1bfcc.png";
const _imports_4 = "/bowenBlog/assets/image-20230915144553131-33d94ca3.png";
const _imports_5 = "/bowenBlog/assets/image-20230915151246063-d16c6edf.png";
const _imports_6 = "/bowenBlog/assets/image-20230915152321699-ebc2c767.png";
const _imports_7 = "/bowenBlog/assets/image-20230915153707470-f6d685a1.png";
const _imports_8 = "/bowenBlog/assets/image-20230915154957642-4e841e66.png";
const _imports_9 = "/bowenBlog/assets/image-20230915163637986-f427c919.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="js高级" tabindex="-1"><a class="header-anchor" href="#js高级" aria-hidden="true">#</a> JS高级</h1><h2 id="一-代码段和作用域" tabindex="-1"><a class="header-anchor" href="#一-代码段和作用域" aria-hidden="true">#</a> 一. 代码段和作用域</h2><p>什么是代码段?</p><ul><li>一个script就是一个代码段</li><li>一个js文件也是一个代码段</li></ul><p>代码段的特点:</p><ul><li>代码段之间互不影响</li><li>上面代码段定义的代码,下面的代码可以使用</li><li>下面定义的变量,上面的代码段不可以使用</li><li>一个页面中 可以存在多个代码段,每一个js文件都是一个代码段</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	 <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n\n    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n\n    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a is not defined</span>\n        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用域</strong></p><ul><li>全局变量的作用范围是全局</li><li>局部变量的作用范围是局部</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 100</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用域链</strong></p><p>向上查找的过程叫做链式过程</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n            c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n            <span class="token keyword">function</span> <span class="token function">gn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//40</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">gn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token comment">// 全局变量  a  c</span>\n        <span class="token comment">// 局部变量  b  d</span>\n        <span class="token comment">// 寻找变量的过程 叫作用域链 链式过程</span>\n        <span class="token comment">// 按照作用域往上寻找 需要按照定义处的范围去寻找</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-预解析" tabindex="-1"><a class="header-anchor" href="#二-预解析" aria-hidden="true">#</a> 二. 预解析</h2><p>JS代码的执行</p><ul><li>预解析</li><li>执行 (预解析结束后才会进入到执行阶段)</li></ul><p><img src="' + _imports_0 + '" alt="image-20230915093047479"></p><p><em>浏览器执行代码时,会对代码进行清洗,把重复的代码一部分进行清洗</em></p><p><strong>变量提升</strong></p><p><img src="' + _imports_1 + '" alt="image-20230915102733671"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 未声明直接使用的变量 会直接报错 a is not defined</span>\n\n<span class="token comment">// 只声明未赋值不会报错</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token comment">// var 声明的变量存在提升</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预解析期间:</p><ul><li>把变量提升, 使用 var 的变量</li><li>函数内部的局部变量,提升导函数打的前面</li></ul><p><img src="' + _imports_2 + '" alt="image-20230915102236204"></p><h2 id="三-执行上下文" tabindex="-1"><a class="header-anchor" href="#三-执行上下文" aria-hidden="true">#</a> 三. 执行上下文</h2><p><strong>内存的概念</strong></p><p>内存 =&gt; 电脑的内存 -</p><p>基本数据类型 =&gt; 存放在栈区 (先进后出)</p><ul><li>Number</li><li>Boolean</li><li>String</li><li>Undefined</li><li>Null</li></ul><p>引用数据类型: <u>存放在堆区堆空间有一个对应的 堆地址 和 变量名还是存放在栈区</u></p><ul><li>function</li><li>object</li><li>Array</li></ul><p><strong>EC execution context</strong></p><p><em>执行上下文是 JavaScript 引擎在执行代码时创建的一个环境，用于管理变量、函数和作用域等信息。每当 JavaScript 代码执行时，都会创建一个新的执行上下文</em>。</p><p><strong>代码从浏览器解析之后,形成了执行上下文</strong></p><ul><li>EC -- 入栈 -- 执行 -- 出栈(出栈=&gt; 销毁 释放内存)</li><li>ECS 栈空间 (执行上下文栈)</li><li>ECG - - 全局代码执行的时候产生 =&gt; GO (装入全局代码)</li><li>ECFn - - 调用一个函数产生 , 调用多次产生多个 ECF1....ECF2....... , ECF1 中有一个Ao (转入局部代码)</li><li>堆空间 - - 引用数据类型存放, 并产生堆地址=&gt;存放于ECG中</li></ul><p><img src="' + _imports_3 + '" alt="image-20230915143543810"></p><p>入栈 =&gt; 执行 =&gt; 出栈 (出栈即销毁 释放内存)</p><p>JS执行代码时:</p><ol><li>先执行去全局代码, 就会产生EC(G), 这个EC(G) 就要入栈</li><li>当我们调用一个函数时,这个局部执行 EC(fn) 也需要入栈</li><li>当函数调用完毕,这个EC(fn)在堆内没有引用就要出栈 =&gt; 释放内存,</li><li>调用其他函数后, 又进入其他EC(fn),执行完毕后又出, 以此类推,当全局代码执行完毕,EC(G)也要出栈.</li></ol><p><strong>练习1</strong></p><p><img src="' + _imports_4 + '" alt="image-20230915144553131"></p><p><strong>练习2</strong></p><p><img src="' + _imports_5 + '" alt="image-20230915151246063"></p><p>练习3</p><p><img src="' + _imports_6 + '" alt="image-20230915152321699"></p><p>练习4</p><p><img src="' + _imports_7 + '" alt="image-20230915153707470"></p><h2 id="四-声明var和不声明var的变量区别" tabindex="-1"><a class="header-anchor" href="#四-声明var和不声明var的变量区别" aria-hidden="true">#</a> 四. 声明var和不声明var的变量区别</h2><p>声明var:</p><ul><li>预解析存在提升,</li></ul><p>不声明:</p><ul><li>预解析不会提升</li></ul><p>不管是否声明var,都会挂载在GO windows中</p><p><img src="' + _imports_8 + '" alt="image-20230915154957642"></p><h2 id="五-使用let-和-const的变量" tabindex="-1"><a class="header-anchor" href="#五-使用let-和-const的变量" aria-hidden="true">#</a> 五. 使用let 和 Const的变量</h2><p>特点:</p><ol><li>let声明的变量不会提升 (提升了但是没有初始化, 报错不同)</li><li>let 与{} 会生成块级作用域</li><li>使用let声明的变量不会挂载在window上</li><li>不能重复声明</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n<span class="token keyword">var</span> i \n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="' + _imports_9 + '" alt="image-20230915163637986"></p><h2 id="六-iife" tabindex="-1"><a class="header-anchor" href="#六-iife" aria-hidden="true">#</a> 六. IIFE</h2><p>立即执行函数;立刻调用函数 (是JS中的函数执行方式)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一种写法</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">//其他写法 ......</span>\n<span class="token operator">!</span> <span class="token operator">+</span> <span class="token operator">-</span> <span class="token operator">~</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;IIFE&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IIFE 还可以接受参数，并将参数传递给函数。这样可以在函数内部使用这些参数。</p><p>使用场景: IIFE 在 JavaScript 中常用于创建模块化代码、封装私有变量和函数，以及在代码执行之前执行一些初始化操作等场景。</p><h2 id="七-闭包" tabindex="-1"><a class="header-anchor" href="#七-闭包" aria-hidden="true">#</a> 七. 闭包</h2><p><strong>什么是闭包?</strong></p><p><em>闭包是函数以及它能够访问和操作的外部变量的组合;</em></p><p>闭包是函数执行后,一个本该被销毁的变量空间,由于其外部的引用,导致其无法被销毁,形成了闭包 .</p><p><strong>闭包的特点:</strong></p><ol><li>延长了变量的生命周期</li><li>扩大了变量的作用范围</li><li>保护(隐藏)了变量</li></ol><p><strong>闭包带来的影响:</strong></p><p>导致了内存泄漏, (编写了大量的闭包,存在了多个独立的空间,没有销毁,占用了一定的内存导致性能问题)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>        <span class="token comment">// 变量a 一直保存在内存中</span>\n    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> inner\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> outer <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 外部的函数访问到了 fn 的变量a</span>\n<span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八-this" tabindex="-1"><a class="header-anchor" href="#八-this" aria-hidden="true">#</a> 八. this</h2><ol><li>函数在调用时，JavaScript会默认给this绑定一个值；</li><li>this的绑定和定义的位置（编写的位置）没有关系；</li><li>this的绑定和调用方式以及调用的位置有关系；</li><li>this是在运行时被绑定的；</li></ol><p>this在不同的位置,指的是不用的东西</p><p>this指向的东西 和位置以及调用方式有关系</p><p>常见的this指的是对象,或者window 或者是其他事件源</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 谁也说不清，现在的this是谁</span>\n    <span class="token comment">// 只有代码运行起来后，JS底层才会给this赋值</span>\n    <span class="token comment">// this最终值和你书写的位置没有关系</span>\n    <span class="token comment">// 和你如何调用fn函数是有关系，不同的调用方式，会给this赋不同的值 </span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// this 指向window</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token comment">// 函数的独立调用, this指向window</span>\n\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;wang&#39;</span><span class="token punctuation">,</span>\n      fn   <span class="token comment">// fn: fn  简写</span>\n    <span class="token punctuation">}</span>\n    gn <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn\n    <span class="token function">gn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// window{}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>this的绑定规则:</p><ul><li>绑定一：默认绑定；</li><li>绑定二：隐式绑定；</li><li>绑定三：显示绑定；</li><li>绑定四：new绑定；</li></ul><hr><h3 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定" aria-hidden="true">#</a> 默认绑定</h3><p>独立函数调用就是所谓的默认绑定，独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 独立的函数调用</span>\n<span class="token comment">// 函数内部的this,在浏览器中表示window</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定" aria-hidden="true">#</a> 隐式绑定</h3><p>另外一种比较常见的调用方式是通过某个对象进行调用的，也就是它的调用位置中，是通过某个对象发起的函数调用</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// --------------- 隐式绑定</span>\n    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">fn</span><span class="token operator">:</span> fn\n    <span class="token punctuation">}</span>\n    <span class="token comment">// fn中的this表示obj</span>\n    <span class="token comment">// fn中this是谁，看.前面是谁</span>\n    obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐式绑定 会把obj对象绑定到this上</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="显示绑定" tabindex="-1"><a class="header-anchor" href="#显示绑定" aria-hidden="true">#</a> 显示绑定</h3><p>隐式绑定有一个前提条件:</p><ul><li>必须在调用的对象内部有一个对函数的作用(比如一个属性)</li><li>如果没有这样的引用,在进行调用时,会报出找不到该函数的错误</li><li>正是通过这个引用, 间接的将this绑定到了这个对象上</li></ul><p>如果我们不希望在 对象内部 包含这个函数的引用 同时又希望在这个对象上进行强制调用</p><ul><li><p>JavaScript所有的函数都可以使用call和apply方法(这个和Prototype有关）</p><ul><li><p>它们两个的区别这里不再展开；</p></li><li><p>其实非常简单，第一个参数是相同的，后面的参数，apply为数组，call为参数列表；</p></li></ul></li><li><p>这两个函数的第一个参数都要求是一个对象，这个对象的作用是什么呢？就是给this准备的。</p></li><li><p>在调用这个函数时，会将this绑定到这个传入的对象上</p></li></ul><p><strong>因为上面的过程,我们明确的绑定了this指向的对象,所以称之为 显示绑定.</strong></p><p>通过call apply bind 方法可以改变this指向,</p><p>函数这个对象上,默认有这几个方法.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fn...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;wc&quot;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// fn本身也是对象</span>\n    <span class="token comment">// call的作用：1）显示绑定this  2）让函数执行</span>\n    <span class="token comment">// 通过call可以显示绑定this为obj</span>\n    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>apply 和 call 的作用是一模一样的,以下代码举例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;fn..&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;wc&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// apply 的作用  1,显示绑定this 2,让函数执行</span>\n<span class="token comment">// 通过call 可以显示绑定this为obj</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">gn</span> <span class="token punctuation">(</span><span class="token parameter">a <span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token function">gn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// call 传递参数直接跟在侯建</span>\n<span class="token comment">// gn.call (obj , 1,2)</span>\n\n<span class="token comment">// apply 需要传递参数的时候,需要把参数放在数组中</span>\n<span class="token comment">// gn.apply (obj)</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bind使用如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;fn..&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;wc&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> newFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// bind的作用   1,显示绑定this  2,不会让函数执行     </span>\n<span class="token comment">// 通过call 可以显示绑定this为obj</span>\n<span class="token function">newFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果call，apply，bind后面跟的是基本数据类型，如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fn...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会把&quot;hello&quot;包装成一个新的对象</span>\n    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数是und this指定window</span>\n    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数是null this指定window</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="new绑定" tabindex="-1"><a class="header-anchor" href="#new绑定" aria-hidden="true">#</a> new绑定</h3><h2 id="九-高阶函数" tabindex="-1"><a class="header-anchor" href="#九-高阶函数" aria-hidden="true">#</a> 九. 高阶函数</h2>', 110);
const _hoisted_111 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_111);
}
const JSgaoji_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JSgaoji.html.vue"]]);
export {
  JSgaoji_html as default
};
