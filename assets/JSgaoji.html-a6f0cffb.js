import { _ as _export_sfc, o as openBlock, c as createElementBlock, b as createStaticVNode } from "./app-8c5d6475.js";
const _imports_0 = "/bowenBlog/assets/image-20230915093047479-1abe2a1c.png";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<hr><h1 id="js高级" tabindex="-1"><a class="header-anchor" href="#js高级" aria-hidden="true">#</a> JS高级</h1><h2 id="一-代码段和作用域" tabindex="-1"><a class="header-anchor" href="#一-代码段和作用域" aria-hidden="true">#</a> 一. 代码段和作用域</h2><p>代码段的特点:</p><ul><li>代码段之间互不影响</li><li>上面代码段定义的代码,下面的代码可以使用</li><li>下面定义的变量,上面的代码段不可以使用</li><li>一个页面中 可以存在多个代码段,每一个js文件都是一个代码段</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>作用域</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用域链</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\n<span class="token keyword">let</span> <span class="token function-variable function">fo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span> \n    <span class="token keyword">function</span> <span class="token function">inner</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-预解析" tabindex="-1"><a class="header-anchor" href="#_2-预解析" aria-hidden="true">#</a> 2. 预解析</h2><p>JS代码的执行</p><ul><li>预解析</li><li>执行 (预解析结束后才会进入到执行阶段)</li></ul><p><img src="' + _imports_0 + '" alt="image-20230915093047479"></p><p><em>浏览器执行代码时,会对代码进行清洗,把重复的代码一部分进行清洗</em></p><p>提升</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 未声明直接使用的变量 会直接报错 a is not defined</span>\n\n<span class="token comment">// 只声明未赋值不会报错</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token comment">// var 声明的变量存在提升</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预解析期间:</p><ul><li>把变量提升, 使用 var 的变量</li><li>函数内部的局部变量,提升导函数打的前面</li></ul>', 19);
const _hoisted_20 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_20);
}
const JSgaoji_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JSgaoji.html.vue"]]);
export {
  JSgaoji_html as default
};
